2017-12-04  [autonameow v0.5.2]
            Bug fixes, various refactoring and reworked test code.

            See the git log for all changes and detailed descriptions.

            Additions:
            - Add a lot of missing unit tests.
            - Add additional data validation in types 'format()' methods.
            - Add 'hypothesis'-based tests 'unit/test_property_encoding.py'.
            - Add 'hypothesis'-based tests 'unit/test_property_fieldparsers.py'.
            - Add 'hypothesis'-based tests 'unit/test_property_types.py'.
            - Add option '-c' to 'unit_runner.sh'.
              Adds optional coverage reporting with 'unit_runner.sh -c'.

            - Add function 'get_persistence()'.
              Adds "public" interface for getting a persistence mechanism.

            - Add option '--last-failed' to the regression test runner.
              Adds option for only running tests that failed during the last run.
              Completes TODO-list item [TD0123].

            - Add (WIP) string distance functions.
            - Add improved "fuzzy" ISBN metadata de-duplication.
            - Add blacklisting ISBN numbers that failed metadata queries.

            - And a lot more --- refer to the git log for additional details.

            Changes:
            - Various improvements to the regression test runner.
            - Refactor a lot of the unit tests.
            - Rework structure of the test code.
            - Add 'FilenamePostprocessor' class to 'builder.py'.
              Moves inline procedure post-processing the filename to new class.
            - Removes unused function 'get_abstract_extractor_classes()'.
              Added directories 'tests/unit'. 'tests/integration' to go along
              with 'tests/regression'.

              - Removed common 'unit_test_' prefix from unit test code.
              - Removed 'integration_test_' prefix from integration test code.

              Also modified the integration test "suites" which no longer can
              be executed as stand-alone scripts.

              A lot of scripts are changed due to complications when handling
              sourcing and paths of bash scripts. It is not really possible to
              get the absolute path of the current script that works in all
              cases; running the script from the same directory, using a
              relative path, absolute path, through a symlink, etc..

              This commit adds a simpler solution where one script exports
              global environment variables that are used by the other scripts.
              This is handled by the new 'setup_environment.sh'.

              This new arrangement means that integration test suites no longer
              can be executed as stand-alone scripts.
              The complexity and workarounds just isn't worth the hassle.

              Integration tests should be executed with 'integration_runner.sh'.

            - Remove the 'AnalysisRunQueue' class.
            - Remove the 'GenericQueue' class.
            - Rework running extractors in 'extraction.py'.

              Adds new class 'ExtractorRunner' to 'extraction.py'.

              Reworks filtering extractors, but is essentially the same as the
              now deleted 'start()' function with some filtering functions
              factored out and mostly using sets instead of lists for storing
              the extractor classes.

            - Have 'unit_runner.sh' use 'pytest' if available.

              Modifies 'unit_runner.sh' to use the available test runner.
              Prefer 'pytest' but use 'unittest' if 'pytest' is not installed.

              If running with the '-w' option, 'pytest' as well as 'pytest.html'
              must be installed, otherwise the program exists with status 1 and
              an error message.

            - Add optional path argument to 'get_persistence()'.

              Works around confusion around which persistence path is used.
              Currently inconsistent depending on the use-case..

              If the main 'Autonameow' class sets the active configuration with
              'config.set_active()', any valid persistence path in the user
              configuration file is used.  Otherwise, the default path defined
              in 'constants.py' is used.

              This problem tells of broader architectural issues..
              When calling 'get_persistence()' from 'regression_runner.py',
              before 'config.set_active()' has been called, results in one
              persistence path being used at the start of
              'regression_runner.py' execution and another at the end,
              after having called 'Autonameow' main the first time..

            - Refactor coloring replacements in 'builder.py'.
              Adds refactoring of utility functions and unit tests.

            - Remove the unimplemented 'FilesystemAnalyzer'.

            - Call middle parts of MeowURI "children".
              Renames the 'MeowURINode' class to 'MeowURIChild'
              Changes other usage of a "node" to "child",
              "nodes" to "children".

              The reason is that a "node" probably is a better describes for
              all parts of a MeowURI, which might be joined in an abstract base
              class with this name.
              This is also more similar to basic computer science terminology.

            - Move MeowURI parsing to separate class.
              Extracts parts of the 'MeowURI' class into new 'MeowURIParser'.

            - Add searching full text in chunks in the analyzers.
            - Improve searching for ISBN-numbers in the 'EbookAnalyzer'.

            - And a lot more --- refer to the git log for additional details.

            Fixes:
            - Fix broken import in 'epubzilla.py'.

            - Add type assertion in 'extraction.collect_results()'.
              Asserts that extractors return data of type dict.

              This is pretty much guaranteed by the extensive new unit testing
              of extractors using shared test case base classes.

              Completes TODO-list entry [TD0106].

            - Fix resolver not stopping after finding match.

              Fixes bug caused by a missing 'break' in the resolver.

              This caused the loop that fetches and verifies data for specific
              name template field to go on, overwriting perfectly good data,
              causing the resolver to fail even when the requested data is
              valid and available.

            - Fix bug in name template field 'Tags.format()'.

              Fixes bug in the format method of the 'Tags' template field.

              The format-method worked fine when passed a list of strings, but
              when passed a single string, the string was split up and joined
              with the "between-tag-separator", causing "tag" to become
              "t a g", assuming a single space as "between-tag-separator".

              This commit fixes this by coercing the data to a list of strings.

              Added regression tests '0003_filetags_b' and '0003_filetags_c'
              that demonstrates this failure case.

            - Fix various bugs in field parsers found by 'hypothesis'-tests.

            - Fix bug in 'PdftotextTextExtractor'.
              Crash caused by calling 'strip()' when extracted text is None.

            - Fix bug in 'BaseAnalyzer._add_results()'.
              Fixes bug where lists was nested instead of simply added.

            - And a lot more --- refer to the git log for additional details.


2017-11-18  [autonameow v0.5.1]
            Major refactoring and extensive rework of internals and tests.
            Added new regression test "framework" that will replace most of
            the tests in 'integration_test_rename.sh'.

            See the git log for all changes and detailed descriptions.

            Additions:
            - Add initial deduplication of values in the resolver.
            - Add (WIP) stand-alone content extraction 'bin/extract.sh'.
            - Add regression tests and runner 'tests/regression_runner.sh'.
            - Add 'BaseNullValue' and 'NullMIMEType' classes in 'types.py'.
            - Add verification to 'todo_id.py'.

              Adds additional features to 'todo_id.py'.

              * Adds option flag '-n'/'--next':

                  Print the next free (unused) TODO-list entry identifier.
                  I.E. the previous functionality. This is enabled by default,
                  and so the script can still be used in exactly the same way.

              * Adds option flag '-c'/'--check':

                  Checks that the sources does not contain completed TODO-list
                  entries or entries that are not in the TODO-list. And also
                  that entry IDs in the TODO- and DONE-list are mutually
                  exclusive.
                  Exits silently with status code 0 if all checks pass.

              * Adds option flag '--oprhaned':

                  Print entries that are in the TODO-list but not the sources.

            - And a lot more --- refer to the git log for additional details.

            Changes:
            - Rename 'bin/run.sh' to 'bin/autonameow.sh'.
            - Refactor most extractor unit tests to use shared base classes.
            - Remove the 'ExtractedData' class.
            - Improved readability of log messages.
            - Remove text extractor 'PyPDFTextExtractor'.
              This extractor has been disabled for some time due to poor
              results.  It is now removed. Should probably be replaced with
              some other PDF text extraction method to provide an alternative
              to 'pdftotext' for cases where it is not available.
              But 'pdftotext' will have to do for now.
            - Remove everything related to 'PyPDF2'.
              Removes the 'PyPDFMetadataExtractor' and related.

              Removes the coercion type class 'PyPDFTimeDate' along with other
              code related to 'PyPDF', 'PyPDFMetadataExtractor' and leftovers
              from the previously removed class 'PyPDFTextExtractor'

              This removes the 'PyPDF' dependency entirely, which is reflected
              in 'install.md'.

            - Move package 'util/disk' to 'core'.
            - Move package 'autonameow/core/util' to 'autonameow/util'.
            - Factor out parts of 'Repository' into new 'ProviderRegistry'.
              Adds a new class 'ProviderRegistry' to handle keeping track of
              sources (extractors, analyzers, plugins) and registering partial
              MeowURIs.
              This was all previously handled in the 'Repository' class, which
              should only deal with storing data from now on.
            - Rework mapping MIME-types to extensions with new 'mimemagic.py'.
              Adds a 'MimeExtensionMapper' class in place of directory lookup.
              The new class is meant to provide a better interface to the
              'mimetypes' library as well as functionality for adding preferred
              extensions for specific MIME-types.

            - Remove caching in all text extractors except OCR.
            - Add partial separation of CLI-specifics from UI.
              Adds rework of module/package structure and imports.

              * Replaces calls to 'cli.msg()' with 'ui.msg()'.
              * Moves 'core/options.py' to 'core/ui/cli/options.py'.

              The 'ui' package is intended to provide an interface to any UI.
              Even if this is currently not relevant and future addition of an
              alternative to the only current command-line interface UI, would
              require reworking a lot of stuff due to incorrect assumptions;
              enforcing this separation at this stage improves readability.

              Note that code inside 'ui/cli' that needs to call 'msg()' does
              not call through the interface with 'ui.msg()', but instead uses
              the CLI-specific function 'cli.msg()' directly.

              Code that is outside of 'ui/cli' should call 'ui.msg()'.

            - Refactor constructing 'RuleCondition' instances.
              Moves constructing 'RuleCondition' instances outside of 'Rule'.
            - Remove 'BaseExtractor.__call__()'.
              Calling extractors like this no longer makes much sense when
              moving to separate methods of accessing the extracted data
              through 'extract()' and the additional information through
              'metainfo()'.

            - Remove 'sanity.check()'.
              Replaces uses of 'sanity.check()' with 'assert'.

              While cute, this function does not add any additional value and
              serves only to add unwarranted indirection and complexity.

            - Remove 'sanity.check_isinstance()'.
              Replaces uses of 'sanity.check_isinstance()' with assertions.

              Adds catching 'AssertionError' in the top-most exception handler.
              The 'AWAssertionError' class should probably be removed as it is
              now only used when inherited from by 'EncodingBoundaryViolation'.

            - Add 'cli/argparser.py'.
              Moves modifying the 'argparse.ArgumentParser' to a new file.

              Adds a shared public interface for getting the modified argument
              parser.  Avoids duplicating code in the autonameow 'options.py'
              and future changes to the regression test runner main.

            - Move 'BaseAnalyzer' and 'AnalyzerError' to new file.
              Adds a new file 'analyzers/common.py' to mirror the extractors.

              Moves classes out of '__init__.py' to a separate for consistency
              with the structure used by the extractors.

            - Modify analyzer run queue priorities.
              Prioritizes analyzers to run that providers of often used data
              first.
              This ranking is probably not even necessary and should be
              removed, but seeing as it is still here it might as well be a
              bit more sensible.

            - Remove passing analyzer results through callbacks.
              Completes TODO-list item [TD0122].

              Replaces the callback-method with returning results stored in an
              instance attribute dict 'results'.

              The 'run()' method is reworked to call a new method 'analyze()'
              that does what 'run()' did previously, and then return the
              results.

              This changes is motivated by making it easier to follow what is
              going on and simplify the overall workings of the results
              collection, that is currently undergoing various refactorings.

            - And a lot more --- refer to the git log for additional details.

            Fixes:
            - Various bugs in the resolver causing crashes.
            - A lot of miscellaneous cleanup, removal of dead code, etc.
            - Modify returned value for empty 'FileObject' parts.
              Returns empty bytestrings for missing 'FileObject' parts.

              File name parts 'basename_prefix' and 'basename_suffix' now
              return empty byte strings instead of None for files that do not
              have the relevant part(s). That is, for instance; 'empty' has no
              extension.

            - Fix multiple sources was overwritten.
              Adds temporary fix to bug where multiple MeowURIs was clobbered.

              Multiple sources for a name template field in the configuration
              file would not be properly parsed in 'config/rules.py'.
              Only the last source would be used, clobbering the previous.

              This commit fixes this by storing the MeowURI sources in a list,
              which also required changes in the "resolver". These changes is
              temporary in that the resolver is a terrible mess, and must be
              cleaned up and/or rewritten in conjunction with reworking usage
              of the 'ExtractedData' class.
            - Catch exceptions thrown by failed imports.
            - And a lot more --- refer to the git log for additional details.


2017-10-23  [autonameow v0.5.0]
            Various bug fixes and refactoring.

            NOTE: This version changes the configuration syntax ---
                  config files written by previous version will *NOT* work!

            Additions:
            - Add datetime field '{year}'.
              Completes TODO-list item [TD0038].
            - Extend and improve the 'MeowURI' class.
            - Add skipping invlaid exiftool metadata entries.
            - Add arbitrary max limits to bruteforce searches.
              Limit set by 'MAX_NUMBER_OF_RESULTS' in 'dateandtime.py'.
            - Add new extractor 'EpubMetadataExtractor'.

            Changes:
            - Add sorting authors when formatting the template field.
            - Use 'MeowURI' class functionality as per [TD0105].
            - Add caching '__str__' in the 'MeowURI' class.
            - Refactor unit tests.
            - Restructure source files, module/package hierarcy.
            - Improve parsing robustness in the 'MeowURI' class.
              Add a lot of improvements and fixes to the 'MeowURI' class.
              Add new stand-alone verification functions and a lot of unit
              tests.

            - Refactor main program entry point.
              Separates the CLI-specific main entry from the "real" main entry.

              Adds a new function 'real_main' that will be the _actual_ program
              entry point.

              This function is intended to be platform/interface-agnostic, in
              that it should be called by an outer interface-specific layer;
              like the CLI entry function 'cli_main'.
              The passed in options are also in an internal format (dict) as to
              not depend on any means of providing program options; argument
              parsers, etc.
              Default options are now defined in 'real_main' and checking
              option combinations is also handled here.

              This change also separates the 'argparse' CLI argument parsing
              from initializing the logging system.

            - Disable the 'PyPDFMetadataExtractor'.
              PyPDF somehow overrides default warning systems. Disable for now.

              It seems very difficult to disable warning messages emitted by
              PyPDF2 due to the way the library is designed. This, combined
              with the overall poor performance and the fact that the project
              is currently "unmaintained in the short term", this extractor is
              now disabled.

            - Add running all plugins if using '--list-all'.
              This works like the inclusion of "slow" extractors.
              Plugins that are referenced in the configuration are included.
              If any results should be displayed, as when running with the
              '--list-all' option, all available plugins are included.

            - Modify conventions for importing utility modules.
                - Use 'import genericfields as gf'.

            - Add new package 'cli'
              Move contents out of 'core/ui/cli/__init__.py'.
              Adds new file 'core/ui/cli/common.py'.

              Moves contents of 'core/ui/cli/__init__.py' to
              'core/ui/cli/common.py'.

              This package is intended to be the interface to multiple
              containing sub-packages that each implement different UIs.

              There is currently only a command-line interface, so this
              interface does not exist. BUT it might be good to implement the
              interface only once another UI is added and the real use and
              requirements are better known anyway.

            - Add new package 'disk' and split up utility functions.
            - Add sorting by MeowURIs when listing repository contents.
            - Add partial implementation of handling coercing lists.
            - Rework persistence and caching system.
            - Modify rule prioritization algorithm.
            - Wrap URIs from non-core with the 'MeowURI' class.
              Completes [TD0105] on integrating the MeowURI class.

            Fixes:
            - Fix 'git_commit_hash()' returning errors when PWD not in source
              root.  Adds temporarily changing the current working directory
              before running the Git subprocess that fetches the currently
              checked out commit.
            - Abort when stdin/stdout is not a TTY. Fix broken tests.
            - Fix crash due to uncaught 'PermissionError' in 'get_files_gen()'.
            - Handle crash in 'format_name_lastname_initials()'.
              Handles crashing because of unhandled 'IndexError'.
              This was caused by the author name "Steve Anson ... [et al.]".
              The periods would be stripped, leaving the empty string that
              would cause the 'IndexError' when accessing to get the first
              character.
            - Fix detecting compound last names in target format.

            - Fix crash. Add 'multivalued' to 'ExtractedData'.
              Fixes crashing (sanity check failure) when formatting tags.

              The name template field 'tags' is assumed to be a list, enforced
              by a sanity check assertion. This failed when the filename
              analyzer passed a single tag to the results.

              This is fixed by modifying the 'ExtractedData' class to allow
              coercing "multivalued" data. The relevant methods in the name
              builder and template field classes are also modified to handle
              multiple values differently; instead of passing a list of
              'ExtractedData' instances, a single instance of 'ExtractedData'
              now can contain a list of data.

            - Fix expression validation bug.
              Fixes bug where a valid boolean False would fail validation.

            - Fix uncaught exception when reading bad epub zip-files.
            - Fix auto-detecting coercer-class from a list of data.
              Assumes that all list entries are of the same type, which is very
              obviously incorrect a lot of times, but works good enough in
              practice.


2017-10-10  [autonameow v0.4.9]
            Includes changes to the configuration file syntax as well
            as refactoring and various fixes of existing functionality.

            Additions:
            - Add additional MIME-type to extension mappings.
            - Add 'util/checksum.py' with hashing functions.
            - Add attribute 'bytesize' to the 'FileObject' class.
              The attribute is evaluated only at first access, storing the
              result for future access.
              Uses 'UNKNOWN_BYTESIZE' if the stat-call fails, which might not
              be such a good idea ..
            - Modify hashing 'FileObject' instances.

              Adds using the "partial" cryptographic hash when hashing
              instances of 'FileObject'.

              When combined with the other attributes used in computing the
              hash, this addition greatly reduces the risk for unwanted hash
              collisions in practical usage.

              Although, this should probably still be extended with the WAY
              WAAY SLOWER method of hashing the entire file for critical
              applications.

            - Add 'makedirs()' to 'diskutils.py'.
            - [TD0103] Add class 'ISBNMetadata' to do ISBN "de-duplication".
            - Add 'remove_ignored_textlines()' to 'analyze_ebook.py'.
            - Implement 'get_edition()' in the 'FilenameAnalyzer'.
              Returns any found editions as integers wrapped in 'ExtractedData'
              instances.  This should be consolidated with similar pattern
              matching of probable editions in plain text done in the
              'EbookAnalyzer'.
            - Add attribute 'hash_partial' to 'FileObject'.
              This could be used for non-critical comparisons and generating
              practically unique identifiers. The only reason for hashing only
              parts of the files is performance.
            - Implement 'delete()' in the 'BaseCache' class. Adds tests.
            - Bind configuration field parsers to "generic" fields.
            - [TD0097] Add changing persistence options in the config.
              Adds a new section to the configuration file.

              This new section allow specifying paths for the caching system as
              well as the interactive prompt history.

                  PERSISTENCE:
                      cache_directory: null
                      history_directory: null

              If omitted or left empty, default values will be substituted.

              NOTE: Default values are always '/tmp/autonameow_cache' and
                    should be made platform-independent at some point.

            Changes:
            - Modify format of '--dump-meowuris' output.
            - Factor out getting MeowURI parts from modules.
              Moves getting MeowURI parts to functions with added
              error-checking.
            - Pass extractors 'FileObject', not bytestrings.

              Replaces bytestring extractor sources with instances of
              'FileObject'.
              Extractors have been passed sources as absolute bytestring paths.
              The 'FileObject' instance has the equivalent absolute path stored
              as an attribute, and hopefully provides additional advantages.

              This is motivated by replacing identifiers used by the caching
              system as keys into the cached data. When the extractors were
              passed only an absolute path to the source, they would have to
              make an extra call to get some kind of checksum from the path, to
              use as the cache key.

              By passing instances of 'FileObject', a reused method for getting
              a file hash can be utilized. This is probably the '__hash__'
              method or a separate hashing method in the 'FileObject' class.
            - Refactor unit tests.
            - [TD0098] Use 'FileObject' hash as cache keys.

              Fixes cache using absolute paths as keys when storing data.

              Adds using hashes provided by 'FileObject' as keys when caching
              data.  Replaces bytestring extractor sources with instances of
              'FileObject'.

              Extractors have been passed sources as absolute bytestring paths.
              By passing instances of 'FileObject', their hashing methods are
              implicitly utilized.

              This reduces the risk of retrieving wrong data from the cache,
              which could happen quite frequently with the old method,
              considering how for instance downloaded files often end up in the
              same directory, using some default basename.

            - Simplify output of '--version'.
              Now prints the bare version if not running with '--verbose'.

            - Add new section 'NAME_TEMPLATE_FIELDS' to config.

              Adds a new section 'Name Template Fields' where the user can list
              known good candidates for fields along with search patterns.

              For instance, the publisher field lists user-defined book
              publisher names along with a list of patterns that if matched,
              would be replaced with the publisher name.

              The default configuration contains the new section:

                  NAME_TEMPLATE_FIELDS:
                      publisher:
                          patterns:
                              FeedBooks:
                              - This book is brought to you by Feedbooks
                              - http://www.feedbooks.com
                              ProjectGutenberg:
                              - Project Gutenberg
                              - www.gutenberg.net

            - Add searching text for publisher in 'DocumentAnalyzer'.
              Adds searching with 'NAME_TEMPLATE_FIELDS' patterns.
              Uses the user-defined patterns in the configuration file.
              Example;

                  NAME_TEMPLATE_FIELDS:
                      publisher:
                          candidates:
                              ProjectGutenberg:
                              - Project Gutenberg
                              - www.gutenberg.net

              The publisher 'ProjectGutenberg' would be used if the document
              text matches any of specified patterns when used as
              case-insensitive regular expressions.

            - Add passing the 'Configuration' instance to all analyzers.
            - Modify configuration syntax and default config.
              Replaces name template field section 'patterns' with
              'candidates'.
            - Add skipping exiftool tags in 'IGNORED_EXIFTOOL_TAGNAMES'.
            - Replace paths with 'FileObject.hash_partial' in log messages.
            - Start integrating the 'MeowURI' class.
              Modifies configuration parsing to use 'MeowURI' instances.

              Adds (WIP) integration of the 'MeowURI' class.
              This should provide a couple of benefits:

              1. All MeowURI validation is handled by the class.
                 It is currently spread out everywhere, a lot of type-checking
                 and tests can probably be removed if the concept of a MeowURI
                 is well encapsulated by the class.
              2. Remove hardcoded strings.
                 Makes for hopefully easier future syntax changes.
              3. Better introspection, the MeowURIs themselves provide
                 information on what kind they are, what kind of resources they
                 refer to, etc. Should mean less redundancy.

              This commit also includes a bunch of other changes due to the fact
              that a lot of the unit tests had to be modified after these changes.
            - Move ordinal regular expressions to 'textutils.py'.
              Adds utility function 'compiled_ordinal_regexes()'.

              Adds utility function for getting compiled regexes for matching
              ordinals to 'textutils.py' and removes similar patterns from
              'analyze_filename.py'.

            Fixes:
            - Add various fixes and cleanup 'analyze_document.py'.
            - Add sanity checking types in 'Resolver'.
            - Fix crashing due to missing None-checks in 'FilenameAnalyzer'.
            - Improve robustness of 'unit_utils.py' functions.
            - Improve the caching system init and error handling.
              Adds creating the cache directory if it does not exist.
              Fixes uncaught 'CacheError' and  modifies the using extractors to
              not abort the extraction if the cache is unavailable.
            - Remove 'deepcopy' of rules in 'RuleMatcher'.
              This was necessary when the 'Rule' class kept scores and other
              state that would be modified between 'RuleMatcher' evaluations of
              different files. This is no longer the case, so this should not
              be needed and does in fact not seem to be needed after a cursory
              glance.
            - Fix 'ColumnFormatter' max column width.
            - Cleanup name formatting functions in 'textutils.py'.
            - Fix bug in calculating probability in 'DocumentAnalyzer'.
            - Add workaround for [TD0084] in 'exiftool.py'.
            - Disable adding redundant results in 'DocumentAnalyzer'.
              References TODO-list item [TD0102].
            - Add reworked (still somewhat WIP) 'pre-assemble-format'.
            - Fix bugs in searching filenames for probable editions.


2017-10-05  [autonameow v0.4.8]
            Adds first implementation of an "interactive" mode with a
            MeowURI-prompt. Contains major rework of the 'Resolver' and
            high-level program flow, which is still a work in progress.

            NOTE: This version changes the configuration syntax ---
                  config files written by previous version will *NOT* work!

            Additions:
            - Initial implementation of an interactive mode based on the
              'python-prompt-toolkit'.
            - Add custom assertion "sanity checks" that raises a special kind
              of exception intended for bug reports.
            - Initial abstraction of "MeowURIs" in the 'MeowURI' class.
            - Add Git submodule 'python-nameparser' to 'thirdparty/nameparser'.
            - Add functions to format full names to "LAST_NAME, initials".

              Example:  "Gibson Cat Sjöberg" is returned as "Sjöberg G.C."

              The 'format_name_lastname_initials' Function formats single names
              and 'format_names_lastname_initials' formats and sorts lists of
              names lexicographically.

            - Add color highlighting "post-processing replacements".

              Refactors 'colorize_quoted' into a more general function
              'colorize_re_match' that adds colors to parts of text that
              matches a given compiled regular expression.

              Modifies 'colorize_quoted' to simply pass 'colorize_re_match' a
              regular expression that matches anything within quotes.

            - Add utility 'ColumnFormatter' class to 'cli.py'.
              Utility formatter for printing columns of string.
              All column widths are set to the widest entry in any column.

            - Adds a new command-line option '--dump-meowuris'.

              Dump all MeowURIs registered to the "Repository" at startup.
              Some sources require explicit inclusion and might therefore not
              be included. Combine with  "--debug" for more information.

            - Add caching system with pickle-backend.
            - Add caching ISBN metadata requests.
            - Add caching text extracted by the 'PdftotextTextExtractor'.
            - Add caching text extracted by the 'PyPDFTextExtractor'.
            - Add caching text extracted by the 'TesseractOCRTextExtractor'.
            - Add new generic fields.
              'GenericAuthor',  'GenericPublisher' and 'GenericHealth'

            - Add a new extractor class 'JpeginfoMetadataExtractor'.

              Returns a new type of generic field; 'health', that represents
              the integrity or 1/corruption of a file as a float in range 0-1.

              It also returns a related boolean result 'is_jpeg' that could be
              used to verify file types, ensure quality and detect corrupt
              files.  Which is very useful when dealing with jpegs ..

            - [TD0042] Implement the '--quiet' option.
            - Add 'devscripts/write-default-config.sh'.
              Script for writing the default configuration to YAML-file.
              Writes the config in 'core/config/default_config.py' to
              'test_files/default_config.yaml'.

            Changes:
            - Modify the configuration file format in a non-trivial way.

              Adds storing the 'Rules' in a dictionary instead of list.
              The new dictionary is keyed by the old 'description'-field.

              Example of the OLD format:

                  RULES:
                  -   CONDITIONS:
                          extractor.fs.xplat.basename.full: foo_pdf.md.pdf
                      DATA_SOURCES:
                          extension: extractor.fs.xplat.basename.extension
                      NAME_FORMAT: foo_pdf.md.{extension}
                      description: test_files foo_pdf.md.pdf
                      exact_match: true
                      ranking_bias: 1

              Example of the NEW format:

                  RULES:
                      test_files foo_pdf.md.pdf:
                          CONDITIONS:
                              extractor.fs.xplat.basename.full: foo_pdf.md.pdf
                          DATA_SOURCES:
                              extension: extractor.fs.xplat.basename.extension
                          NAME_FORMAT: foo_pdf.md.{extension}
                          description: test_files foo_pdf.md.pdf
                          exact_match: true
                          ranking_bias: 1

              This should make the configuration file easier to read for humans.

            - Moves 'autonameow_version' to a new section in the config.
            - Modify contents and formatting of '--version' output.
            - [TD0081] Add 'pyexiftool' as a Git submodule.
              Replaces 'wrap_exiftool.py' with a 'pyexiftool' submodule.
            - Add convention of importing 'constants.py' as 'C'.
            - Rename constant variables in 'constants.py'.
            - Remove the 'AbstractMetadataExtractor' class.
              Modify 'ExiftoolMetadataExtractor' and 'PyPDFMetadataExtractor'
              to inherit directly from 'BaseExtractor' class.
            - Move 'ExtractedData' to new file 'extracteddata.py'.
            - Various changes to how "sources" register "MeowURIs".
            - Prepend 'extractor' to the 'ExiftoolMetadataExtractor' MeowURI.

                  Previous MEOWURI_ROOT = 'metadata.exiftool'
                   Current MEOWURI_ROOT = 'extractor.metadata.exiftool'

            - Modify overall handling of "MeowURIs".

              Instead of hard-coding a "MEOWURI_ROOT" in the source classes,
              this new method uses the Python module hierarchy to construct
              default MeowURIs.

              It is still possible for source classes to override either parts
              or the entire MeowURI.

              The new convention is to always include the type of sources in
              "source-specific" MeowURIs.

              The first part is either 'extractor', 'plugin' or 'analyzer'.

              Example:  'extractor.metadata.exiftool.EXIF:DateTimeOriginal'

              This makes a clear distinction between the specific MeowURIs and
              the "generic" URIs, which will be simpler; 'metadata.DateCreated'

            - Refactor retrieving paths in 'diskutils.py'.

              Substitutes 'get_files' with the similar generator version
              'get_files_gen'.

              Adds a new class 'PathCollector' to store the "globs" that are
              to be converted to bytestrings". The class was intended to act
              as a container or encapsulated namespace.

            - Refactor configuration parsing and validation.
            - Add new 'namebuilder' package.
              Move 'namebuilder.py' to 'namebuilder/builder.py'.

            - Separate name template fields from "generic" fields.

              Moves the content from 'core/fields.py' and moves it to the two
              new files 'namebuilder/fields.py' and 'model/genericfields.py'.

              The original 'core/fields.py' is deleted.

            - Add initial implementation of verifying name template data.

              Adds checking if subclasses of 'NameTemplateField' is
              "compatible" with data collected by the resolver.
              This is part of moving towards providing the name builder with
              validated data.
              The name template field classes attribute 'COMPATIBLE_TYPES' list
              the "coercion"/type-wrapper types whose data format can be used
              to populate the relevant field.

            - Modify default configuration.
              Moves options from section 'FILESYSTEM_OPTIONS' to "post-processing".

              Moves the following options from the 'FILESYSTEM_OPTIONS' section:

                  'lowercase_filename': False,
                  'uppercase_filename': False,
                  'sanitize_filename': True,
                  'sanitize_strict': False

              .. to the 'CUSTOM_POST_PROCESSING' section.

            - Modify "generic" MeowURIs.

              Renames constants for MeowURI roots. Adds 'MEOWURI_ROOT_GENERIC'.

              Modifies the format of "generic" MeowURIs from the previous
              'metadata.generic.author' to 'generic.metadata.author'.

            - Split PDF text extractors into separate files.

              Separates 'pdf.py' into 'pypdf.py' and 'pdftotext.py'.

              In order to fit with the current scheme of devising MeowURIs from
              the module/package names in the hierarchy, these two extractors
              should be separated into different files.

              This makes source-specific queries possible, I.E.
              'extractor.text.pypdf' or 'extractor.text.pdftotext'; which was
              previously impossible because the query 'extractor.text.pdf'
              would return text produced by either of these two extractors.

            - Refactor unit tests add shared utility functions.
            - Rename 'PyPdfTextExtractor' to 'PyPDFTextExtractor'.
            - Rework how data is passed from/to analyzer classes.
            - Rename 'ImageOCRTextExtractor' to 'TesseractOCRTextExtractor'.

              Renames the source file from 'ocr.py' to 'tesseractocr.py'.

              Part of moving towards the new scheme of devising MeowURIs from
              the module/package names in the hierarchy.

              The new names distinguish this exact extractor, as opposed to the
              old names that was intended to work with any OCR backend.

            - Disable 'PyPDF2' text extraction because of poor results.
            - Modify colors, content and formatting of many messages.
            - Add method 'as_string' to 'ExtractedData'.

              This works around having to "round-trip" like so:

                  assert isinstance(ed, ExtractedData)
                  s = ed.coercer.format(ed.value)

              Now this does the same thing:

                  assert isinstance(ed, ExtractedData)
                  s = ed.as_string()

            - Add new package 'ui'. Move 'cli.py'.
            - Add returning probable extensions from 'FilenameAnalyzer'.

            Fixes:
            - Return None from 'Configuration.get()'.

              Replaces raising 'KeyError' with returning None for bad accesses.

              Fixes bug causing program crashing when the name builder calls
              'config.get(['CUSTOM_POST_PROCESSING', 'replacements'])' and the
              configuration file does not contain these sections.

              The configuration usually substitutes default values to prevent
              this, but in this case it really should be up to the user to
              decide if any substitutions should be made.

            - Fix serious bug in 'ExtractedData'. Fix namespace.

              The 'ExtractedData' instances would be shared when called
              multiple times from the same "wrapper_tag_lookup" dictionary.

              This commit adds a hack fix class method that uses 'deepcopy'
              to make a copy of the instance before calling and returning it.

              The type "wrappers" are renamed to "coercers" to avoid namespace
              issues with instances of 'ExtractedData', that also are referred
              to as "wrappers".

            - Add various fixes to the 'GuessitPlugin'.
            - Add various fixes to the 'MicrosoftVisionPlugin'.
            - Add handling more date/time-information returned by 'exiftool'-
            - Fix crashing when some dependencies are unavailable.
            - Fix bugs in the type coercion classes.
            - Fix bugs and improve performance of the 'filter_paths' function.
            - [TD0086] Use one "SessionRepository" per autonameow instance.

              Adds a 'RepositoryPool' class to handle repositories.

              The active repository is registered to the start time and process
              ID registered by the 'Autonameow' class.
              This solution is pretty overkill but does solve the problem.
            - Fix various bugs and improve robustness of configuration parsing.
            - Prevent 'Resolver' adding sources for unused template fields.
            - [TD0004] Clean up text decoding.

            - Fix unhandled exceptions in 'populate_name_template'.
              Adds catching 'TypeError' at the call-site.
              The try/catch-block around 'name_template.format(**kwargs)' does
              not seem to catch any 'TypeError' exceptions caused by the
              keywords in kwargs not being Unicode strings.

            - Fix invalid data requests to generic text.
              Changes generic text content requests to 'contents.generic.text'.
            - Fix analyzers not expecting instances of 'ExtractedData'.
            - Fix crash due to missing None-check in 'pdftotext.py'.
            - Fix missing 'MEOWURI_LEAF' attribute in plugins.
            - Fix incorrect validation in the MIME-type field parser.


2017-09-20  [autonameow v0.4.7]
            Added custom "post-processing" replacements and case-changes.
            Bugfixes and refactorings.

            Additions:
            - Implement type wrapper classes 'format' methods and remove the
              'formatter' keyword argument.
            - Add generic fields.
            - Add improved date/time-parsing with utility functions.
            - Improve argument validation robustness for user-facing functions.
            - Add a new option for transforming filenames to all lower-case.

              Adds new configuration field under 'FILESYSTEM_OPTIONS'.

                  FILESYSTEM_OPTIONS:
                      lowercase_filename: false

              Default value is false.
            - Add option for transforming filenames to all upper-case.

              Adds new configuration field under 'FILESYSTEM_OPTIONS'.

                  FILESYSTEM_OPTIONS:
                      uppercase_filename: false

              Default value is false.

              If both 'uppercase_filename' and 'lowercase_filename' is enabled,
              then 'uppercase_filename' is (not really) arbitrarily ignored.
            - Add user-specified "post-processing" replacements.

              Uses pairs of regular expressions patterns and replacement string
              to perform last-minute replacements on the new file name.
              Example:

                  CUSTOM_POST_PROCESSING:
                      replacements:
                          \-\{2,\}+: '-'
                          \.{2,}: .
                          o[tk]: MEOW
                          gmail: mjaomjao

              1-2) Collapses repeating dashes and periods, respectively.
                3) Replaces either 'ot' or 'ok' with 'MEOW'.
                4) Replaces 'gmail' with 'mjaomjao'.

            Changes:
            - Add a new "to-string" method in the 'Repository' class.
              Means that the '--list-all' formatting has changed.
            - Modify text extractors 'meowuri_root' and common return method.

              The repository 'store' method (and '_store' method) handles too
              many specific cases, this is part of an effort to have non-core
              components use a more consistent format for the data to be
              stored.

              Instead of having the 'meowuri_root' be
              'contents.textual.raw_text' and returning the data "as-is" from
              the 'AbstractTextExtractor.excute()' method, this commit modifies
              the 'meowuri_root' of all text extractors to 'contents.textual'
              ('contents.visual' for the OCR-extractor..) and adds returning a
              dict from the 'AbstractTextExtractor.excute()', with 'raw_text'
              as the only key.
            - Modify the "MeowURIs" used by text extractors.

                  Previously:  'contents.textual.raw_text'
                  Changed to:  'contents.textual.text.full'

            - Modify terminal color scheme.
            - Rename 'PdfAnalyzer' to 'DocumentAnalyzer'.

              Having filetype-specific analyzers no longer makes any sense.
              The analyzer classes have been left behind while the overall
              overarching goals and surrounding architecture has changed.
            - Move getting a Unicode str representation of fields.

              Instead of having the 'Resolver' class gather data and then do
              formatting by calling the bundled wrapper and other contextual
              information, it should be more appropriate to let the "name
              builder" perform all formatting-related operations, as the name
              builder has access to user-defined formatting options.  Also, the
              name builder already performs very similar actions --- they
              should be consolidated and kept in one place.
            - Modify public 'Configuration' interface.

            Fixes:
            - Do not "rebuild magic" at every MIME-type test.
            - Improve reading version number from config.
            - Fix bugs in the utility function 'eval_meowuri_glob'.
            - Various fixes to 'Repository' methods.
            - Fix logic error in 'decode_raw' that effectively disabled it.
            - Fix crash when missing datetime-formatting options.

              Adds falling back to default 'DATETIME_FORMAT' options.
              If the configuration file did not specify the following options;

                  DATETIME_FORMAT:
                      date: '%Y-%m-%d'
                      datetime: '%Y-%m-%dT%H%M%S'
                      time: '%H-%M-%S'

              .. the program would crash because no default values were used.
              If any of the 'DATETIME_FORMAT' options are missing, the
              following defaults, defined in 'constants.py', will be substituted:

                  DEFAULT_DATETIME_FORMAT_DATETIME = '%Y-%m-%dT%H%M%S'
                  DEFAULT_DATETIME_FORMAT_DATE = '%Y-%m-%d'
                  DEFAULT_DATETIME_FORMAT_TIME = '%H-%M-%S'
            - Add 'PIL' to 'ImageOCRTextExtractor' dependency checks.
            - Fix intermittent bug in getting extension from MIME-type.


2017-09-11  [autonameow v0.4.6]
            A lot of refactoring for improved robustness and stability.
            Removes the 'pytesseract' dependency. Adds dynamic handling of
            missing dependencies.  Major rework of extractors and plugins.
            Refer to the git log for additional details.

            Additions:
            - Add new analyzer class 'EbookAnalyzer'.
            - Add git submodule 'epubzilla' for handling epub-files.
              This is still WIP, and will reqire a lof of fixing before use..
            - Add checking extractor class dependencies.
            - Add extracting timestamps in 'CommonFileSystemExtractor'.
            - Add improved logging system.
            - Add new analyer class 'FiletagsAnalyzer'.
            - Add mapping "sources" (plugins/extractors/analyzers) to
              "meowURIs" for looking up candidate sources classes from
              query strings.
            - Add requiring extractors based on "meowURIs" referenced by rules
              in the active configuration.
            - Add ignoring files listed in the configuration.

              Uses "globbing" similar to that of 'fslint', acting on full
              paths.  So that glob '.DS_Store' would not match any files,
              instead use '*/.DS_Store' to match all files called '.DS_Store'
              in any path.

              The ignored files are listed under the 'FILESYSTEM_OPTIONS' in
              the configuration.

              The user-specific ignore-patterns is added to a set of defaults
              that are listed in 'constants.py'.
            - Add a new file 'name_template.py' for placeholder fields.
              Still somewhat of a work in progress.
            - Add A new class 'Resolver' for handling data collection
              previously done in 'namebuilder.py'.
            - Add meowURI: 'filesystem.abspath.full'
            - Rework 'plugin_handler.py'. Run only referenced plugins.
            - And a lot more --- refer to the git log for additional details.

            Changes:
            - Remove state and modify calling extractor classes.
              Modifies extractors to not keep any state and simplifies use.
              Previously, the extractor classes was handed a data source at
              instantiation through the '__init__' method.  This meant that the
              classes first had to be "loaded" with a source before they were
              executed in a later step, when running the "queue".
              Extractor classes no longer require any arguments to the
              '__init__' method.  Instead, the data source is passed to the
              class 'execute'-method, through the '__call__' method.

                  Old way of extracting data:

                      extractor = DataExtractor(source)
                      result = extractor.execute()

                  New way of extracting data:

                      extractor = DataExtractor()
                      result = extractor(source)

              This also removes the "extractor run queue" as it no longer
              required with this new way of executing extractors.

              Extractors also stored data in instance variables such as
              'self._data'.  This is also removed -- extractors should be
              called as functions.
              Extractors should no longer keep any state between calls.

            - Consolidate methods for returning extractor results.
            - Remove unused base class 'Rule'.
            - Refactor evaluating 'FileRule' conditions.
              Separates modifying the object state from returning results.
            - Refactoring by renaming variables and methods.
            - Improve prioritization of rules in the name builder.
            - Renmae file rule 'weight' to 'ranking_bias'.
            - Move 'namebuilder.py' to the 'core' module'.
            - Move 'filter.py' to the 'core' module'.
            - Restructure extractor module nesting.
              Modifies extractor namespacing to use submodules instead of '_'.
            - Remove "Py3k compatibility" in 'wrap_exiftool.py'.
            - Refactor and restructure unit tests.
            - Add 'unit_utils_constants.py'.
            - Rename the concept of "File Rules" to "Rules".
            - Move validation of rules to 'rules.py'.
            - Move validation of rule conditions to 'rules.py'.
            - Separate commad-line options setup from logging setup.
            - Clean up file object internals. Modify public interface.
            - Move "filetags"-specific code from 'FileObject' to the new
              'FiletagsAnalyzer' class.
            - Move "sanitation" to the name builder.
            - Replace the 'Extraction' class with module-level functions.
            - Replace the 'Analysis' class with module-level functions.
            - Remove unused function 'get_analyzer_classes_basename'.
            - The concept of a "query string" is now called a "meowURI".
            - Rename extractor query methods 'query' to 'execute'.
            - Adds method of auto-detecting encoding for difficult text.
            - Modify default colors in rename message.
            - Refactor the "name builder". Remove the 'NameBuilder' class.
            - Modify the 'Rule' class to not keep any state.
            - Remove 'pytesseract' depdendency, add inline modified version.
            - Rename 'autonameow.py' to 'main.py'.
            - Add wrapping data with 'ExtractedData' classes, for keeping
              contextual information and refernces to type wrapper classes,
              for use when converting the "raw" data to a form suitable for
              populating placeholder fields in the name template.
            - And a lot more --- refer to the git log for additional details.

            Fixes:
            - Fix getting file extensions from MIME-types.
            - Fix logging loosing track of the root logger.
            - Add skipping unit tests if dependencies aren't met.
            - Fix logic bugs in getting extension from MIME.
            - Fix bugs in 'eval_query_string_glob'.
            - Fix bug in repository where multiple results would not be
              collected properly in a list.
            - Fix non-breaking spaces messing up reading the configuration.
            - Fix cases of missing modules, 'PyPDF2'.
            - Fix inconsistent use of "MeowURIs" in analyzers.
            - Fix crashing when repeating the same input path multiple times.
            - Fix 'run.sh' wrapper script not resolving symlinks on MacOS.
            - Fix various bugs in the 'PlainTextExtractor', related to encoding.
            - And a lot more --- refer to the git log for additional details.


2017-08-18  [autonameow v0.4.5]
            Mostly non-functional improvements and refactoring.
            Rework of the internals for improved robustness and new features.
            Refer to the git log for additional details.

            Additions:
            - Add new type wrapper class 'PathComponent'.
              Passing parts of file names that could be empty, like a file
              extension that might be missing without considering the file name
              to be invalid, would trigger exceptions in the 'Path' type class
              that expected full absolute paths.
              This commit adds a new type class 'PathComponent' that accepts
              parts of paths and even empty paths, like that of a missing file
              extension.
            - Add requiring all extractors to be run if displaying any results.
              This should be reworked to handle cases where the configuration
              requires information from "slow" and normally excluded
              extractors.
              Normally excluded extractors should be included when they are
              required, not only when any results are to be shown.
            - Add optional list of required extractors.
              Adds optional argument 'require_extractors' to the 'start'
              method.
              The 'Extraction' class 'start' method can take an optional list
              of required extractor classes. If a extractor is "slow", it is
              not used if not explicitly required by inclusion in the
              'require_extractors' list.

            Changes:
            - Remove "get_*" methods from 'BaseAnalyzer'.
            - Add new extractor 'PlainTextExtractor'.
            - Move 'Rule' and 'FileRule' classes to 'rules.py'.
            - Modify field assignments to field parser classes.
              Uses the globs to catch some metadata fields. Especially
              'exiftool' fields such as 'PDF:Title' and 'XMP:Title' are matched
              by '*.:Title'.
            - Substitute a bad recursive function with a new common utility.
              Both the 'AnalysisResults' and 'ExtractedData' classes used a
              recursive function to count the number of contained items.
              One of these implementations was bad and returned bad counts.
              Add a single shared utility function used by both classes.
            - Rename 'AnalysisResults' method 'query' to 'get'.
            - Modify overall storage architecture.
            - Add a new 'Repository' class for storing all data.
            - Modify querying results in the 'RuleMatcher'.
            - Modify wrapping possibly empty path components.
              Use the new 'PathComponent' class for data that might be empty.
              The file extension might be missing and still be valid.
            - And a lot more --- refer to the git log for additional details.

            Fixes:
            - A lot of unused code removed.
            - Fix 'PlainTextExtractor' returns text as list.
            - Fix "null" return form the 'Path' types. Raise exception instead.
            - Do not represent "null" for 'datetime' types.

              <BANE> Find a suitable "null" representation of a 'datetime'
                     object, by not representing it.  </BANE>

            - Add fixes to the 'PathType' class and its related tests.
            - Fix various extractor bugs.
            - Fix incorrect exception handling in extractors.
            - And a lot more --- refer to the git log for additional details.


2017-07-25  [autonameow v0.4.4]
            Mostly non-functional improvements and refactoring.
            Rework of the internals for improved robustness and new features.

            Additions:
            - Adds a new script 'devscripts/next_todo_id.py'.
              Returns the next free TODO-list identifier that hasn't been used
              in either the TODO-list ('TODO.md') or "done" list ('done.md').
            - Add missing unit tests.
            - First implementation of internal custom type system.
              Custom type "wrapper" classes are used to coerce data into
              certain types. Classes are instantiated and re-used as "filters",
              the data is simply passed through and not contained within the
              custom type classes.
            - Add a method '_normalize' to the 'RegexConfigFieldParser' class.
              To be used for normalizing "unwieldy" text which might hopefully
              make matching more intuitive when dealing with text that "should"
              match but doesn't due to Unicode symbols looking very similar..
              NOTE: Currently completely unused.
            - Add passing extractor results data through the 'Path' type.
              Also adds modifications to the 'FileObject' class to match these
              changes. The 'FileObject' fields that are used in the changed
              lines should already be in the "internal bytestring" format, and
              so passing the data through the 'Path' type class returns them
              as-is.
              However, the idea is that this is part of a overarching change in
              how types are handled throughout the program and this specific
              case might be revisited and simplified at some later stage.
            - Add a partial implementation of handling "raw" data safer.
              Data extracted by 'MetadataExtractor' classes is wrapped in type
              classes that provide validation and type coercion.
              This *might* be a viable way to convert unknown "raw" data to a
              internal representation with greater certainties regarding the
              data types and contents.
              This might also solve formatting and other related issues.
            - Add mapping type wrappers to "raw" data with
              'tagname_type_lookup' in Extractor classes.
            - Add function 'try_wrap' that attempts to wrap values.
              Uses a lookup table dict 'PRIMITIVE_AW_TYPE_MAP' to map the type
              of the given value to internal type wrapper classes.

            Changes:
            - Refactor and cleanup the 'Configuration' class.
            - Rework how parsers are mapped to "query strings".
            - Various refactoring of unit tests.
            - Modify fields for 'DateTimeConfigFieldParser'.
            - Add returning dummy, false-positive "True" incomplete parsers.
              Results in unimplemented field parser evaluation functions will
              always evaluate a condition to True. Uses lambda-functions.
            - Various changes to the 'FieldParser' classes and their mapping.
            - Removs the 'MetadataSourceConfigFieldParser' class.
              This field parser class does not follow the intended abstraction
              model where the parser classes are mapped to expected data types
              based on the "query string". The "metadata fields" could contain
              any type of data, and so this class does not work well with the
              rest of the current implementation.
            - Move functions related to extractors.
              Moves functions and module attributes to 'extractors/__init__.py'
            - Move functions related to analyzers.
              Moves functions and module attributes to 'analyzers/__init__.py'
            - Rename extractor classes to indicate use and type.
              Prepend 'Abstract' to abstract classes, 'Base' to base classes.
            - Adds getting valid query strings at run-time instead of constant.
              Part of moving towards collecting information about valid query
              strings at run-time instead of using predetermined constants.
            - Remove redundant methods in "results" container classes.

            Fixes:
            - Add handling unimplemented evaluation.
            - Improvements to condition validation and configuration parsing.
            - Fixed comparing 'datetime' object with/without timezones.
            - Fix hack import and instantiation of extractors.
              New functions for finding and importing extractor classes from
              suitable python source files helped eliminate ad-hoc imports.


2017-07-10  [autonameow v0.4.3]
            Mostly refactoring and improvements of the internals; parts that
            handle evaluation of rules and validating the configuration are
            rewritten and greatly improved.
            Includes changes to the configuration file syntax, as well as
            compatability tests that alerts that user of this and upcoming
            changes.

            Additions:
            - Add compatability checking the configuration file.
              The program version used to write the file is stored in the
              configuration, this is compared against the version of the
              running program.
            - Add testing 'FieldParser' class suitability with wildcards or
              "globs", similar to the "MIME type globs" used in the 'Extractor'
              classes and for evaluating MIME type conditions in the
              configuration file rules.
            - Add a new "--recursive" option for recursively collecting files
              from all subdirectories of a given path.
            - Add additional integration and unit tests.
            - Add new "Compatibility" integration test suite.
              Some of the tests from the "Command-Line Interface" test suite
              were moved to this new file. New tests were added as well.
            - Add a new 'RuleCondition' class.
              Represents a single condition contained in a configuration file
              rule.  Performs validation of incoming arguments and packages a
              condition to facilitate evaluation.
            - Add unique identifiers to TODOs in the code and the TODO-list.

            Changes:
            - Modify the configuration file syntax.
              The configuration now uses a "flatter" structure as follows;

              Previous, old syntax:
                  -   CONDITIONS:
                      contents:
                          mime_type: image/jpeg
                      filesystem:
                          basename: DCIM.*
                          extension: jpg

              New, "flattened" syntax:
                  -   CONDITIONS:
                      contents.mime_type: image/jpeg
                      filesystem.basename: DCIM.*
                      filesystem.extension: jpg

            - Refactor and cleanup the 'Configuration' class.
            - Rework rule evaluation, now uses the 'FieldParser' classes to
              evaluate conditions. Still a work in progress.
              The "rule matcher" uses the 'RuleCondition' class method
              'evaluate' to evaluating conditions.  The method delegates the
              evaluation to a referenced 'FieldParser' class, that is chosen
              based on the "query string".
            - Various bugfixes and refactoring.
            - Move towards the "new" high-level architecture, separating the
              "core" from "analyzers" and "extractors".

            Fixes:
            - Fix 'FileRule' scores was not reset properly after each file.
            - Fix inconsistencies in the configuration file syntax.
            - Various improvements to handling encoding.
            - Fix broken integration and unit tests.


2017-06-24  [autonameow v0.4.2]
            Includes first attempt at properly fixing encoding issues.  Also a
            lot of cleanup and refactoring.  Refer to the Git log for details.

            Additions:
            - Add unit tests for old code.
            - Add and rework existing unit test mocking functions.
            - Add 'tests/README.md'.
            - Add constant 'MAGIC_TYPE_UNKNOWN' to be used if detection fails.

            Changes:
            - Modify how extractor and analyzer classes are deemed suitable for
              a given file.
              Old method evaluated the given file MIME type against the MIME
              type blobs in each of the classes attribute 'handles_mime_types'.
              Suitability is now tested by a new class method 'can_handle' in
              the 'Extractor' and 'Analyzer' base classes.  The internal
              implementation is the same, but this change opens up for future
              overriding of the 'can_handle' method in each of the inheriting
              classes if they require additional testing.
            - Various code/filename fefactoring and cleanup.
            - Add initial attempt at fixing encoding issues properly.
                - Based on the solution used in the "beets" project, described
                  here:  http://beets.io/blog/paths.html
                - Add reusable functions for encoding/decoding at boundaries.
                - Start reworking code to adhere to the boundaries and keep
                  data encoding/decoding to a minimum within the program.
            - Fall back to a default file rule description if not provided.
            - Rework terminal coloring and modify logging colors.
            - Add initial refactoring of 'namebuilder.py'.
              Move rule matching functions from 'namebuilder.py' to a new file
              'rulematcher.py'.

            Fixes:
            - Improve the 'colorize' function and verify with unit tests.
            - Fix the 'colorize_quoted' function and verify with unit tests.
            - Handle case where results is a dict of dicts.
              Results are flattened and the label is prepended to the results.
            - Add proper handling of MIME type globs in the configuration.
            - Trivial improvements to some of the unit tests execution speed.


2017-06-17  [autonameow v0.4.1]
            This version marks the start of definitiely moving towards
            a redesigned and pretty much frozen high-level architecture.
            Includes major changes. Refer to the Git log for in depth coverage.

            Additions:
            - Improved error handling in the 'NameBuilder' class.
            - Add support for simple globbing in MIME comparisons.
              This is used internally and in the configuration file.

                  MIME to evaluate      Glob          Evaluates
                  ---------------------------------------------
                  'image/jpg'           'image/jpg'        True
                  'image/png'           'image/*'          True
                  'application/pdf'     '*/*'              True
                  'application/pdf'     'image/*'         False

            - Add program version in the configuration file for future
              compatability testing.
            - Add 'TODO.md', which will be the primary list of stuff to do.
              Also added 'done.md' for the completed TODO-list items.

            Changes:
            - Modified the configuration file syntax.
              NOTE: Incompatible with older versions.
            - Major restructuring of overall architecture.
              Move towards separating data extracting from data analysis.
                - Add data extraction handler class 'Extraction' that functions
                  similar to the 'Analysis' class. Builds a queue of
                  "extractors" suited for the given file, executes enqueued
                  extractors and collects the results.
                - Add "extractors" as classes inherting from 'Extractor';

                    - Extractor
                        - MetadataExtractor
                            - ExiftoolMetadataExtractor
                            - PyPDFMetadataExtractor
                        - TextExtractor
                            - PdfTextExtractor
            - Various changes in part of moving towards new architecture.
                - In progress moving of data extraction from "analyzers" to
                  "extractors".
                - Extracted data is passed to the 'Analysis' class and
                  subsequently the "analyzers".

            Fixes:
            - Numerous fixes and corrections.
            - Documentation, bug fixes, refactoring and cleanup.
            - Removed a lot of hacks added in order to deliver v0.4.0 on time.


2017-06-06  [autonameow v0.4.0]
            Final version used in the demonstration videos recorded 2017-06-06.
            Includes major changes. Refer to the Git log for in depth coverage.

              This is the first actually usable version! Still very much alpha.

            Additions:
            - Improved out printing with presets and coloring.
            - Added actual renaming of files. '--automagic' mode now
              renames files matched in the configuration file.
            - Add 'santizize_filename' from the "youtube-dl" project.
            - Various utility functions and related unit tests.
            - Add customizable date/time formats in configuration file.
            - Add parsing configuration file rules, conditions and sources.
              Parts of this still needs quite a bit of work.
            - Add 'extractor' package for content extractors that can be used
              by analyzers. Should reduce code duplication.
            - Documentation, bug fixes, refactoring and cleanup.

            Changes:
            - Major restructuring of module hierarchy.
              All analyzers are moved to a new module 'analyzers' located at
              the same "depth" as the main 'core' module.  This is motivated
              by striving strict separation between the main program core and
              auxiliary modules that perform various tasks like data extraction
              and interaction with other systems.
            - Restructued internal data format. All crucial internal data
              structures are dervied from a reference 'RESULTS_DATA_STRUCTURE'.
            - Start move towards using callbacks to collect analyzer results.
            - Redesigned exiftool wrapper.
            - Abandon 'PyPDF' text extraction. Use 'pdftotext' exclusively.
            - Documentation, bug fixes, refactoring and cleanup.

            Fixes:
            - Numerous fixes and corrections.
            - Documentation, bug fixes, refactoring and cleanup.


2017-05-29  [autonameow v0.3.2]
            Includes major changes to both functionality and implementation.

            Marks the end of development as part of the course work of
            "1DV430 -- Individual Software Development Project", part of
            "Software Development and Operations" at Linnaeus University.

            Additions:
            - Custom "integration" testing framework.
                - Bash shell scripts allows testing anything on the system.
                - Generates test result reports as html and pdf documents.
                - Scripts for running all unit tests, integration tests,
                  producing reports and updating the project wiki.
            - Add a lot of missing unit tests.
            - Add shared utility functions for unit tests along with
              corresponding unit tests.
            - Add functions for reading and writing YAML files.
            - Add configuration handling.
                - Configuration data is handled by a 'Configuration' class.
                - Parsing and validation of configuration settings is done
                  by the following subclasses of the 'RuleParser' class;
                    - 'RegexRuleParser'      (Regular expression fields)
                    - 'MimeTypeRuleParser'   (MIME type fields)
                    - 'DateTimeRuleParser'   (Date/time-information fields)
                    - 'NameFormatRuleParser' (File name format string fields)
            - Add custom exceptions using the following inheritance hierarchy;
                - 'AutonameowException' (top-level base class)
                    - 'InvalidFileArgumentError' (invalid arguments)
                    - 'ConfigError' (top-level configuration exception class)
                        - 'NameTemplateSyntaxError' (invalid formatting string)
                        - 'ConfigurationSyntaxError' (bad configuration syntax)
                        - 'ConfigReadError' (configuration file read error)
                        - 'ConfigWriteError' (configuration file write error)

            Changes:
            - A lot of miscellaneous fixes, cleanup and refactoring.
                - Add 'constants.py' for all fixed global constants.
            - Add/update documentation strings.
            - Modify content and formatting of printed messages.
            - Move argument validation to 'FileObject' class.
            - Rewrite default configuration file.
            - Rewrite configuration structure and configuration file syntax.

            Fixes:
            - Fix failing unit tests.
            - Fix a lot of miscellaneous bugs.
            - Improve handling of calling unimplemented code.


2017-05-10  [autonameow v0.3.1]
            Insignificant changes of the core functionality. But major rework
            and improvements of the testing code, documentation and structure.

            Additions:
            - Include additional information on the environment in debug mode.
            - Add new option '--config-path' to allow specifying an alternative
              configuration file to use instead of the default configuration
              file at predetermined platform-specific locations.
            - Add shared library for the integration test scripts;
              'tests/integration_utils.sh', contains common utility functions
              used by bash test-scripts, like assertions, execution time
              measurement, logging, etc.
            - Add integration tests and integration test runner;
                - Add main integration runner 'integration_runner.sh'.
                - Add "Test Suite" test suite 'integration_test_tests.sh'.
                - Add "Command-Line Interface" test suite
                  'integration_test_cli.sh'.
                - Add "Documentation" test suite 'integration_test_docs.sh'.
            - Add directory 'devscripts' for developer tools and scripts.
                - Add experimental script 'list-imported-modules.sh'.
            - Add shared library for ALL tests; 'tests/common_utils.sh'.
              Handles setting up paths and global variables that are exported
              to the environment.
            - Add unit test runner; 'unit_runner.py'.
              Wraps 'pytest' which is used to run all unit tests and export the
              test results report to a HTML file.
            - Add (work in progress) runner for ALL tests; 'common_runner.sh'.
              This script will run both integration tests and unit tests and
              produce a summary report which will be included in the project
              wiki page, alternatively uploaded to GitHub pages.

            Changes:
            - Remove matching of rule field 'filename_in_filetags_format'
              in 'RuleMatcher'. Motivation is limiting project scope.
            - Remove prototype integration test; 'tests/run_integration_1.sh'.

            Fixes:
            - Various fixes and corrections to the main source and unit tests.
            - Various fixes and corrections to the utility scripts.


2017-04-24  [autonameow v0.3.0]
            Start developing the project during the course "1DV430 --
            Individual Software Development Project", part of the "Software
            Development and Operations" programme at Linnaeus University.

            Bump version to version v0.3.0, which will be the first version to
            contain changes made during the duration of the course.

            Additions:
            - Add Github-hosted project Wiki:
              https://github.com/1dv430/js224eh-project/wiki
            - Added prototype integration test; 'tests/run_integration_1.sh'.
            - Add new option '--version' that displays the program version
              and exits. This is now the only use of the ASCII-art banner.

            Changes:
            - Make 'guessit' integration optional, silently ignore errors and
              skip code that depend on the module if it is unavailable.
            - Add explicit licensing with GNU General Public License (v2).
              https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt

            Fixes:
            - Various cleanups of non-source files like documentation and notes.
            - Overall restructuring of the project directory hierarchy.
            - Improve wrapper launcher script 'run.sh'
                - Better error-handling and overall robustness.
                - Add OS-specific fixes for MacOS Sierra version '10.12.3' and
                  Linux version '4.4.0-71-generic'.
            - Add simple handling of NotImplementedError exceptions thrown in
              the abstract analyzer base class when an unimplemented field
              attribute getter is called.
            - Fixed various failing unit tests.


2016-12-19  [autonameow v0.2.2]

            Additions:
            - Include exiftool wrapper 'pyexiftool'.
                  http://smarnach.github.com/pyexiftool
                  https://github.com/smarnach/pyexiftool
              Simply copied in place for now. Dependecies should be handled
              properly, as git submodules, via pip or similar mechanism.
            - Add wrapper script 'run.sh' to act as a main entry point.
            - Start using exiftool in the pdf analyser.
            - Add 'get_publisher' to all analyzers.
            - Implement first version of 'get_publisher' in the PdfAnalyzer.
            - Add comments to indicate overridden methods and attributes.
            - Implement 'get_title' in the PdfAnalyzer.
            - Add ebook name template and matching rules to config defaults.

            Changes:
            - Separate operating mode from actions to perform.
                - Operating mode is either "automagic" or "interactive".
                  Default mode is the (safer (?)) "interactive mode".
                - Options for which actions to perform, for example:
                  "prepend datetime" or "rename" (unimplemented) are separate.
            - Add simpler method for getting fields from analyzers.
            - Change main color in the ASCII art header from yellow to blue.
            - Various changes to the 'namebuilder' class. Still far from done.
            - Various improvements and refactorings in the 'NameBuilder' class.

            Fixes:
            - Fix bug where the message to use '--help' to display help was
              displayed even when '--help' was used.
            - Display  message if the yet unimplemented feature "prepend
              datetime" is enabled.
            - Fix bug in 'prettyprint_options' by explicitly wrapping
              everything in 'str()' calls.


2016-11-14  [autonameow v0.2.1]

            Additions:
            - Improved inline documentation/docstrings.
            - Add priority to the analysis run queue execution.
                - Analyzers are assigned a priority number 0-1, stored in the
                  class variable 'run_queue_priority'.
                - Analysis with a higher number are executed before those
                  with a lower number.
            - Add rule field 'prefer_title'.
              Specifies which title to use, similar to 'prefer_datetime'.
            - Add detecting filename in "filetags" format.
                - Add method 'filetags_format_filename()' to 'FileObject' that
                  returns boolean True if the filename is in "filetags" format.
                - Add unit tests for 'filetags_format_filename()'.
            - Add rules to 'config_defaults.py' for testing.
            - Add matching of rule field 'filename_in_filetags_format' in
              'RuleMatcher'.

            Changes:
            - Start using "Google-style" documentation string formatting.
            - Modified rules in 'config_defaults.py'.

            Fixes:
            - Fix error caused by missing 'string.letters' attribute with
              Python 3. Use 'ascii_letters' for now. Should be fixed.
            - Fix broken unit tests.
            - PIL exception logging debug message caused crash.
            - Fix guessit import statement.
            - Fix logging message was shown regardless of match.


2016-08-28  [autonameow v0.2.0]

            Additions:
            - N/A

            Changes:
            - Migrate project to Python 3.5.
              Drop Python 2 support entirely for simplicity.
              Backwards compatibility fixes might be added at some future time.
            - All source files processed with the '2to3' conversion tool,
              version "2to3-2.7 2.7 January 2012". Some passed unchanged.

            Fixes:
            - N/A


2016-08-19  [autonameow v0.1.8]

            Additions:
            - Add unit tests for 'options.py'.
            - Add a 'NameBuilder' class for assembling new names.
              Fills out the empty template specified by a matching rule with
              data from analysis results.
            - Extend and improve the 'RuleMatcher'.
            - Add dynamic listing of Analyzer classes.
                - Store all analyzer classes in '_ALL_ANALYZER_CLASSES'.
                  The classes are added if their name ends with "Analyzer".
                - Adds function 'get_analyzer_classes' to access the above list.
                - Adds function 'get_instantiated_analyzers' to get a list of
                  analyzer objects.
                  Note that these are instantiated with a None 'FileObject'.
            - Store relevant file mime types in the analyzers themselves.  Add
              a new field 'applies_to_mime' that can be a string, a list of
              strings or None, which means the analyzer should be used
              regardless of file mimetype.

            Changes:
            - Rename the command-line option '--ignore-before-year' to
              '--ignore-to-year'.
            - Rename the command-line option '--ignore-after-year' to
              '--ignore-from-year'.
            - Change how the command-line options are passed in to argparse.
            - Improve function 'arg_is_year'.
            - Remove stub "action" classes 'AbstractAction' and 'RenameAction'.
            - Do not pass filter instances to the analyzers.  Filters were not
              used anyway, instead do the filtering as a separate step after
              the analysis.
            - Analyzers do not execute their analysis at instantiation.
                - Use new method 'run()' to start the analysis.

            Fixes:
            - Fix incorrect number of arguments expected for options
              '--ignore-from-year', '--ignore-years' and '--ignore-to-year'.
            - Rule matcher name regex tests file basename.
            - Fix no matching rule caused crash.


2016-08-09  [autonameow v0.1.7]

            Additions:
            - Extends title extraction in 'FilenameAnalyzer' by weighting
              results by how many "filetags" filename parts are present.

                  Filename:                                   Weight:
                  20160620 Descriptive title -- tags.ext      1
                  20160620 Descriptive title.ext              0.75
                  Descriptive title.ext                       0.25

              Add tests for the above additions and changes.

            - Add unit tests for main program class 'Autonameow'.
            - Extend test cases for the "filename partitioning".
            - Add new option '--automagic' to be used during development.
            - Add a new class 'ResultFilter' for filtering analysis results.

            Changes:
            - Restructure project directory hierarchy.
              Nest most of the main program code in a new package 'core'.
            - Modify logging message levels.  Substitute "warning" for "debug"
              in non-critical blocks for less overall logging output.
            - Move argparse command-line handling to a new file 'options.py'.
            - Removes the short form '-z' of command-line option "debug mode".
            - Improve implementation of command-line option '--dump-options'.

            Fixes:
            - Spelling, formatting and similar minor changes.


2016-08-07  [autonameow v0.1.6]

            Additions:
            - Implement all target features in 'FilesystemAnalyzer' and add the
              relevant tests, making it the first completed analyzer.
            - Extend the "filename partitioning" to include a date-/timestamp.
              Add and/or modify unit tests for extracting 'filenamepart_ts'.

            Changes:
            - Remove the 'Results' class in 'analysis.py' and substitute a
              plain dictionary instead.
            - Rename the actual value key in the results dictionary returned by
              analyzers to "value", instead of the previous "datetime" and
              "title" for datetime and title respectively.
            - Rename 'file_object.py' to 'fileobject.py'.
            - Extract file checks in '_handle_files' to method '_check_file'.
            - Set the "quiet mode" ('-q', '--quiet') default to False.
            - Set the "verbose mode" ('-v', '--verbose') default to False.

            Fixes:
            - Minor logging debug message grammar/spelling fixes.
            - Fix bug where execution with no commad-line arguments causes
              failed read of 'args.verbose'.


2016-07-31  [autonameow v0.1.5]

            Additions:
            - Add new option '--list-title' which dumps all "title" information
              from the analysis results. Similar to '--list-datetime'.
            - Extend tests of "filename partitioning" in the 'FileObject' class.
            - Add more unit tests;
                - Start adding tests for the 'FilenameAnalyzer' class.
                - Start adding tests for the 'FilesystemAnalyzer' class.
            - Add new option '--list-all' which dumps all information

            Changes:
            - Replaced logging errors with assertions.
            - Modify logging message levels to prefer lower level messages such
              as "debug" and "info" before higher levels like "warning" and
              "error".
            - Extend matching "special case" pattern in 'dateandtime.py'.

            Fixes:
            - Remove commented/dead code, listed by class:
                - FileObject: get_oldest_datetime, add_datetime.
                - Analysis: filter_datetime, print_oldest_datetime.
            - Optimize import statements.


2016-07-23  [autonameow v0.1.4]

            Additions:
            - Extend tests for utility file system functions in 'diskutils.py'.
            - Add test cases to tests of filename partitioning in 'FileObject'.
            - Add assertions and remove unhelpful warning messages.

            Changes:
            - Various cleanup and formatting fixes.
            - Remove debug print statement.
            - Temporarily disable unicode encoding in 'sanitize_text'.

            Fixes:
            - Remove unused and unfinished code.
                - Method 'prefix_date_to_filename'.
                - Method 'print_oldest_datetime'.
            - Fix incorrect usage of 'FileObject', modify to match new
              attribute names and structure.
            - Update how the 'FilenameAnalyzer' gets tags from filenames.
              Now uses the "partitioned filename" methods in 'FileObject'.


2016-07-22  [autonameow v0.1.3]

            Additions:
            - Add a very fancy ASCII art logo, created with "figlet".
              Displayed only when using the '--verbose' option.
            - Add tests for functions in 'dateandtime.py'.
            - Move function 'filetype_magic' to the utility file system
              functions in 'diskutils.py'.
                - Add tests for 'filetype_magic' in 'diskutils.py'.
            - Move responsability for basic file name operations to the utility
              file system functions in 'diskutils.py'.
                - Tests for getting file name extensions, file basename, etc.
            - Tests for extracting "filetags" tags.

            Changes:
            - Modify startup "banner" text contents and overall appearance.
            - Improve 'match_special_case' in 'dateandtime.py'.
            - Rename 'match_unix_timestamp' to 'match_any_unix_timestamp'.
            - Modify program exit message text.
            - Class 'FileObject' now gets the file type magic from
              'filetype_magic' in 'diskutils.py'.
            - Remove unused variable 'originalfilename' in 'FileObject'.

            Fixes:
            - Change how "very special case" date format in filenames are
              detected. This prevents duplicate results and is performant.
            - Improve handling filenames, especially compound extensions
              such as "filename.tar.gz" which does have the extension
              ".gz" but when dealing with "filetags" it makes more sense to
              treat all of ".tar.gz" as the extension/suffix.
            - Spell my my last name properly in 'version.py'.
              The encoding definition would allow using "ö", instead of
              the cautious "o". ..right?


2016-07-21  [autonameow v0.1.2]

            Additions:
            - Add parsing filetags from file names, as per the "filetags"
              workflow. Adds 'get_tags' to the abstract analyzer class,
              even though not all analyzer are suited to implement it.
            - Add settings related to the "filetags" workflow to the
              configuration file and default settings.
            - Start adding unit tests for 'dateandtime.py'.
            - Add utility file system functions 'diskutils.py'.
                - Add tests for 'diskutils.py'.

            Changes:
            - Rename 'main.py' to 'autonameow.py'.
            - Cleanup 'autonameow.py';
                - Remove unused code.
                - Rename variables and methods.
                - Make functions out of non-class specific methods.
            - Rename 'doc' directory to 'docs'.
            - Redo the unit tests completely, use different structure.
            - Add program termination message when using '--verbose'.
            - Have 'file_object' instances use the functions in 'diskutils.py'
              for getting their own filenames, etc. This makes it easier to
              test "simple" disk I/O code -- no need to create
              'file_object' instances.

            Fixes:
            - Improve matching UNIX timestamps in 'dateandtime.py'.


2016-07-11  [autonameow v0.1.1]

            Additions:
            - Log the total execution time when using the '--verbose' option.
            - Various improvements and additions to the debugging information
              provided by "logging" when running with the '--debug' option.
            - Add extra date/time search pattern to handle erroneous OCR text
              results where "/" is returned as "7".
            - Add extra date/time search pattern for filenames created by the
              Chrome extension "Full Page Screen Capture".

            Changes:
            - Change logging level for no files specified.
            - Modify logging levels. A number of 'info'-level messages are now
              'debug'-level, motivated by reducing the overall output.
            - Keyboard interrupt handling (ctrl-c) is now handled at a higer
              level so that "most" interrupts are handled properly.
            - Modify extracting date/time-information from filenames.  Adds
              search-methods and modifies the order. Still not very good and
              needs work.
            - Modify the default configuration in 'default_config.py'.
            - Modify how text is "sanitized" after extraction from documents,
              currently only pdfs. Still very broken and needs to be fixed.

            Fixes:
            - Fix pdf page numbering in debug output.
            - Fixes bug in PdfAnalyzer date/time-extraction where results from
              'dt_regex' would end up in 'text_content_brute', leading to the
              bruteforce results never reaching the results.
            - Fix cases where pdf content  extraction with PyPdf2 would return
              a single byte that counted as a successful extraction, preventing
              any additional tries/extractors from being run.


2016-07-08  [autonameow v0.1.0]
            First actual version bump. Development up until now has been at
            version v0.0.1. The code has now (barely) entered a state that
            warrants versioning.

            Additions:
            - Project now has a change log.
            - Basic alpha version of the main program, still severily lacking
              in functionality, stability and consistency.

            Changes:
            - N/A

            Fixes:
            - N/A

2018-07-29  [autonameow v0.5.8]
            Mostly refactoring and fixes.
            Improves canonicalization of 'publisher' field values.
            Adds canonicalization of 'creatortool' and 'language' values.
            Adds new text extractor for extracting plain text from djvu files.

            Additions
            - Add/modify canonical publisher patterns and tests.

            - Add/modify language canonicalization patterns.

            - Add/modify canonical language patterns and tests.

            - Add/modify creatortool canonicalization patterns.

            - Add/modify canonical publisher patterns and tests.
              Also fixes suddenly failing unit tests by sorting compared dicts.

            - Add 'lru_cache' to 'metainfo_from_yaml_file()'.
              Adds caching the class method for reading metainfo YAML files.

              Although, this should probably only ever be called once anyway
              since the 'ExtractorRunner' class keeps instantiated extractors
              in a "instance pool" cache as to not re-instantiate extractors
              for each run.

            - Add a 'UNKNOWN' canonical publisher.

            - Add additional 'deduplicate_isbns()' unit tests.

            - Add assertions in 'MimetypeExtensionMapParser'.
              Adds checks related to unexpected state and unassigned variables.

            - Add e-mail address to the '--help' text.

            - Add doc string to 'StringValueCanonicalizer'.

            - Add license headers to 'canonical_*.yaml' files.

            - Add entries to exiftool field value blacklists.

            - Add (WIP) string value canonicalization.
              Adds canonicalization of "creator tool" and "language".

              First hack testing of canonicalization of values in the
              'ExiftoolMetadataExtractor' and 'PandocMetadataExtractor'.

              References TODO [TD0189] on canonicalizing metadata values by
              direct and regular expression replacements.

            - Add support for 'xlsx' file metadata.
              Enables 'ExiftoolMetadataExtractor' for 'xlsx' files.

              Enables extracting metadata from files with MIME-type
              'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
              Adds exiftool field meta for unhandled fields discovered from doing
              metadata extraction from a large number of arbitrary sample files.

            - Add note on 'unpack_field_value()' behaviour.

            - Add caching to functions in 'meowuri.py'.
              Adds various fixes and wraps functions with 'lru_cache'.

            - Add filtering bad PandocMetadataExtractor metadata.
              Adds function 'is_bad_metadata()' to 'extractor_pandoc.py'.

              Basically same as the function with the same name in
              'extractor_exiftool.py'.

              TODO: Both these implementations are poor ..
                    If any single value in a list of values is deemed "bad", all
                    values are discarded. Only the bad value should be removed!

            - Add "creator tool" canonicalization.
              Adds functionality for getting a canonical form of "creator tools".

              These are names of software used to create a file or document.
              The 'XMP:CreatorTool' tag should be the only tag that contains these
              kind of fields but in practice, just about any field can contain this
              information given a large enough dataset.
              Especially the 'XMP:Creator' and other variations like 'PDF:Creator',
              etc., and 'XMP:Producer' seems to contain mostly author names,
              publishers and creator tools.

              Keeping track of known creator tools in some way will aid in sifting
              through the mixed up metadata and properly categorize values.

            - Add generic language to extractors field meta.
              Adds generic field "language" to exiftool and pandoc extractors meta.

            - Add new generic field "language".

            - Add language canonicalization.
              Adds functionality for getting a canonical form of language strings.

            - Add 'canonical_publisher.yaml' metadata and tests.
              Adds missing packaging metadata 'canonical_publisher.yaml' entry.

              Also adds checking that this file exists in the "Source Code"
              integration test suite.

            - Add MIME mapping for extension 'azw'.

            - Add common substring length functions.
              Adds functions for calculating lengths of common substrings.

            - Add new regression test case and test file.
              Adds new regression test '0022_macos_screenshot'.

              Adds test file 'Screen Shot 2018-06-25 at 21.43.07.png'.

              This regression test checks both evaluation of the
              'extractor.filesystem.xplat.abspath_full' MeowURI as well as the
              'FilenameAnalyzer' functionality for matching the date/time in the
              screenshot basename. Previously not sufficiently covered by tests.

            - Add missing parsing of '*.abspath_full' MeowURIs.
              Adds missing 'RegexConfigFieldParser' association to MeowURI glob.

            - Add function 'match_macos_screenshot()'.
              Adds function for extracting 'datetime' objects from filenames.

              Matches date/time strings in default MacOS Sierra (v10.13.5)
              screenshot filenames, typically stored at ~/Desktop by default.

            - Add unit tests and minor fixes to 'text/distance.py'.

            - Add entry to exiftool metadata blacklist.

            - Add new text extractor 'DjvuTextExtractor'.
              Adds new text extractor for extracting plain text from djvu files.

              Requires 'djvutxt' to be installed on the system.

              Also adds additional test files 'Critique_of_Pure_Reason.djvu' and
              'Critique_of_Pure_Reason.djvu_expected.txt'.

            - Add new function 'preprocess_names()'.
              Adds function 'preprocess_names()' to 'humannames.py'.

              This simply wraps functions 'split_multiple_names()' and
              'filter_multiple_names()'. Intended to be the new "public"
              function for cleaning up lists of names from various sources.

            - Add ability to set 'ColumnFormatter' width limit.
              Adds ability to set a maximum total width of formatted output.

              If 'max_total_width' is set before calling 'str()' on the
              'ColumnFormatter' instance, the width of fields will be truncated
              until the total width is less than the set 'max_total_width'.

              This is not used by default, so the default behaviour is unchanged.

            - Add unit test cases for human name parsing.

            - Add entries to exiftool metadata blacklist.

            - Add additional 'ColumnFormatter' unit tests.

            - Add context manager for ignoring exceptions.
              Adds arguably useful and/or convenient context manager 'ignored'.

              Context manager for silently ignoring one or many exceptions.
              If the exception is raised, any following code will be skipped.

            - Add new file 'util/process.py'.
              Adds new file for utility functions related to system processes.

              Contains 'blocking_read_stdout()' that wraps 'subprocess.Popen()'.

            - Add unit test cases for 'split_multiple_names()'.

            - Add blacklisted exiftool field data.

            - Add notes on 'unpack_field_value()' behaviour.

            - Add MIME-type to extension mappings.

            - Add function 'normalize_vertical_whitespace()'.
              Adds text transformation function to remove line feeds from strings.

              One might expect this function to also collapse multiple repeating
              line separators, based on the naming and behaviour of
              'normalize_horizontal_whitespace()' ..

              This solves an immediate problem but will probably have to be
              extended later on.

            - Add extension mappings for 'x-mobipocket-ebook'.

            - Add 'Palm:Rights' to exiftool field meta.

            - Improve removing non-name human names. Add tests.

            - Add missing file with "expected" rtf text.

            - Add unit test case for parsing human names.

            - Add note on 'XMP:CreatorFile-as' being single item.

            - Add unit test of 'PlainTextExtractor.can_handle()'.

            - Add (WIP) 'Record' class.

            - Add additional integration tests.
              Adds tests using the default configuration and all test files.

            - Add function 'normalize_description_whitespace()'.
              Adds yet to be used regression test string utility function.

            - Add [TD0196][TD0197] on limiting file name length.

            - Add (WIP) utility functions for handling substrings.
              Adds functionality related to finding "separators" in strings.

              Mostly modified versions of code removed from 'analyze_filename.py'
              in commit d2ad99e211a3cfc53d38a05f897e0dc14c75fdc0

            - Add unit test for splitting subtitles.

            - Add note with example on "unpacking" field values.

            - Add unit tests for extracting e-book ISBNs.

            - Add types to docstrings.

            - Add checking that 'aspell' is installed.
              Verify 'aspell', required by 'devscripts/check-spelling.sh'.

            - Add additional test cases in 'test_compat.sh'.
              Adds additional integration testing of version strings.

              Make sure that the compared version strings are single lines,
              I.E.  something like '0.5.7', rather than '0.5.7\n0.5.7'.

              Reorder and clean up existing tests. Add comments.

            - Add (WIP) file 'core/metadata/unpack.py' and tests.
              Adds (WIP) functionality for handling titles with embedded subtitle.

              References TODO [TD0191] on detecting and extracting subtitles.

            - Add replacing Unicode hyphen and unit tests.

            - Add 'average_runtime_regression_tests.sh'.
              Adds script for calculating the average regression runner runtime.

            - Add blacklisted exiftool field data. Reformatting.

            - Add additional unit tests of 'RegexLineFilter'.

            - Add 5 regression test suites with generic leaves.

            - Add aliases (generics) for MeowURI leafs.
              Adds ability to use generic field names as leaves in URIs.

              A "full" explicit URI like this;

                  extractor.metadata.exiftool.PDF:CreateDate

              Can now also be written like this;

                  extractor.metadata.exiftool.date_created

              Note however that a query with new form will most likely to map
              to more than one "full" explicit URI. I.E. the URI above will
              expand to many full URIs;

                  extractor.metadata.exiftool.FlashPix:Issued0
                  extractor.metadata.exiftool.FlashPix:PublishingStartDate
                  extractor.metadata.exiftool.Palm:CreateDate
                  extractor.metadata.exiftool.Palm:PublishDate
                  extractor.metadata.exiftool.PDF:CreateDate
                  extractor.metadata.exiftool.QuickTime:CreateDate
                  extractor.metadata.exiftool.QuickTime:CreationDate
                  extractor.metadata.exiftool.RTF:CreateDate

              This is controlled by the 'generic_field' entry in each providers
              "fieldmeta" (yaml file).

              Completes TODO-list item [TD0125] on adding aliases (generics) for
              MeowURI leaves.

            - Add new 'MeowURIMapper' class.
              Adds a new class for translating URIs with "aliased" leaves.

              Stores a mapping between a "explicit" URI and a "generic" URI for
              translation from "explicit" URIs with "generic" (aliased) leaves.

              That is, given URI: 'extractor.metadata.exiftool.XMP-dc:Publisher'
                 and generic URI: 'generic.metadata.publisher' (GenericPublisher)

              Future calls to 'fetch()' with 'extractor.metadata.exiftool.publisher'
              will then return 'extractor.metadata.exiftool.XMP-dc:Publisher'.

              References TODO-list item [TD0125].

            - Add function 'get_all_generic_field_uri_leaves()'.
              Adds function for getting all generic field leaves as strings.

            - Add canonical publisher replacements.

            - Add patterns to exiftool metadata filtering.


            Changes
            - Rework extractors, primarily text extractors.
              Simplifies the extractor class hierarchy, collection, etc.

              Splits the inheritance hierarchy into two separate parts.

              Previous inheritance hierarchy:

                  (base)  @ BaseExtractor
                          |
                  (base)  +----@ AbstractTextExtractor
                          |    |
                          |    +-- EpubTextExtractor
                          |    +-- MarkdownTextExtractor
                          |    +-- PdfTextExtractor
                          |    +-- PlainTextExtractor
                          |    +-- RichTextFormatTextExtractor
                          |    '-- TesseractOCRTextExtractor
                          |
                          +-- EpubMetadataExtractor
                          +-- ExiftoolMetadataExtractor
                          +-- JpeginfoMetadataExtractor
                          '-- PandocMetadataExtractor

              Inheritance hierarchy introduced in this commit:

                  (base)  @ BaseMetaDataExtractor
                          |
                          +-- EpubMetadataExtractor
                          +-- ExiftoolMetadataExtractor
                          +-- JpeginfoMetadataExtractor
                          '-- PandocMetadataExtractor

                  (base)  @ AbstractTextExtractor
                          |
                          +-- EpubTextExtractor
                          +-- MarkdownTextExtractor
                          +-- PdfTextExtractor
                          +-- PlainTextExtractor
                          +-- RichTextFormatTextExtractor
                          '-- TesseractOCRTextExtractor

              The text extractor data is no longer available through the repository
              and master data provider through URIs like 'generic.content.text',
              'extractor.text.plain', etc.
              A "service"-like interface in 'text_provider.py' should be used instead.
              This removes a lot of unnecessary complexity and makes further
              refactoring and cleanup of old code a lot easier.

              Class attributes 'IS_SLOW' and 'HANDLES_MIME_TYPES' are also removed.

              This commit also includes "various other somewhat related" changes that
              made this transition easier ..

              Completes TODO-list item [TD0172] on extending the text extractors with
              additional fields.

            - Improve 'FiletagsExtractor' handling of dates.
              Adds handling "filetags file names" containing dates without time.

              Various fixes to the 'FiletagsExtractor' to highlight the fact that a
              valid filetags "timestamp" can be either just a date (~"YYYY-mm-dd")
              or both date and time (~"YYYY-mm-ddTHHMMSS").

              Yet again the choices made when designing the system with "field meta"
              it too rigid and inflexible. In this case, when a timestamp can be
              either a date or a datetime, there is no clean way to declare this in
              the YAML meta info file and no non-hacky ways to workaround the type
              coercion system.
              So, currently either none or either of 'date' and 'datetime' will be
              used depending on whether the timestamp exists and if it contains a
              date or both date and time __BUT__ this will raise an error which will
              be debug logged most of the time, even though it is not really an
              error..

            - Modify blacklisted exiftool field values.

            - Modify empty 'ISBNMetadata' publisher.
              Return 'UNKNOWN' instead of empty string for missing publishers.

            - Decrease chunk of lines searched for ISBN numbers.

            - Sort ISBN dicts for deterministic behaviour.

            - Reformat 'canonical_*.yaml' files for consistency.

            - Use lazy logging in 'core/*.py'.
              Replaces 'format' calls with "printf style" formatting.

              Avoids doing any unnecessary work if the called logging
              level is not active.

              Squashed commits:

              * Use lazy logging in 'core/providers.py'.
              * Use lazy logging in 'core/autonameow.py'.
              * Use lazy logging in 'core/context.py'.
              * Use lazy logging in 'core/event.py'.
              * Use lazy logging in 'core/analysis.py'.
              * Use lazy logging in 'core/extraction.py'.
              * Use lazy logging in 'core/master_provider.py'.
              * Use lazy logging in 'core/renamer.py'.
              * Use lazy logging in 'core/repository.py'.

            - Simplify mapping field URIs to generic leaves.
              Simplifies the caching and functions used in 'genericfields.py'.

              * Replace module-level global with 'lru_cache' decorator.
              * Remove function '_get_field_uri_leaf_to_klass_mapping()'.

            - Rework argument option defaults and '--help' text.
              Adds using the '%(default)s' placeholder to insert defaults.

              * Add explicit default settings for some options.
              * Minor rewrites and fixes to the help text.
              * Reorder arguments passed to the argument parsers.

            - Remove module-level global. Use 'lru_cache' decorator.

            - Handle bad syntax in canonicalizer YAML files.
              Prevent crashes if expecting section and value is not type dict.

            - Modify 'ISBNMetadata' canonicalization.
              Minor changes that seem to make a bit more sense.

            - Append '_ignore_case' to 'match_any_regex'.
              Modifies the syntax of the canonicalizer YAML files.

              Changes 'match_any_regex' to 'match_any_regex_ignore_case' to make
              it clear that regular expressions listed here are not case-sensitive,
              compared to the 'match_any_literal' sections that ARE case-sensitive.

            - Remove filetags 'timestamp' after copying.
              Fixes bug introduced in commit a832807714d629e3ec5174271a343def82e

              Removes the 'timestamp' from the "raw metadata" dict after copying
              its value to both 'date' and 'datetime'.
              Fixes logging debug warnings:  Field not in "metainfo"; "timestamp"

            - Pass in the rename function to 'FileRenamer'.
              Adds optional kwarg 'rename_func' to 'FileRenamer.__init__()'.

              Originally part of failed attempt at refactoring the regression
              runner mocking of the 'FileRenamer._rename_file()' method, which
              has been reverted. Some changes that simplified the unit tests
              somewhat was kept and constitutes this commit.

            - Pass in 'FileRenamer' to 'Autonameow.__init__()'.

            - Instantiate 'FileRenamer()' in 'Autonameow' constructor.

            - Modify file header comments. Add new e-mail.
              Modifies all top-level file header comments. Use new project e-mail.

              * Remove link to personal website in all comments.
              * Add source repository URL to all comment headers.
              * Remove university e-mail from all comments.
              * Use new project email adress 'autonameow@jonasjberg.com'.

            - Remove 'devscripts/convert-html-to.pdf.sh'.

            - Clean up encoding boundary in 'FiletagsExtractor'.
              Refactors the 'FiletagsExtractor' to do less string encoding.

              Various clean up and renames.
              Simplify splitting a basename into filetags parts by not passing
              the extension or "basename suffix" which was never used and only
              added to the messy decoding/encoding of strings.

            - Add blacklisted exiftool field values. Modify tests.

            - Handle bad syntax in canonicalizer YAML files.
              Prevent crashes if list item contains extra trailing colon.

            - Move unit test data to separate YAML file.
              Moves data used by the creatortool canonicalization unit tests.
              Adds new file 'test_core_metadata_canonicalize_creatortool.yaml'.

            - Move unit test data to separate YAML file.
              Moves data used by the publisher canonicalization unit tests.
              Adds new file 'test_core_metadata_canonicalize_publisher.yaml'.

            - Make sure all bound callables are called.
              Adds broad try/except block around calls to bound callables.

              Make sure all callables are called in case of an unhandled
              exception. This really "should" NOT happen, it is assumed that
              bound callables will responsibly handle any exceptions locally.

            - Return 'language' from the 'EbookAnalyzer'.
              Adds returning canonicalized language from ISBN metadata.

            - Increase "tolerance" of 'match_macos_screenshot()'.
              Modifies the 'match_macos_screenshot()' to catch additional strings.

            - Modify the '--dump-meowuris' option.
              Changes interaction with verbosity options. Modifies output.

              Replaces using '--debug' with '--verbose' to get additional
              information.  Modifies the output to use the plain provider
              names instead of the default class strings.

            - Simplify 'ProviderRegistry' functionality.
              Continued refactoring of the 'ProviderRegistry'.

              Simplifies data structures created by the 'ProviderRegistry'.
              Removes one level of nesting from dicts storing MeowURIs and classes.
              Previously, these contained a first level of top-level module names
              'extractor' and 'analyzer', which was never actually used and made
              the code more difficult to read and comprehend.

            - Remove unused 'ProviderRegistry' functionality.
              Removes unused filtering functionality in the 'ProviderRegistry'.

              The optional 'includes' argument of method 'providers_for_meowuri()'
              was never actually used. This is now removed, which also meant that
              additional related methods and tests could be removed.

              This commit also includes other minor changes related to these
              changes, with some intended to make way for additional refactoring.

            - Handle special case in human name processing.
              Adds handling splitting names like 'G. C. Sjöberg'.

            - Modify exiftool fieldmeta.

            - Modify which files are handled by 'EbookAnalyzer'.
              Adds additional file types to be handled by the 'EbookAnalyzer'.

              Adds 'azw3' variations. Also adds previously missing unit tests.

            - Prevent adding empty authors in 'EbookAnalyzer'.

            - Various changes to ISBN metadata comparisons.
              Adds various changes to how ISBN metadata objects are compared.

              Modify title comparison to use a new separate function
              'calculate_title_similarity()' that uses a ad-hoc experimentally
              devised function that uses both a Levenshtein string distance as
              well as a "normalized" longest common substring to arrive at a
              total similarity.

              Modifies the weights of the "hardcoded decision tree".

              Improves logging by adding additional debug information as well
              as implementing 'ISBNMetadata.__repr__()'.

            - Match MacOS screenshot date/time in 'FilenameAnalyzer'.

            - Improve filtering human names.
              Improves matching of regular expression in 'strip_edited_by()'.
              Also adds splitting names separated by 'and' as well as 'And'.

            - Move and rename 'process_id()'.
              Moves 'misc.process_id()' to 'process.current_process_id()'.

            - Move 'git_commit_hash()' to 'process.py'.
              Moves 'git_commit_hash()' from 'util/misc.py' to 'util/process.py'.

            - Move 'is_executable()' to 'process.py'.
              Moves 'is_executable()' from 'util/misc.py' to 'util/process.py'.

            - Use 'preprocess_names()' in 'analyze_ebook.py'.

            - Modify 'EbookAnalyzer' author similarity function.
              Adds sorting space-separated substrings before doing comparisons.

              This improves results for cases where a name like 'Gibson S.' is
              compared to 'S. Gibson'.

            - Modify 'remove_ascii_control_characters()'.
              Adds removing additional ASCII control characters ^A and ^B.

            - Catch all exceptions whens calling 'ebooklib'.
              Handle all exceptions to ensure not crashing due to 'ebooklib' bugs.

              Various AttributeError and KeyError exceptions are raised for some
              epub files. Happens infrequently but results in a hard crash if not
              properly handled.
              Instead of listing all possible uncaught exceptions that is not not
              caught and re-raised as 'EpubException' by 'ebooklib', it is more
              practical and safer to simply catch all exceptions.

            - Truncate output of stand-alone metadata extraction.

            - Refactor 'ColumnFormatter' unit tests.

            - Remove redundant method 'DataBundle._maps_field()'.
              Merges parts of '_maps_field()' into 'field_mapping_weight()'.

            - Rename function 'maps_field()'.
              Renames function 'maps_field()' to 'datadict_maps_field()'.

            - Rename 'DataBundle.maps_field()'.
              Adds underline prefix to method 'maps_field'.

            - Renames for readability in the regression runner.

            - Modify 'get_one_from_many_generic_values()'.
              Adds handling 'publisher' to incomplete function.

            - Return value instead of both setting and returning.

            - Use 'calculate_authors_similarity()'.
              Adds using 'calculate_authors_similarity()' in 'ISBNMetadata'.

            - Simplify incrementing integer.

            - Use 'exceptions.ignored()' in '_Boolean.coerce()'.

            - Simplify '_ExifToolTimeDate.coerce()'.

            - Minor rewrite of '_Boolean.coerce()'.

            - Remove unused 'debug_stats' in 'master_provider.py'.

            - Remove 'normalize()' method from all type coercer classes.
              Removes method 'normalize()' from coercers. Rework path normalization.

              Even though all coercer classes implemented this method, very few of
              them actually did anything useful.  Most implemented something arbitrary
              simply to conform to the signature of the 'BaseCoercer' base class.

              Only 'AW_PATH.normalize()' and possibly 'AW_PATHCOMPONENT.normalize()'
              is actually currently being used.
              The functionality of these have been reworked into two new functions
              'coerce_to_normalized_path()' and 'coerce_to_normalized_pathcomponent()'
              respectively.

            - Minor adjustment to regression runner output.

            - Various fixes and minor refactoring.
              Removes incomplete and unused functions and adds various minor fixes.

            - Use 'exceptions.ignored()' context handler.

            - Minor cleanup in the regression test runner.
              Moves 'RunResultsHistory' to 'regression/utils.py'.

            - Rewrite ISO-like date/time regex in verbose form.

            - Clean up 'test_core_config_config_parser.py'.

            - Clean up functions 'nested_dict_{set,get}()'.
              Rework and clean up utility functions for modifying dictionaries.

              Moves 'nested_dict_get()' and 'nested_dict_set()' from 'util/misc.py'
              to what has become the single places where they are actually used.

              This isolates the mess and reduces needless indirection.
              Also cleans up the interface to be less "generic", instead expect
              these to only be used "internally".

              Adds various fixes to a lot of unit tests.

            - Remove old "dummy" data used by unit tests.
              Removes old and likely incorrect "mock" test utility functions.

            - Modify TODO-note on ISBN de-duplication.

            - Mark skipped unit tests as expected failures.

            - Use 'process.blocking_read_stdout()' in extractors.
              Removes duplicated code in extractors by using utility function.

            - Minor improvement to deletion of temporary file.

            - Modify and comment 'ConfigFieldParser.validate()'.

            - Remove 'RepositoryPool'.
              Removes 'RepositoryPool' and modifies repository (de-)initialization.

              The original intent was to always keep one 'Repository' instance linked
              to one running instance, represented as an instance of the 'Autonameow'
              class.

              This worked in some respects, but the manner in which the module-level
              attribute 'SessionRepository' was accessed, this extra complexity
              actually provided no real benefits as the access did not take either
              multiple parallell repositories or autonameow instances into account.

              The 'SessionRepository' is now a simple global that is instantiated,
              "initialized" and finally "de-initialized" through the 'on_startup'
              and 'on_shutdown' event handlers, respectively.

              Note that this always makes the 'autonameow_instance' passed to the
              event handlers completely pointless apart from the debug logging.

            - Consolidate access to active, global configuration.
              Reworks how the currently active configuration instance is accessed.

              Removes accessing through the module constant 'ActiveConfig'.
              Adds using only the event dispatcher to pass the configuration
              instance through the 'on_config_changed' event handler whenever
              the configuration is changed.

              Completes TODO-list item [TD0188].

            - Move 'extractors/common.py' contents to new file.
              Moves 'extractors/common.py' to 'extractors/metadata/base.py'.

              This file is now only relevant to metadata extractors and *NOT*
              common to all types of extractors.

            - Move 'ExtractorError' class and modify imports.
              Moves the 'ExtractorError' class to 'extractors/__init__.py'.

              Removes importing the 'BaseMetadataExtractor' into the 'extractors'
              module to avoid circular imports after having moved 'ExtractorError'.

              This is all to simplify splitting up the 'extractors/common.py' and
              moving everything specific to metadata extractors into a new file,
              potentially called something like 'extractors/metadata/base.py'.

            - Hack fix 'PandocMetadataExtractor' filtering.
              Adds hack fix of too much being removed in the "raw data filter".

            - Remove completed ("orphaned") TODO [TD0091].

            - Remove line feeds from all extracted text.
              Removes line feeds from all text returned by text extractors.

              Some PDF documents created in MS PowerPoint contain seemingly
              useless line feeds in the middle of text lines and also as per
              usual, at the end of line along with a newline.

            - Simplify 'normalize_horizontal_whitespace()'.
              Simplifies 'normalize_horizontal_whitespace()' invariants.

              Expect only Unicode strings, do not return "falsy" values as-is.

            - Rename 'normalize_whitespace' to 'normalize_horizontal_whitespace'.

            - Rename path variables in 'devscripts/*.sh'.

            - Rename path variables in stand-alone wrapper scripts.

            - Rename 'SELF_DIRNAME' to 'SELF_DIRPATH' in test runners.

            - Rework the 'PandocMetadataExtractor'.
              Removes incomplete code and adds an alternative approach to using 'pandoc'.

              Instead of manually trying to list all conceivable variables that could
              be set by pandoc in the template 'extractor_pandoc_template.plain', now
              the template only contains '$meta-json$', which is described as;
              "JSON representation of all of the document's metadata".

              This does not result in the same metadata being returned by the
              'PandocMetadataExtractor'. There are some complications with some metadata,
              like 'datetime' not fitting into the assumptions made about how the metadata
              extractors should work. Specifically, the "field meta" does not provide a
              means of specifying that a metadata item might occur more than once without
              being "multivalued".

              Solves part of [TD0173] on whether to parse pandoc JSON output or the output
              of the custom plain text template. Parsing the JSON output might provide more
              flexibility, but requires parsing the internal pandoc abstract syntax tree..

            - Refactor lower-casing names with "Von" and "Van".

            - Log which rule was used to find a new name.

            - Decrease log level for debug-like messages.

            - Invert logic for testing if metadata is empty.

            - Remove old leftover code. Non-functional changes.

            - Rename all metadata extractor files.
              Adds prefix 'extractor_' to all metadata extractors and unit tests.

              This also required some fixes to maintain the current MeowURI leafs
              and also required renaming the "fieldmeta" YAML files as the paths
              are derived from the extractor module names.

            - Remove deleted file from 'MANIFEST.in'.
              Removes file deleted in commit 3bb810cc8084a6d3743bdb1b62d5502e139

            - Make sure cache is populated when testing runtime.

            - Disable text extractor caches in unit tests.

            - Re-use text extractor instances.
              Adds "pooling" instances of text extractors.

              Instantiate each extractor only once and then re-use the instances.
              Prevents needlessly re-creating caches and in turn also setting up
              the underlying persistence mechanism used by the caches.

              This restores the earlier behaviour when text extractors were
              started from the 'ExtractorRunner' in 'extraction.py'.

            - Move 'log_runtime' context out of try/except block.

            - Blacklist metadata in 'ExiftoolMetadataExtractor'.
            - Simplify pairing list of names in 'humannames.py'.

            - Rename local method variable.

            - Minor fixes. Remove outdated comments.

            - Use 'https' URLs in '.gitmodules'.
              Avoids unnecessarily failing when SSH credentials are missing/bad.

            - Fix silently skipping integration test assertions.
              Reworks existing integration tests for less duplication.

              Also modifies how bad "preconditions" are handled.
              If a precondition such as a sample file existing was not met,
              functions that contained several assertions returned 127.
              This was never handled by anyone else, so assertions following
              a failed precondition check was silently skipped.

              Now the precondition test is embedded within the assertion, such
              that failing preconditions also fails the dependent assertions.

            - Allow rules without condition in the parser.
              Removes raising 'ConfigurationSyntaxError' when conditions is None.

            - Skip regression test '0019_constant_name_two_rules_b'.
              This test needs the regression tests to bypass the rule confirmation.

              The regression runner must be able to override the user confirmation
              prompt in order to evaluate this case.
              I.E. mock/patch the function 'interactive.ask_confirm_use_rule()' to
              always return a positive response.

            - Modify to the regression runner output format.
              Adds various changes to the regression runner output format.

              Show more history results symbols in verbose mode.
              Fixes to make the output more consistent when tests are skipped.
              Color the "starting" text line of each suite to stand out more.

            - Prioritize rules also by number of data sources.
              Adds number of specified data sources in rules to prioritization.

              Rules without data sources might assumingly be less interesting
              and more "general".  This assumption might not hold. Either way,
              this makes the results deterministic when values used by the
              preceding sorting criteria are equal.

            - Factor out function 'collapse_all_whitespace()'.

            - Move assertions. Remove redundant if-statement.

            - Handle uncaught exceptions when renaming files.
              Adds handling of uncaught exceptions raised when renaming files.

              Pretty amazing that this has gone unnoticed for so long ..
              Remember to add tests for this as soon as possible!

            - Use '>|' to disregard 'noclobber'.
              Replaces temporarily modifying 'noclobber' with '>|' redirection.

            - Handle special cases in 'split_multiple_names()'.

            - Remove control characters from extracted text.

            - Add 'remove_ascii_control_characters()'.
              Adds text utility function 'remove_ascii_control_characters()'.

              Removes "generally undesirable" ASCII control characters from strings.

            - Handle special case in 'split_multiple_names()'.
              Adds handling both ';' and ',' separators in string of names.

            - Catch 'KeyError' raised by 'ebooklib'.
              Handles 'KeyError' raised by 'ebooklib'. Probably bug in 'ebooklib'.

            - Modify 'exiftool' field mapping weights.

            - Remove unused, incomplete file name substring handling.
              Removes incomplete and unused classes in 'analyze_filename.py'.

              Removes classes 'SubstringFinder', 'FilenamePreprocessor',
              'FilenameTokenizer' and related unit tests.

            - Modify 'vulture' settings. Add threshold.

            - Ignore case in 'calculate_authors_similarity()'.

            - Skip failing unit test on MacOS and Windows WSL.

            - Modify 'deduplicate_isbns()'.
              Adds converting ISBN-10 numbers to ISBN-13.

              This gives much better de-duplication but is horribly
              non-obvious and should be cleaned up to not violate the
              "principle of least astonishment" ..

            - Various hack changes to ISBN metadata comparison.
              Adjustments, minor clean up and adds additional unit tests.

            - Rework finding most probable ISBN metadata.
              Reworks finding probable ISBN metadata by comparing titles.

              Adds hack fix for handling query response values being lists,
              which is very likely since the changes to how "generic" URIs
              and URIs with "aliased" leaves are resolved and always return
              lists, even if it is a single item.

            - Clean up Unicode replacements and unit tests.

            - Iterate revisions in reverse.
              This makes a lot more sense when tracking down regressions.

              Some error has probably been introduced recently, and the goal is
              to find what commit introduced the regression. Because the script
              stops whenever the executed command returns non-zero; going from
              most recent, backwards will cause it to halt at once.

            - Remove unused function '_colorize_replacement()'.

            - Clean up 'test_util_text_patternmatching.py'.
              Adds additional tests. Refactor existing tests.

            - Improve cleanup and normalization of titles.
              Adds stripping "junk" trailing characters from titles.
              Add additional unit tests.

            - Improve results of 'find_publisher()'.
              Adds also searching the "canonical" forms of publishers.

              The 'FilenameAnalyzer' uses this "old" method of using
              "known good" field values specified in the user configuration
              to find publishers in unstructured text.

              This should be replaced with something related to the newer
              systems related to 'autonameow/core/metadata/canonicalize.py'.
              Something new probably needs to be added to separate the fuzzy
              searching patterns from the canonical replacement patterns as
              they likely will have to be different for optimal results.

            - Wrap 'is_executable()' with 'lru_cache' decorator.

            - Decorate 'git_commit_hash()' with 'lru_cache'.
              Wraps 'git_commit_hash()' with the 'lru_cache' decorator.

              This should work even if a running autonameow process is left
              running for a long time and the currently checked out code changes.
              The running code should not be reloaded from disk, so the only
              thing that cause confusion is if files other than Python sources;
              such as yaml configuration files, etc., are changed during runtime.

            - Modify 'get_one_from_many_generic_values()'.
              Adds handling 'date_created' to incomplete function.

            - Rework de-duplication hack in the resolver.
              Removes check if URI is "generic" prior to special handling.

              Do de-deduplication hacks any time there are multiple possible URIs
              to choose from. This will (probably always (?)) only happen (!) when
              the URI is either "generic" like 'generic.metadata.author', or when
              it has an "aliased" leaf, like 'extractor.metadata.exiftool.author'.

            - Clean up 'split_basename()' and unit tests.
              Various minor fixes. Add additional "compounded" extensions.

            - Canonicalize 'ISBNMetadata' publishers.
              Do string replacement canonicalization of ISBN metadata publishers.

            - Remove unnecessary 'fileobject' arguments.
              Removes unnecessarily passing files to MeowURI mapping routines.

              This is not at all related to the URIs and has probably been left
              behind and forgotten since some previous implementation.

            - Factor out mapping "generic" URIs to new class.
              Moves mapping "generic" URIs to a new class 'GenericMeowUriMapper'.

              Decent improvement of the mess that is the 'Repository' class ..

            - Rename 'MeowURIMapper' to 'MeowUriLeafMapper'.

            - Use dependency injection in 'ProviderRunner'.
              Provide 'ProviderRunner' dependencies through the constructor.

            - Remove unused and incomplete fields and records.
              Removes unused and incomplete 'fields.py', 'record.py' and tests.

            - Reverse order of revisions checked out.
              Reverses order of revisions in 'run_command_on_git_revs.sh'.

              Revisions are now checked out in order starting with 'HASH_NEWEST'
              ($1) and going backwards through older revisions up until and
              including 'HASH_OLDEST' ($2).

            - Remove 'remove_blacklisted_lines()' from extractors.
              Removes text extractor unused functionality for filtering text lines.

              Refer to related commit 167736b59a255e2ccbe7e7d8961a3c728768fad6

            - Remove function 'remove_blacklisted_re_lines()'.
              Removes now unused function 'remove_blacklisted_re_lines()'.

              This function was made available to all subclasses of
              'AbstractTextExtractor' but was only used by the
              'PdftotextTextExtractor' to filter out errors.  This is no longer
              necessary after adding the '-q' flag to the call to 'pdftotext'.

              Instead of leaving yet another unused piece of functionality be,
              any future references to this should look into using equivalent
              functionality from 'util/text/filter.py' instead.

            - Remove redeclared unit test method.

            - Use 'pdftotext' option '-q'.
              Adds the '-q' flag to the 'pdftotext' call to suppress any errors.

            - Clean up unit tests.

            - Fix duplicated unit in regression runner summary.
              Removes duplicate runtime time unit in regression runner summary.

            - Swap position of oldest and newest hash parameters.


            Fixes
            - Handle failed import of 'magic' in 'mimemagic.py'.
              Catches 'TypeError' that can be raised by 'magic.py'.

              Traceback from Windows 10 without magic DLLS, etc;

                  Error
                  Traceback (most recent call last):
                    File "C:\Users\josg\PycharmProjects\autonameow\autonameow\util\mimemagic.py", line 77, in _build_magic
                      import magic
                    File "C:\Users\josg\PycharmProjects\autonameow\venv\lib\site-packages\magic.py", line 23, in <module>
                      _libraries['magic'] = _init()
                    File "C:\Users\josg\PycharmProjects\autonameow\venv\lib\site-packages\magic.py", line 20, in _init
                      return ctypes.cdll.LoadLibrary(find_library('magic'))
                    File "C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64\lib\ctypes\__init__.py", line 426, in LoadLibrary
                      return self._dlltype(name)
                    File "C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64\lib\ctypes\__init__.py", line 348, in __init__
                      self._handle = _dlopen(self._name, mode)
                  TypeError: LoadLibrary() argument 1 must be str, not None

              Adds ID to "Very Low Priority" TODO-item.

            - Fix variable not named properly.
              Renames variable to match case-specific config section.

              Should have been part of commit 6a2a10dfa9812645c9afaa48cab8119c1a

            - Fix crashing when sending EOF to prompts.
              Adds handling EOF (ctrl-d) in interactive prompts.

            - Various fixes to the 'StringValueCanonicalizer'.
              Fixes set of canonical values re-built for every comparison.

              Build and store the set of all canonical values once at instantiation.
              Includes various additional fixes and clean up.

            - Minor fixes in the 'ColumnFormatter' class.
              Renames and minor rewrites for readability.

            - Fix crashing when reading some epub files.
              Fixes crashing when extracting text with 'ebooklib'.

            - Fixes and refactoring of 'test_core_view_cli_common.py'.

            - Fix incorrect docstrings.

            - Minor fixes in name template field methods.
              Fixes inconsistent accessing and use of DataBundle attributes.

            - Various fixes in 'regression_runner.py'.

            - Fix bad unit tests.

            - Various fixes to naming and comments.
              Fixes comments and naming related to persistence and caching.

            - Various fixes to human name parsing.
              Refactor existing and add handling additional special cases.

            - Various fixes to 'try_parse_date()'.
              Adds various fixes to 'try_parse_date()' and "Date" coercers.

            - Various fixes to 'try_parse_datetime()'.
              Adds various fixes to 'try_parse_datetime()' and "TimeDate" coercers.

            - Fix skipping some templates without placeholders.
              Fixes a bug in the horrible code in 'context.py'.

              If there are no data sources available but the name template does not
              include any placeholder fields, the name template can simply be used
              as-is, without having to modify it further.

              This was only checked for the first evaluated rule, which meant that
              when additional rules are tried ("automagic mode") only the first rule
              was properly handled.  When any following rules were tried, they were
              skipped because the data sources was wrongly assumed required and also
              not specified in that rule.

              Also adds regression tests that would have triggered this bug.

            - Fix verbose regression test output formatting.
              Fixes formatting of the verbose regression test runner output.

              Adds fixes to normalization of test suite descriptions, as well
              as various minor refactorings of the 'TerminalReporter' class.

            - Various (WIP) fixes to 'substring.py' and tests.
              Fixes the 'main_separator()' function and related code. Cleans up tests.

            - Fix regression in replacement of Unicode hyphens.
              Fixes bug introduced in eeaf4866a123970f23f0ad6db7ee0e0c36878a35

              This commit added replacing Unicode '\u00AD' with '-', which also
              caused unintentional replacements of 'ö' characters.

              This is now fixed by using the Python escape '\xad' in place of
              '\u00AD' for "soft hyphens".

            - Fix crash due to unexpected sections in yaml.
              Fixes crashing when reading a canonical replacement YAML config.

              Adds skipping invalid "sections" which are currently expected to be
              a dictionary containing 'match_any_regex' or 'match_any_literal'.

            - Fix failed assertion in resolver.
              Fixes triggering assertion error in the resolver.

              This happened when the response contained multiple entries but the
              URI was not "generic", which could not happen previously when the
              "leaf aliases" was still not implemented.

              Now however, a URI with a "generic" leaf could expand to multiple
              explicit URIs and return multiple results, which was not handle by
              the mess of if-else-statements in the resolver.

              This is now "fixed" by aborting when this happens ..

                  NOTE: This should really be fixed properly!
                        See TODO-list item [TD0112]

            - Fix inconsistent behaviour of MeowURI mappers.
              Makes both mappers return empty sets when nothing is mapped.

            - Minor non-functional fixes in the 'Repository'.

            - Various fixes and clean up of 'MeowUriLeafMapper'.
              Renames, reworked arguments and other minor fixes.

            - Fix 'MeowURIMapper' not storing all explicit URIs.
              Fixes bug that led to only storing the most recently mapped URI.

              The mapping of a "generic" (or "aliased") URI leaf is not symmetrical,
              there will almost always be more than one full "explicit" URI mapped
              to one URI with a "generic" leaf.

              These are now stored in a set and the value returned by calling
              'fetch()' will always be a set, even if it only contains a single
              element. This should be sorted out somewhere else (repository) ..

            - Fix repeated provider delegation bug.
              Fixes repeated delegation of providers when running all providers.

              The 'ProviderRunner' checks if a provider has already been delegated
              and skips the provider to prevent unnecessarily running extractors or
              analyzers more than once times and subsequently storing duplicate data.

              This check did not account for calls to the runner to delegate to all
              possible providers through 'delegate_every_possible_meowuri()', which
              triggered an assertion;

                  AssertionError: Would have clobbered value for URI
                  extractor.metadata.exiftool.File:FileSize

              This is now fixed by keeping track of the files that are passed to
              'delegate_every_possible_meowuri()' and skipping any delegations with
              those files.

            - Fix 'exiftool' process left running by unit test.

            - Fix bug in name template field 'type_compatible()'.
              Fixes crashing caused by bad validation in 'type_compatible()'.

              The bad check assumed that coercer classes would be wrapped in
              'MultipleTypes' instances if "multivalued" when in fact this
              never happened.

              This commit fixes this by explicitly passing in the 'multivalued'
              boolean from the 'DataBundle' to the 'type_compatible()' method.


2018-05-02  [autonameow v0.5.7]
            Primarily architectural and performance improvements.
            Adds a event dispatch system to handle initialization, shutdown
            and other application-wide event signaling and data passing.
            Improved text parsing, filtering and searching.
            Removed dead code and other miscellaneous cleanups.

            Additions
            - Add a new file 'event.py' with a event/messaging system.

              Uses classes 'EventHandler' and 'EventDispatcher'.  Both act as simple
              container for callables and instances of 'EventHandler', respectively.

            - Use event system to control provider registry.
              Adds controlling provider registry init/exit with the event dispatcher.

            - Register to event dispatcher from the repository.
              Moves registering repository init/exit functions from the "source".

              Makes little sense to keep this in the main 'Autonameow' class.
              The whole point is to decouple components by using the 'EventDispatcher'
              as a common shared "message broker".

            - Use event system to control repository init/exit.
              Adds using the event dispatcher to control the repository.

              This currently does not provide any real benefits over simply
              calling the functions directly. But I'm pretty sure the added
              complexity and indirection will pay off when more systems are
              modified to use the event system.

            - Continue integrating the 'EventDispatcher'.
              Replaces direct calls with using the event dispatch system.

            - Adds integration test that checks for the previous style of imports.

            - Add 'devscripts/functions-rarely-called.sh'.
              Adds simple script for listing rarely called functions/methods.

            - Add unit test utility 'random_ascii_string()'.
              Adds function that produces random N character strings.

            - Add top-level catching of 'KeyboardInterrupt'.
              Catches user-generated interrupts around top-level 'run()' call.
              This might not solve this problem in a sound way or even at all..
              All handling of exceptions and signals should be looked at properly
              and implemented so that any and all shutdown/cleanup is handled
              before exiting.

            - Add regular expression caching 'regexcache.py'.
              Adds a new source file with a singleton class for regex caching.

              Intended to replace compiling module-global regular expressions
              when loading source files with compiling once at first use and
              then re-use the same cached compiled regular expression objects.

            - Add (WIP) regression test suite history.
              Adds a first implementation of regression test history.

              A new column is added to the regression runner output.
              This displays the results of the previous five runs for each
              "test suite". I.E. whether it failed, passed or skipped.

              NOTE: Very messy and ineffective and must be cleaned up!

            - Add (WIP) changes to 'EpubMetadataExtractor'.
              Adds incomplete additions to 'EpubMetadataExtractor'.

              References [TD0186] on re-implementing the epub metadata extraction.

            - Add (WIP) field value canonicalization.
              References TODO-list item [TD0189].

            - Add handling human names with 'von'.

            - Add MIME-type to extension mappings.
            - Add MIME-type extension mapping for 'dmg' files.
            - Add MIME-mapping for possibly corrupt 'mp4'.
            - Add probable extensions for Telegram theme files.
            - Add extension mappings for MIME-type 'x-java'.
            - Add MIME-type mapping. Add resolving candidates.

            - Add unit tests for "opendocument" MIME-types.

            - Add 'strip_foreword_by()' to 'humannames.py'.

            - Add 'run_command_on_git_revs.sh' to version control.

            - Add 'normalize_letter_case()' to 'humannames.py'.

            - Add integration test utility functions and tests.

            - Add 'setup.cfg' with 'pytest' options.

            - Add MS Office metadata to 'exiftool_fieldmeta.yaml'.

            - Implement '{Metadata,Text}ExtractionResult.__repr__()'.

            - Implement 'DataBundle.__{eq,hash}__()'.

            - Add fields to 'exiftool_fieldmeta.yaml'.

            - Add method for finding "probable" ISBN metadata.
              Adds a first attempt at finding most probable ISBN metadata.

              This is very hacky and mostly a proof of concept that should
              be handled by some separate system.
              This will most likely work with the yet unimplemented concept
              of "records" storing collection of "fields".

              Selection of a "reference" field to use for determining the
              "probability" of a (ISBN metadata) record must be more flexible.

            - Add constant 'BLACKLISTED_HUMAN_NAMES'.

            - Add utility function 'strip_repeating_periods()'.

            - Add function 'strip_single_space_lines()'.
              Adds utility text transformation function 'strip_single_space_lines()'.

              Like 'str.strip()' limited to lines that only contain a single space.
              Returns the given text with any lines containing only a single space
              replaced by an empty line.

            - Add type assertions. Rename unit test.

            - Add checking that master provider is not None.

            - Add filesystem providers to the 'ExtractorRegistry'.

            - Add option '--skip-hypothesis' to unit test runner.
              Adds option '--skip-hypothesis' to the "alternative" unit test runner.

            - Add 'CrossPlatformFileSystemExtractor' unit tests.
              Adds unit tests that verify the 'FileObject' property map.

              Also includes various other minor changes in naming to match other
              extractors.

            - Add blacklisted lines in the 'DocumentAnalyzer'.

            - Add function 'msg_columnate()'.
              Adds function for displaying columnated strings.

              Intended to prevent direct use of the 'ColumnFormatter' class.

            - Add new 'msg()' style 'highlight'.

            - Add underline prefix to 'get_extractor_classes()'.

            - Add sketch on possible architectural changes.

            - Add new file 'util/debug.py'.
              Adds new file with function 'print_callstack_names()'.

              Decorator that prints the call stack leading up to the
              decorated functions, going back max 'stack_size' items.

              Modified version of  https://stackoverflow.com/a/31796710

            - Add field to exiftool field meta information.

            - Add notes on "records" and "fields".

            - Add functions to coercing and removing non-break..
              Adds functions to handle both str coercion and non-breaking spaces.

            - Add 'report_runtime()' string formatting flag.

            - Add hack filtering of titles in 'DocumentAnalyzer'.

            - Add 'RegexLineFilter' class and 'ignore_case' arg.
              Adds a 'RegexFilter' subclass for filtering multi-line strings.

              Also adds a optional argument 'ignore_case' that is passed to
              're.compile()' when compiling the regexes passed to the filter
              class init.

            - Implement option '--postprocess-only'.
              Adds initial implementation of '--postprocess-only'.

              Pass option argument '--postprocess-only' to enable POST-PROCESSING ONLY
              Do not construct new file names, only do post-processing on the current
              file name using global post-processing settings.

            - Add regression tests for rules without placeholders.

            - Add 'name_template.py'. Move function.
              Adds a (WIP) 'NameTemplate' class in new file 'name_template.py'.

              Moves function 'format_string_placeholders()' from
              'namebuilder/fields.py' to 'model/name_template.py'.

              References TODO [TD0180].

            - Add new class 'RegexFilter'.
              Adds class for filtering text with multiple regular expressions.

              Example usage:

                  >>> fa = RegexFilter(r'[fF]oo')
                  >>> fa('bar')
                  'bar'
                  >>> fa('Foo')
                  >>> fa(['foo', 'bar', 'Foo'])
                  ['bar']
                  >>> fb = RegexFilter([r'[fF]oo', '.*'])
                  >>> fb('bar')
                  >>> fb(['Foo', 'bar'])
                  []

            - Add unit tests for stand-alone extraction.

            - Add 'requirements.txt'. Fix 'magic' module info.

            - Add 'providers.shutdown()'.
              Adds function for removing the global 'ProviderRegistry' at exit.

            - Add new integration test suite.
              Adds a new "Dependencies" integration test suite.

              Contains parts of the "Test Suite" test suite as well as pretty
              terrible testing that required Python modules are available to the
              system Python 3 interpreter.This really does not work with package
              managers, etc.  but will have to do for now.

            - Add method 'Autonameow._dump_options()'.

            - Add 'MasterDataProvider.request_one()'.
              Adds method for requesting exactly one result.

              Just like 'request()' but returns a failed query response if
              the request would return a list of results.

              References TODO-list item [TD0175].

            - Add function 'find_and_extract_edition()'.
              Adds function for extracting "editions" substrings from strings.

              Extracts any "edition-like" substrings from a string.

              Searches the given text for any "edition-like" substrings and
              returns a tuple with the match as an integer and the given string
              *without* the match.

              Example:

                edition, modified_string = find_and_extract_edition('foo 1st bar')
                assert edition == 1
                assert modified_string == 'foo  bar'

              Returns any found edition and modified text as a (int, str) tuple.

              References TODO-list item [TD0118].

            - Add filtering lines in the 'DocumentAnalyzer'.

            - Add 'TextChunker' class.
              Adds a new 'TextChunker' class that splits text into even chunks.

              Splits multi-line text into smaller chunks.

              Example usage:

                  chunker = _get_text_chunker('A\nB\nC\nD\nE\n', 0.5)
                  assert chunker[0] == 'A\nB\n'
                  assert chunker[1] == 'C\n'
                  assert chunker[2] == 'D\nE\n'
                  assert chunker.leading == 'A\nB\n'
                  assert chunker.trailing == 'D\nE\n'
                  assert len(chunker) == 3

              The chunk sizes (number of text lines in each chunk) is calculated from
              the chunk to text ratio as CHUNK_SIZE = LINES_IN_TEXT * CHUNK_RATIO

              The number of lines in the first and last chunks should match the chunk
              size exactly, while the number of lines in the center chunks might vary
              a bit so that the total number of chunks is more predictable.

              References TODO-list item [TD0134].

            - Add regular expression filtering in text extractors.
              Adds filtering lines matching regular expressions in text extractors.

              Similar to 'BLACKLISTED_TEXTLINES' but using compiled regular
              expressions instead of exact string comparison.

              Currently only used by the 'PdftotextTextExtractor' to remove
              warnings and errors produced by 'pdftotext'.

            - Add text utility function 'normalize_whitespace()'.
              Adds function for normalizing all whitespace.

              Similar to 'collapse_whitespace()' but replaces all whitespace
              expect line-separators with a single space.

            - Add function 'remove_blacklisted_re_lines()'.
              Adds text utility function 'remove_blacklisted_re_lines()'.

              Like 'remove_blacklisted_lines()' but takes a list of compiled
              regular expressions instead of a list of strings to match against
              the lines in the given text.

            - Add new option flag '--postprocess-only'.

            Changes
            - Add lazy importing of 'guessit'.
              Fixes very slow import of the 'guessit' module.

              Profiling revealed that importing the 'guessit' module is one of the
              very slowest operations performed for any set of inputs and options.

              This commit adds lazily importing the 'guessit' just before it is
              used instead of importing when loading the extractor source file
              'autonameow/extractors/filesystem/guessit.py'.

            - Add constant 'logs.DEBUG'.
              Replaces '__debug__' with 'logs.DEBUG' to silence PyCharm warnings..

            - Rename 'filetype()' to 'file_mimetype()'.

            - Rewrite all import statements.
              Rewrites all import statements to not use groups.

              Grouping imports results in additional noise in diffs when
              adding a import to an existing group.That is, going from this;

                  from foo import bar

              To this, after adding 'baz';

                  from foo import (
                      bar,
                      baz
                  )

              .. adds noise to diffs by changing unrelated lines to add the
              parenthesis.
              This commit modifies all imports to use a full explicit form
              with each import on a separate line. This will reduce future
              noise in diffs by only changing the affected lines.

            - Rename 'master_provider' arguments.
              Renames arguments 'master_provider' to not shadow module name.

              Makes it easier to spot differences between references to the module
              and arguments and/or instance member attributes, especially important
              considering that the module itself is the value being passed around..

            - Remove "fine-grained" delegation memory.
              Removes duplicated remembering of delegation in the 'ProviderRunner'.

              Remember delegations based only on combinations of fileobjects and
              providers.

            - Rework string value canonicalization.
              Various rework related to the 'StringValueCanonicalizer'.

              Modifies the format of the config yaml file.
              Patterns are now either literal strings or regular expressions.

              Example yaml config section:

                  CanonicalValue:
                      match_any_regex:
                      - regex pattern 1
                      - regex pattern 2
                      match_any_literal:
                      - string pattern 1
                      - string pattern 2

              Any value that matches either 'CanonicalValue', any of the
              regular expressions or any of the literal strings is replaced
              with 'CanonicalValue'.

              The "parsing" of the regular expressions and literals is moved
              to a separate class 'CanonicalizerConfigParser' so that the
              'StringValueCanonicalizer' class can be passed plain dicts keyed
              by canonical values, storing lists of either literal strings or
              compiled regular expressions.

              This also adds handling of matching multiple regular expressions,
              in which case the canonical value whose regular expression produced
              the longest matched substring is used.

            - Modify format of regression runner history.

            - Call 'logs.deinit_logging()' just before exiting.
              This is mostly to put this function to use instead of removing it.

            - Rework 'StringValueCanonicalizer' to not do I/O.
              Removes loading yaml files from the 'StringValueCanonicalizer'.

              Adds separate "builder" function that handles loading files from disk.
              The 'StringValueCanonicalizer' class now takes a plain dict instead of
              a yaml file basename.

            - Remove unused function 'strip_ansiescape()'.

            - Remove unused function '_year_is_probable()'.

            - Remove unused function 'multiset_count()'.

            - Remove unused function 'unique_identifier()'.

            - Rename arguments shadowing 'string'.

            - Remove unused function 'arg_is_year()'.
              Removes unused argument validator function 'arg_is_year()'.

            - Remove unused function 'available_field_parsers()'.

            - Strip contributor text from author names.
              Adds removing variations of contributor texts from human names.

            - Fix failing assertions. Pad missing entries.
              Removes bad asserts. Pads missing entries to maintain fixed width.

            - Use Unicode characters in regression test history.

            - Log failure to get persistence backend.

            - Rework storing test results in regression runner.
              Adds using the 'RunResults' class to store test results.

              Stores the actual 'RegressionTestSuite' instances instead of
              counts of passed/failed/skipped tests.
              This should make it easier to keep track of and persisting results
              from the last N runs.

            - Rework storing test results in regression runner.
              Adds using the 'TestRunResults' class to store test results.

              Stores the actual 'RegressionTestSuite' instances instead of
              counts of passed/failed/skipped tests.
              This should make it easier to keep track of and persisting results
              from the last N runs.

            - Replaces 'foo = list()' with 'foo = []'.
              Prefer more verbose instantiation of empty lists.

            - Various fixes and clean up in 'dateandtime.py'.
              Removes logging, shadowing 'string'. Fixes argument validation.

            - Modify constant 'YEAR_LOWER_LIMIT'.
              Lower 'YEAR_LOWER_LIMIT' from 1900 to 1455.

              Also minor fixes to 'date_is_probable()'.

            - Remove unused function 'regex_search_str()'.

            - Rename "public" function in 'dateandtime.py'.

            - Remove unused function 'hyphenate_date()'.

            - Remove unused function 'bruteforce_str()'.

            - Consolidate imports from same module.

            - Move 'model/normalize.py' to 'metadata/normalize.py'.
              Moves 'core/model/normalize.py' to 'core/metadata/normalize.py'.

            - Remove known source after gathering data.
              Adds removing source after successfully gathering data in the resolver.

            - Handle 'BrokenPipeError' at 'exiftool' shutdown.
              Adds catching 'BrokenPipeError' in 'ExiftoolMetadataExtractor'.

              This might happen when exiting with CTRL-C and 'pyexiftool'
              attempts to flush 'stdin' that has already closed.

            - Remove unused 'IGNORED_AUTHOR_WORDS'.

            - Use double quotes in 'pandoc_template.plain'.
              Replaces single quotes with double quotes in pandoc template.

              Seems to prevent pandoc errors when fields contain single quotes.
              Not sure whether this works with fields containing double quotes.

            - Modify search patterns for editions.

            - Modify regression test assertion.

            - Skip non-existent files like broken symlinks.

            - Factor out resolving 'DataBundle' dict.

            - Rework 'FilesContext' to handle single files.
              Renames 'FilesContext' to 'FileContext'.

              Modify to work better with how it is actually used, I.E. being passed a
              single file at a time.

            - Remove dead (commented) code.

            - Factor out getting rules from the 'RuleMatcher'.

            - Remove option '--rulematch'.
              Removes redundant, always enabled option '--rulematch'.

            - Rename methods and variables for readability.

            - Debug log 'ISBNMetadata' attribute setters.

            - Increase amount of text to search for ISBN numbers.

            - Handle splitting human names separated by '&'.

            - Make cleaning up titles less aggressive.
              Modifies 'cleanup_full_title()' and 'normalize_full_title()'.

              Moves removing all characters that are not letters or numbers
              from the cleanup function to the normalization function.

            - Modify 'ExiftoolMetadataExtractor' field meta.

            - Modify filtering titles in 'EbookAnalyzer'.
              Removes lacking local 'EbookAnalyzer' filtering.

              This is replaced by 'cleanup_full_title()' from 'normalize.py'.

            - Modify 'DocumentAnalyzer' title extraction.
              Decrease mapping weight and improve filtering.

            - Improve finding e-book ISBNs in text.

            - Normalize letter case of human names.
              Adds normalizing case of names in primary function 'filter_name()'.

              Replaces brute force method of trying to match substrings of
              decreasing length in a loop with getting the length and then
              looking up a suitable format string for that length.

            - Rename unit test namedtuple attributes.

            - Rename 'check_dependencies' to 'dependencies_satisfied'.

            - Use the "regex cache" in 'text/transform.py'.

            - Use the "regex cache" in 'analyze_ebook.py'.

            - Refactor 'RegexCache' unit tests.

            - Move 'BUILTIN_REGEX_TYPE' to unit test constants.

            - Rename 'UNDEFINED_MEOWURI_PART' to 'MEOWURI_UNDEFINED_PART'.

            - Do not fall back to 'unittest' if 'pytest' is missing.
              Require 'pytest' in the unit test runner script 'run_unit_tests.sh'.

              Removes using 'unittest' if 'pytest' is missing.
              Start of reworking the unit tests to use 'pytest' features.

            - Remove duplicate functions. Integrate 'utils.sh'.

            - Remove unused function in 'test_regression.sh'.

            - Remove redundant tests. Use "bulk" assertions.

            - Remove unused bash function 'log_system_info()'.

            - Use the "regex cache" in 'humannames.py'.

            - Handle kindle ebooks with 'ExiftoolMetadataExtractor'.

            - Mock logging and "view" in unit tests.
              Adds mocks to reduce noise in the test runner output.

            - Remove empty string values in 'ExiftoolMetadataExtractor'.
              Adds filtering empty string values before coercion.

              Skip empty or whitespace only strings before coercion to avoid
              raising exceptions when failing coercion to "datetime-types".

            - Modify 'EpubTextExtractor' to catch missed text.

            - Prepend underline to 'Repository.data'.

            - Remove unused 'Repository.log'.

            - Always return data from "generic" queries as lists.

            - Assume that 'Repository' stores unique URIs.
              Starts removing some of the "flexibility" in 'Repository' storage.

              Adds asserting that a fileobject and "explicit" MeowURI should only
              be stored once. Storing it a second time is no longer handled by
              converting the data to a list of data. Instead, it is considered an
              error enforced by assertions.

            - Store references to "generic" data in 'Repository'.
              Reworks the 'Repository' to store references to "generic" data.

              Previous implementation stored all data in duplicates, both under the
              "explicit" full MeowURI as well as under the "generic" MeowURI, if any.

              This commit adds mapping generic URIs to explicit URIs. When storing
              data with 'generic_field' in the "metainfo", the generic field is added
              in a fileobject-specific lookup table.
              When handling a query with a "generic" MeowURI, any corresponding
              "explicit" URIs is retrieved from the lookup table and used to retrieve
              the data.

            - Rename '_master_provider' to '_provider'.
              Renames '_master_provider' to '_provider' for consistency.

            - Move contents and remove 'util/textutils.py'.
              Moves the last function out of 'textutils.py' and removes the module

              Moves 'extract_digits()' to from 'util/textutils.py' to
              'util/text/transform.py' and makes necessary adjustments to callers.

            - Improve variable names in the 'TextChunker' class.

            - Remove unused text utility 'extract_lines()'.

            - Remove unused text utility 'extractlines_do()'.

            - Remove de-duplication of list 'databundle.value'.

            - Remove unused 'Configuration.name_templates'.

            - Remove unused 'special_datetime_ocr_search()'.

            - Make extractor 'shutdown()' optional.
              Removes enforcing extractors to implement a 'shutdown()' method.

              Adds checking that the attribute exists and then asserting that it is
              callable before calling it.
              Extractors that setup any external processes or other resources that
              should be released must implement a 'shutdown()' method.

            - Remove 'if __debug__' conditionals.

            - Update 'Repository' class docstrings.

            - Clear 'Repository' data in the 'shutdown()' method.

            - Use '_' for unused parameters.
              Replaces unused '*args' and '**kwargs' with '*_' and '*__'.

            - Move 'core/coercers.py' to 'util/coercers.py'.

            - Rename 'types.py' to 'coercers.py'.
              Renames source files and classes related to type coercion.

              The module 'core.types' is renamed to 'core.coercers' and the
              base coercer class 'BaseType' has been renamed to 'BaseCoercer'.

            - Do local import of 'ColumnFormatter'.

            - Simplify dict access in 'TemplateFieldDataResolver'.
              Makes 'TemplateFieldDataResolver.data_sources' a 'defaultdict'.

            - Make sure to reset singletons from 'exit_program()'.
              Moves de-initialization to new method 'Autonameow._shutdown()'.

              This should be called whenever the program exits; when the context
              manager calls '__exit__()' and also when calling 'exit_program()'.

            - Handle additional case in 'filter_multiple_names()'.

            - Improve 'find_and_extract_edition()'.
              Adds handling special cases in 'find_and_extract_edition()'.

              Uses increasingly "loose" pattens when matching to avoid some
              false positives.

            - Skip probable-routine for only one ISBN metadata.

            - Small refactor of the 'TemplateFieldDataResolver'.

            - Use function for padding debug log sections.

            - Modify filtering/modifying names in 'humannames.py'.

            - Modify 'FiletagsExtractor.can_handle()'.
              Handle files with a non-empty or not only whitespace filename.

            - Modify wordlist spellchecker script.

            - Skip coercion of missing filetags "timestamps".
              Adds checking if "timestamp" is None to prevent failed coercions.

              Set timestamp to None instead of empty string here so that it can be
              detected and skipped when converting values to the "internal format".
              Coercing None with 'AW_TIMEDATE' raises a 'AWTypeError' exception,
              which would happen for every file that do not have a "timestamp"
              filetags part.

            - Improve pattern-matching edition strings.
              Improves extracting "editions" from strings in 'patternmatching.py'.

              Completes TODO-list item [TD0118].

            - Modify filtering names in 'humannames.py'.

            - Use a single shared 'exiftool' process.
              Modifies extractors to be able to re-use a single external process.

              References TODO-list item [TD0183].
              Still not robust enough to be considered completed.

              This now requires all extractors to implement a 'shutdown()' method
              which is actually only relevant for the 'ExiftoolMetadataExtractor'.
              Other extractors do not keep any such state to "de-initialize".

            - Modify prioritization of candidate rules.

            - Re-use extractor instances in the 'ExtractorRunner'.
              Adds a "pool" of instantiated extractors for re-use.

              This avoids loading extractor caches before running each extractor.
              The extractors (and caches) are now set up once during the lifetime
              of the 'MasterDataProvider', I.E. once per program invocation.

            - Remove 'ExiftoolMetadataExtractor' try/except.
              Removes redundant (hopefully) exception handling.

              Also adds minor fixes to match conventions used in other extractors.

            - Have 'EpubMetadataExtractor' match other extractors.

            - Remove unused 'FiletagsExtractor' instance variables.
              Also minor changes to naming to match other extractors.

            - Modify filtering human names.
              Filter out 'edited by' from the start of a name.

              Uses 'filter_name()' to handle a single name, which is called
              by 'filter_multiple_names()' when handling multiple names.

            - Filter exiftool metadata values for any tags.
              Adds filtering exiftool metadata values for any tags.

            - Pass a 'ui' (view) to the 'RuleMatcher'.
              References TODO [TD0171] on separating logic from UI.

            - Pass reference to 'master_provider' to resolver.
              References TODO [TD0185] on the high-level data provider interface.

            - Remove function 'get_providers_for_meowuri()'.
              Removes getter-function, accesses are now from within the module.

            - Remove empty skeleton 'core/filter.py'.

            - Modify package versions to work on MacOS.
              Removes versions for 'pillow' and 'pytz'.

            - Minor refactoring of the 'ProviderMixin' class.

            - Move all provider handling to 'master_provider.py'.
              Moves the 'ProviderRegistry' class and related functionality.

              This arguably makes more sense and allows further refactoring
              of the high-level interaction between the master data provider,
              provider/extractor/analyzer runners and registries.

            - Rename 'extract.{py,sh}' to 'meowxtract.{py,sh}'.
              Renames the stand-alone extractor runner.

            - Update [TD0183] with exiftool runtime measurements.

            - Handle None values. Modify 'FiletagsExtractor'.
              Use empty strings instead of None for missing file name parts.

            - Inherit from the 'ProviderMixin'.
              Makes 'BaseAnalyzer' and 'BaseExtractor' subclass 'ProviderMixin'.

              Compared to the previous patching of a single method, this allows
              refactoring the 'ProviderMixin' class by adding separate method,
              which would have been inaccessible with the old way of connecting
              up the provider base classes with the common mixin.

            - Modify coercing provider result values.
              Adds skipping values with unknown (None) 'multivalued'.

              Instead of implicitly defaulting to 'multivalued' being False when
              unspecified/malformed/None, skip the coercion of the value.
              This means that the value will not be included in the final results
              stored in the repository.
              A lot of problems are related to the confusion around whether values
              are lists of single values; a single value which *IS* a list and there
              consists of multiple values, or multiple values that each contain
              multiple values.
              Makes sense to remove as much ambiguity as possible until this is less
              of a total mess ..

              Also other minor fixes.

            - Modify 'check-spelling.sh'. Use external wordlist.
              Add 'check-spelling.sh' to the "Source Code" integration tests.

            - Rename 'WeightedMapping' 'probability' to 'weight'.
              Renames namedtuple 'WeightedMapping' member 'probability' to 'weight'.

            - Show excluded providers with '--dump-meowuris'.
              Adds listing excluded providers with '--dump-meowuris --debug'.

              Shows which providers were excluded due to unmet dependencies.

            - Minor fixes in unit test utilities.
              Move imports to local scope when possible and other minor changes.

              Removes unused function 'load_repository_dump()'.

            - Rework config parsing and rule class validation.
              Moves validation of rule and rule condition data to config parser.

              This is still very messy but this arguably improves it somewhat.

            - Simplify 'Rule' and 'RuleCondition' validation.
              Simplifies validation of data used to construct rule classes.

              Moves validation out of them classes to constructing functions.
              Also other various minor fixes and cleanups.

            - Remove unused 'referenced_meowuris'.
              Removes keeping track of MeowURIs referenced by rule conditions.

              Left behind from commit b9b9063c9069e0eb204604b4bc68131ef939a1b0
              This is now handled dynamically by the 'MasterDataProvider'.

            - Minor refactoring and cleanup in 'builder.py'.
              Remove duplicated error logs and exceptions. Add notes/TODOs.

            - Minor 'CrossPlatformFileSystemExtractor' refactor.
              Rewrites fileobject property accesses for less duplication.

            - Modify "special case" date/time pattern matching.
              Adds another variation and simplifies the matching.

            - Modify interaction of "timid mode" and "batch mode".
              Allows combining the "timid" and "batch" mode options.

              This allows running non-interactively while still controlling
              whether each individual file is actually renamed or not.

            - Move config I/O functions to a separate file.
              Moves functions for writing/loading configuration files.

              Functionality for reading and writing configuration files and default
              configuration file paths is moved from 'core/config/__init__.py' to a
              new file 'core/persistence/config.py'.

              Also various minor renaming and cleanups where these functions are
              accessed. Replaces really bad unit test dependencies with mocking.

            - Move 'FilenamePostprocessor' to outer scope.
              Moves the 'FilenamePostprocessor' from the name builder.

              This was the fastest way to bypass the 'TemplateFieldDataResolver'
              when the name template of the used rule does not contain any
              placeholder fields.

              Adds new regression test suites with a single rule with a "static"
              name template, I.E. no placeholder fields and also no data sources.

            - Start using the 'NameTemplate' class.
              Integrates the new 'NameTemplate' class.

              Name templates should be instances of this class from now on.
              Also does some minor modifications to the name builder functions.

              Completes TODO-list item [TD0180].

            - Modify the 'Rule' class and rule validation.
              Moves validation out of the 'Rule' class. Cleans up tests.

              This simplifies testing the 'Rule' class a lot and is just plain
              better with overall less messy code.

              Modifies rule comparison and hashing to ignore the descriptions.

            - Minor refactoring regression rename assertions.

            - Refactor the regression runner and utilities.
              Replace ad-hoc dicts with a new class 'RegressionTestSuite'.

              Various minor fixes such as renames. One regression "test" is now
              called a "suite", as it contains multiple assertions that each
              constitute individual tests.

            - Remove 'msg()' function argument 'add_info_log'.

            - Refactor loading options in 'RegressionTestLoader'.
              Cleans up loading of 'options.yaml' files. Adds tests.

            - Refactor the regression test runner.
              Moves all printing of results to the 'TerminalReporter'.

              Replaces global 'VERBOSE' with passing flags to relevant functions.

            - Move import to local function scope.
              Moves importing a possibly missing module to the using function.

              This module is likely imported from a lot of places.
              The "lazy" import is intended to prevent prematurely importing
              third-party modules that might be missing, like 'prompt_toolkit'.

            - Pass in a user interface to the name builder.
              Adds passing the active 'view' or 'ui' to the name builder functions.

              References [TD0171] on separating the views from pure logic.

            - Move non-documentation from 'docs' to 'notes'.

            - Use 'DependencyError' exception instead of exiting.
              Adds a new exception class 'DependencyError'.

              Raising 'SystemExit' with a non-zero exit status when a required
              module import raises an 'ImportError' does not work well with the
              regression tests.

              This caused the regression test runner to seemingly mysteriously
              stop and skip any remaining text without providing any information.
              The new exception should probably be caught at the outer-most entry
              points to display a more user-friendly error message, possibly with
              instructions on how to install the missing dependencies, or at the
              very least provide a link to relevant documentation.

            - Revert modified 'pg38145-images.epub_expected.txt'.

            - Modify 'FileObject.__repr__()'. Simplify logging.
              Modifies 'FileObject.__repr__()' to include the partial hash.

              Allows simplifying a lot of logging calls and other string
              formatting that use this representation.

            - Use 'find_and_extract_edition()'.
              Replaces 'find_edition()' with 'find_and_extract_edition()'.

              Solves issues related to [TD0130] in the 'EbookAnalyzer'.

            - Refactor the 'TextChunker' class for readability.

            - Use 'TextChunker' in the 'DocumentAnalyzer'.
              Refactor text chunking in the 'DocumentAnalyzer'.

              Replaces ad-hoc text chunking with the 'TextChunker' class.

              Completes TODO-list item [TD0134] on consolidating splitting
              up text into "chunks".

            - Refactor text chunking in the 'EbookAnalyzer'.
              Replaces ad-hoc text chunking with the 'TextChunker' class.

              Factors out extracting ISBN numbers from text into a separate method.

              References TODO-list item [TD0134].

            - Factor out 'isbnlib' functionality to new module.
              Adds a new module 'services' in the source root.

              This module should contain third-party services for querying APIs.

              Most of the 'isbnlib' functionality is moved from 'analyze_ebook.py'
              to a new file 'services/isbn.py'.

              This should be cleaned up and designed as to provide an interface
              to *any* ISBN metadata service provider, not just 'isbnlib'.
              The interface should also handle take care of verifying that the
              services are available and other service-specific details such as
              rate-limiting, etc.

              References TODO-list item [TD0182].

            - Rework 'find_titles_in_text()'. Add unit tests.

            - Rename 'text_lines' to 'num_text_lines'.

            - Modify exceptions raised in 'collapse_whitespace()'.
              Prefer 'AssertionError' over 'TypeError' for internal functions.


            Fixes
            - Fix repeating queries and messages on renames.
              Removes repeating rename confirmation prompts and messages.

              Modified the 'FileRenamer' to clear out skipped, "rejected" (opposite
              of confirmed) and renamed files. This prevents the same prompts and
              messages from re-appearing for every processed file in the outer-most
              main program loop.

            - Various clean up of 'builder.py'.
              Fix inconsistencies. Implement 'DataBundle.__str__()'.

            - Prevent duplicated delegations.
              Adds temporary fix along with some notes on possible solutions.

            - Add unit test constant 'PATH_USER_HOME'. Fixes.
              Removes duplicated code and unused functions. Moves misplaced tests.

            - Various minor changes in the 'Autonameow' class.
              Adds method '_collect_path_from_opts()' and minor fixes.

            - Fix 'exiftool_fieldmeta.yaml'. Modify assertion.

            - Add handling special case human name format.
              Fixes incorrect 'nameparser' results for names like 'A.B. Lastname'.

            - Fix 'datetime' format not passed to field format.

            - Minor fixes. Make local logging functions methods.

            - Fixes to the mess that is 'FilesContext'.

            - Fix crashing if mismatched candidate and field.
              Fixes crashing due to formatting fields with incompatible value.

              Fixes crashing when attempting to format field candidate with a
              placeholder field that are not both either "multivalued" or not.

              Fixed by checking that the placeholder field is compatible with the
              field candidate before calling the 'format()' method which raised a
              assertion error exception.

            - Fix 'lookup_candidates()' used wrong field coercer.
              Fixes not using "list of string"-coercer for "multi-valued" fields.

            - Fix inconsistent assertion argument ordering.
              Prefer 'assert(expected, actual)' over 'assert(actual, expected)'.

              Adds notes on this to 'conventions.md' for future reference.

            - Fix inconsistent conditional skipping of unit tests.

            - Fix stand-alone extractor swallowing exceptions.
              Adds back crashing where crashing is to be expected.

            - Fix 'Repository.__len__()' and unit tests.
              Various fixes to the 'Repository' class and related unit tests.

            - Fix undefined variable used in log message.

            - Various fixes in 'resolver.py'.
              Fixes for readability. Modify de-duplication. Still incomplete.

            - Fix splitting human names containing 'and'.
              Fixes incorrectly splitting human names containing 'and'.

            - Fix resolver not reset when using new rule.
              Fixes bug where the resolver was not properly reset "between rules".

              After trying and failing to apply a given rule the resolver state was
              kept, which led to attempts to gather data for placeholder fields that
              were present in the rule active previously but not present in the
              currently active rule.

              This part of the code is all just a total mess, I'm surprised it
              works as "well" as it does..

            - Fix asymmetric regression runner test reporting.
              Display message when 'check_renames()' succeeds as well as fails.

            - Fix inconsistent variable naming in extractors.

            - Fix inconsistent naming in 'meowxtract.py'.

            - Various minor largely non-functional fixes.

            - Fix unit test breaking depending on terminal size.

            - Fix unit tests breakage due to global state.
              Running the tests on a new MacBook Pro all of a sudden breaks tests.

              This has somehow not been a problem on any other system I've tried so
              far. Fixed by resetting global state after the offending tests, which
              then seems to not affect other unit tests.

            - Various fixes and additions to 'logs.py'.
              Factors out string formatting. Adds new runtime reporter.

            - Miscellaneous fixes in 'autonameow.py'.
              Rename variables, modify logging. Fix inconsistent messages.

            - Fix inconsistent naming in 'master_provider.py'.
              Prefer 'uri' over 'meowuri' to avoid potential module name clashes.

            - Various minor fixes in 'analyze_ebook.py'.
              Modify debug logging. Clean up 'filter_isbns()'.

            - Fix crashing due to accessing renamed method.

            - Fix unit test failing on MacOS.

            - Fix inconsistent return statements.

            - Fix inconsistent naming of string values.
              Adds 'str_' prefix to result of calling 'types.force_string()'.

            - Clean up unit tests.
            - Clean up 'config_parser.py' and related unit tests.
            - Clean up 'truncate_text()'. Add unit tests.
            - Clean up string coercion in MeowURI classes.
            - Clean up and add missing 'FileObject' unit tests.
            - Clean up 'simplify_unicode()'.
            - Clean up 'normalize_unicode()'.
            - Clean up 'indent()'.
            - Clean up 'normalize_whitespace()' and tests.
            - Clean up 'collapse_whitespace()' and tests.
            - Clean up string field value normalization.
            - Clean up 'test_util_mimemagic.py'.
            - Clean up unit test imports. Remove commented code.
            - Clean up 'checksum.py' and related unit tests.

            - Clean up exception handling. Catch too long names.
              Modifies exception handling around 'rename_file()'.
              Adds handling failing due to destination path being too long.

            - Clean up the regression runner.
              Various fixes, remove redundancies, rename variables, etc.

            - Clean up the regression runner and utilities.
              Refactor for readability. Update 'tests/README.md'.

            - Clean up 'RegressionTestLoader' config paths.
              Cleans up reading config paths from regression tests options.

            - Clean up unit tests for 'field_parsers.py'.

            - Clean up datetime string matching functions.
              Reworks matching "special cases" of ISO-like dates in strings.

            - Clean up 'Repository._machine_readable_contents()'.
              Attempt at improving the string representation of stored data.

            - Inline redundant variables, fix duplicated logging.
              Adds various minor fixes.

            - Removes/inlines unnecessary variables.
            - Fixes some inconsistent naming.
            - Removes logging starting and completion in individual extractors
              which duplicates logging produced by the 'log_runtime()' context
              handler in the calling 'ExtractorRunner'.

            - Add workaround for bad 'nameparser' results.
              Adds fix for invalid parsing of names like 'Le Minh Nguyen'.

            - Add fix for circular imports in 'humannames.py'.
              Fixes error when importing 'checksum.py' from interactive prompt.

            - Add underline prefix to type coercion classes.
              Indicates private scope. Users should call module-level singletons.

            - Add hack fix to 'split_multiple_names()'.
              Adds hack fix to handle special case in 'split_multiple_names()'.

            - Minor fixes. Add TODO [TD0184].
              Adds TODO [TD0184] on fixing 'metainfo' translation.

              Renames variables/arguments in 'providers.py'.

            - Add partial resolver-related fixes in 'context.py'.

            - Minor refactoring in 'repository.py'.

            - Ignore empty/whitespace lines when parsing mappings.

            - Remove unused extractor 'shutdown()' methods.

            - Remove empty file 'test_util_text.py'.


2018-03-08  [autonameow v0.5.6]
            Removed the plugin system.
            The 'MicrosoftVisionPlugin' is removed and the 'GuessitPlugin' is
            reworked into an extractor.
            This might be added back at some later time, but for right now
            there is no sense in keeping this around. It should be rewritten
            again from scratch if ever needed in the future.
            A lot of cleanup and refactoring. Major changes to MeowURIs.

            NOTE: This version changes the configuration syntax ---
                  config files written by previous version will *NOT* work!

            Additions
            - Add handling Word documents in exiftool extractor.
              Adds 'application/msword' to 'ExiftoolMetadataExtractor' MIME-types.
              Adds field meta with prefixes 'FlashPix' to 'exiftool_fieldmeta.yaml'.

            - Add new option '--stats' to stand-alone extractor.
              Adds option '--stats' for displaying statistics after extraction.
              This is useful for getting an overview of which files are currently
              supported and other high-level information on extractor output.

            - Add workaround to getting provider names.
              Adds workaround for being unable to get name from 'str(klass)'.

              Adds class method 'name()' to 'BaseAnalyzer' and 'BaseExtractor'.

              Should pass around instances of provider classes instead of the
              classes themselves to solve this and other related problems.
              This has not been done yet because that kind of refactoring would
              likely introduce a lot of problems related to caching in the text
              extractors and ebook analyzer ..

              References TODO-list item [TD0151].

            - Add text utility function 'filter_multiple_names()'.

            - Add additional example for TODO [TD0179].

            - Add constant 'TEXT_EXTRACTOR_CACHE_MAX_FILESIZE'.

            - Add external 'FIELD_LOOKUP' files and functions.
              Adds functionality for reading 'FIELD_LOOKUP' from yaml files.

              Also adds the yaml-files themselves.

              Note that the previous way of defining 'FIELD_LOOKUP' as class
              instance attributes is still in use.  This commit just adds the
              functionality and data files that contain the same information
              as that in the 'FIELD_LOOKUP' dicts.

            - Add 'genericfields.get_all_generic_field_klasses()'.
              Adds yet still unused function for getting all generic field classes.

            - Add function '_colorize_string_diff()'.
              Adds function for colorizing the difference of two strings.

              Stolen from the "beets" project.
              Function '_colordiff' in 'beets/ui/__init__.py'
              git commit cb785107425ed7bfafb8a349deb3e6731deb1883

              Modified to use the autonameow 'colorize()' function and
              dependency injecting this function for easier unit testing.

            - Add parser for external 'FilenameAnalyzer' data.
              Adds a 'MimetypeExtensionMapParser' class for reading data file.

              The function 'likely_extension()' uses data currently stored in dict
              'MIMETYPE_EXTENSION_SUFFIXES_MAP'.
              This data should be stored in an external file.
              I first tried dumping the data in YAML format, but the aliasing and
              handling of sets, etc.  gave a pretty messy result. This commit adds
              a way overkill, poorly implemented parser for reading the simple data
              file.

              Note that this commit does not actually swap out the old dict with
              this new parser and data.

              The file 'probable_extension_lookup' is also added to the manifest
              and 'setup.py'.

            - Add 'devscripts/find_unit_tests_visits.sh'.

            - Add coercing external data to Unicode strings.
              Adds coercing external MIME-type mappings loaded in 'mimemagic.py'.

              Should provide some additional robustness for non-Unicode text files.
              This also introduced some circular import errors that had to be resolved
              by changing some imports around and moving some imports to local scopes.

            - Add initial setuptools/pip packaging.
              Based on the "Python Packaging User Guide".

              This guide in particular:

                https://packaging.python.org/tutorials/distributing-packages/

            - Add package data file and magic-note in 'setup.py'.

            - Add dependencies to 'setup.py'.
              Adds dependencies with the lowest versions currently used for testing.

              I test autonameow regularly on MacOS and Linux and the versions of
              python modules available through homebrew are all newer than those
              found in the Ubuntu repositories.  The versions listed here are the
              ones used on my Linux machine.  Full listing, for future reference:

                                      Linux       MacOS
                  beautifulsoup4      4.4.1       4.6.0
                  chardet             2.3.0       3.0.4
                  colorama         *  0.3.7       0.3.7
                  EbookLib         *  0.16        0.16
                  hypothesis       *  3.38.0      3.38.0
                  guessit             2.1.0       2.1.4
                  isbnlib             3.5.6       3.7.2
                  Pillow              3.1.2       4.0.0
                  pytz                2014.10     2017.2
                  PyYAML              3.11        3.12
                  Unidecode           0.4.19      0.4.20

              Note that "magic" is missing because I can't seem to be certain
              of exactly which library is actually used on both platforms ..

            - Add '.smother' to '.gitignore'.

            - Fix bad TODO ID. Add TODOs referencing [TD0178].

            - Add partial matching methods to the 'MeowURI' class.
              Adds additional matching methods to the 'MeowURI' class.

              Methods 'matches_start()' and 'matches_end()' work as 'str.startswith()'
              and 'str.endswith()' but accepts either instances of 'MeowURI',
              'MeowURILeaf', 'MeowURIRoot' or Unicode strings.

            - Add additional 'PathComponent.coerce()' unit tests.

            - Add unit tests for the 'ProviderRunner' class.

            - Add debug logging all runtime logs before exiting.
              Adds function 'log_previously_logged_runtimes()'.

              Calls to 'log_runtime()' and 'log_func_runtime()' are stored in a
              global.  Passing a logger instance to 'log_previously_logged_runtimes()'
              debug simply logs the contents of this list.

              This is all pretty ugly, but does what I need for now ..

            - Add 'NotImplementedError' referencing [TD0175].


            Changes
            - Remove the plugin system.
              Removes all functionality related to "plugin" providers.

              This might be added back at some later time, but for right now there is
              no sense in keeping this around. It should be rewritten again from
              scratch if ever needed in the future.

              Completes TODO-list items [TD0108][TD0128][TD0009][TD0013].

            - Remove 'GuessitPlugin'. Add 'GuessitExtractor'.
              Reworks the guessit plugin into a extractor.

              Functionality should be basically unchanged.
              At this point, there is no point in keeping poorly implement
              "plugins" and plugin system around as they aren't different enough
              from the extractors to warrant special treatment and makes changing
              and refactoring difficult due to the poor design.

              MeowURIs 'plugin.guessit.*' are now 'extractor.filesystem.guessit.*'.

            - Remove the 'MicrosoftVisionPlugin'.
              Removes mostly broken 'MicrosoftVisionPlugin' and related.

            - Remove '--quiet' option from stand-alone extractor.
              Removes unimplemented '--quiet' option from stand-alone extractor.

              Completes TODO-list item [TD0159].

            - Refactor 'ProviderRunner'.

            - Refactor stand-alone extraction runner.

            - Refactor 'log_runtime()' and related unit tests.

            - Remove blacklisted text lines in text extractors.
              Adds filtering blacklisted text lines in the 'AbstractTextExtractor'.

              Part of the 'cleanup()' method that is called with the raw extracted
              in all text extractors.
              This should probably allow regular expressions, but this simple exact
              matching is a start and does not risk increasing extractor run-time
              as much as regular expressions *probably* would.

            - Rework function 'remove_ignored_textlines()'.
              Moves and renames function 'remove_ignored_textlines()'.

              Renames 'remove_ignored_textlines()' to 'remove_blacklisted_lines()'
              and moves it to 'util/text/transform.py'.

              The blacklist is now passed along with the text to process.

            - Rename unit test source files to match convention.
              Renames unit test files to match naming convention.

                'test_persistence_cache.py' -> 'test_core_persistence_cache.py'
                'test_persistence_base.py' -> 'test_core_persistence_base.py'

            - Factor out function 'batch_regex_replace()'.
              Factors out functionality for applying multiple replacements.

              Extracts functionality from method '_do_replacements()' in the
              'FilenamePostprocessor' class into new function 'batch_regex_replace()'.

            - Remove utility function 'dump()'.
              Removes 'dump()' and replaces use with 'write_yaml()'.

            - Refactor writing yaml files.
              Factors out function 'write_yaml()' from 'write_yaml_file()'.

            - Remove unused utility function 'flatten_dict()'.

            - Remove unused function 'expand_meowuri_data_dict()'.

            - Remove unused utility function 'contains_none()'.

            - Remove unused function 'types.coercer_for()'.

            - Remove unused function 'types.try_coerce()'.

            - Remove unused 'meowuri_genericfield_map()'.
              Removes unused function 'genericfields.meowuri_genericfield_map()'.

            - Remove unused class attributes in 'humannames.py'.

            - Remove unused function "mocking" function.

            - Refactor unit tests in 'test_core_types.py'.

            - Enable caching in the 'EpubTextExtractor'.

            - Remove temporary code for dumping 'FIELD_LOOKUP'.

            - Increase size of text chunks for epub e-books.
              Increases the amount of text that is searched for ISBN-numbers.

              The 'EpubTextExtractor' returns text with a lot of duplicated lines and
              sections. I'm currently not sure if this is to be expected or caused by
              the "hail mary" approach currently used in the 'EpubTextExtractor',
              collecting all possible text ..

              Assuming that this is typical for epub e-books, the text chunks that are
              searched for ISBN-numbers are increased for files with MIME-type
              'application/epub+zip'.

            - Remove duplicated text extractor "*_fieldmeta.yaml".
              Adds using a shared field meta yaml file for all text extractors.

            - Replace inline 'FIELD_LOOKUP' with yaml-files.
              Removes inline 'FIELD_LOOKUP' dicts. Read from '*_fieldmeta.yaml'.

            - Refactor duplicate code in 'ExtractorRegistry'.

            - Remove 'ProviderClasses'. Add registry classes.
              Fixes prematurely importing providers classes at module import.

              Adds simple "registry" classes that wraps the function calls that was
              previously performed when the modules were imported.
              All use of 'extractors.ProviderClasses' and 'analyzers.ProviderClasses'
              should now be 'extractors.registry.all_providers' and
              'analyzers.registry.all_providers' instead.
              This should be functionally equivalent but collect the provider classes
              only when needed.

            - Replace float 'probability' with strings.
              Replaces floats in 'FIELD_LOOKUP' with strings.

              Completes TODO-list item [TD0178].

            - Replace boolean 'multivalued' with strings.
              Replaces booleans in 'FIELD_LOOKUP' with strings 'true' or 'false'.

              References TODO-list item [TD0178] on only storing strings in
              'FIELD_LOOKUP'.

            - Replace 'FIELD_LOOKUP' mappings with strings.
              Replaces actual class references in 'FIELD_LOOKUP' with strings.

              Replaces all instances of 'WeightedMapping' namedtuple and references
              to 'NameTemplateField' subclasses with strings.

              Example entry, old form:

                  'mapped_fields': [
                      WeightedMapping(fields.Title, probability=1)
                  ]

              New form:

                  'mapped_fields': [
                      {'WeightedMapping': {'field': 'Title', 'probability': 1}}
                  ]

              The new form is translated to the old form in 'providers.py'.
              References TODO-list item [TD0178] on only storing strings in
              'FIELD_LOOKUP'.

            - Replace 'FIELD_LOOKUP' classes with strings.
              Replaces actual class references in 'FIELD_LOOKUP' with strings.

              Replaces all coercer classes in the provider 'FIELD_LOOKUP' dicts.

              Adds using 'get_coercer_from_metainfo_string()' to translate from
              the strings to actual classes.
              References TODO-list item [TD0178] on only storing strings in
              'FIELD_LOOKUP'.

            - Store classes instead of instances in results.
              Pass classes instead of class instances to 'wrap_provider_results()'.

              Does not make much sense to store the individual instances as they
              should not keep any interesting state at all.

            - Minor refactoring of wrapping provider results.
              Factor out function '_wrap_provider_result_field()'. Minor cleanups.

            - Rename 'RuleMatcher.match()' to 'RuleMatcher.get_match_results()'.

            - Factor out method 'RuleMatcher._score_rule()'.

            - Rework 'RuleMatcher.__init__()' to take a 'FileObject'.
              Modifies the rule matcher to be re-instantiated for each given file.

            - Instantiate the 'RuleMatcher' where it is actually used.
              Removes passing a 'RuleMatcher' instance to the 'FilesContext'.

              Adds passing a reference to the "master provider" instead.

            - Do not pass entire 'Autonameow' instance to 'FilesContext'.
              Adds passing only the 'exit_code' attribute instead of the instance.

            - Use external config file for probable extensions.
              Replaces 'MIMETYPE_EXTENSION_SUFFIXES_MAP' with reading from file.

              Reads the content of a file at 'PATH_PROBABLE_EXT_LOOKUP' that contains
              the same data as the now deleted 'MIMETYPE_EXTENSION_SUFFIXES_MAP' dict.

            - Remove None-test when parsing replacements.
              Removes bad test for None when parsing post-processing replacements.

              Values returned by 'force_string()' should only ever return strings or
              the "null" value of the 'String' coercer class, which is an empty
              string. So checking for None after this call does not make any sense.

            - Remove checking lists of bundles in the resolver.
              Removes checking for lists of bundles in 'resolver._verify_types()'.

              At this point there should only be one single 'DataBundle' per name
              template field, but the values contained in the bundles might very
              well be lists.

            - Prevent '(UNKNOWN MIME-TYPE)' to be used as extension.
              Adds testing if an instance of 'NullMIMEType' is used as extension.

              Checks if the value is non-empty in the 'Extension' name template
              field 'format()' method.
              However, this test should probably be done a lot earlier, as there
              is a distinct difference between an unknown MIME-type and a MIME-type
              that is mapped to an empty extension.

            - Define MIME-type to extension overrides in file.
              Moves preferred extensions for MIME-types to an external file.

              Isolates future changes from the program logic.

              The file 'autonameow/util/mimemagic.preferred' should define one
              "mapping" per line.  Each line should contain a MIME-type and a
              extension, separated by a colon.
              Any whitespace is ignored, as well as any initial period in the
              extension.  Lines beginning with a hash ('#') are also ignored.

            - Define MIME-type to extension mappings in file.
              Moves MIME-type to extension mappings to an external file.

              Isolates future changes from the program logic.

              The file 'autonameow/util/mimemagic.mappings' should define one
              "mapping" per line.  Each line should contain a MIME-type and a
              extension, separated by a colon.
              Any whitespace is ignored, as well as any initial period in the
              extension.  Lines beginning with a hash ('#') are also ignored.

            - Move 'magic' import to inside '_build_magic()'.

            - Attempt to improve handling of different "magics".
              Adds possibly improved handling of different 'magic' implementations.

              Attempt to detect which of three 'magic' implementations that was
              imported and return a function that is roughly equivalent to running
              'file --mime-type' on POSIX systems.

              Based off of this:
              https://github.com/androguard/androguard/blob/2e1f04350bcb38a3acf796f8f8829d816b38fe21/androguard/core/bytecodes/apk.py#L380

              Documentation for the various magics:

                'filemagic'       https://pypi.python.org/pypi/filemagic
                'file-magic'      https://github.com/file/file/tree/master/python
                'python-magic'    https://github.com/ahupp/python-magic

            - Remove unnecessary 'can_handle()' override.
              Removes 'GuessitExtractor.can_handle()', equivalent to the base class.

            - Minor refactoring of the 'RuleMatcher()' class.
              Modifies the 'RuleMatcher' tests and implementation.

              Set the 'RuleConditionEvaluator' class in 'RuleMatcher.__init__()'
              for easier mocking in unit test.

              Remove using the global module attribute 'master_provider.request()'.
              This is now passed in to the 'RuleMatcher' init.

            - Rename 'provider.py' to 'master_provider.py'.

            - Simplify 'get_providers_for_meowuri()'.

            - Minor refactoring of the 'ExtractorRunner' class.
              Moves collecting extractors out of 'ExtractorRunner.__init__()'.

            - Rework MeowURI matching. Modify 'contents.mime_type'.
              Replaces 'contents.mime_type' with 'mime_type'.

              Modifies matching of MeowURIs for readability.

              Completes TODO-list item [TD0176].

            - Clean up 'meowuri.py' and related unit tests.

            - Modify 'MeowURI.__repr__()'. Add unit tests.

            - Modify MeowURI leaf 'pathname.parent'.
              Replaces 'pathname.parent' with 'pathname_parent'.
              References [TD0176]

            - Modify MeowURI leaf 'pathname.full'.
              Replaces 'pathname.full' with 'pathname_full'.
              References [TD0176]

            - Modify MeowURI leaf 'basename.prefix'.
              Replaces 'basename.prefix' with 'basename_prefix'.
              References [TD0176]

            - Modify MeowURI leaf 'basename.suffix'.
              Replaces 'basename.suffix' with 'basename_suffix'.
              References [TD0176]

            - Modify MeowURI leaf 'basename.full'.
              Replaces 'basename.full' with 'basename_full'.
              References [TD0176]

            - Modify MeowURI leaf 'abspath.full'.
              Replaces 'abspath.full' with 'abspath_full'.
              References [TD0176]

            - Modify 'CommonFileSystemExtractor' leaf.
              Replaces 'basename.extension' with 'extension'.
              References [TD0176]

            - Rename 'MasterDataProvider.query()' to 'request()'.
              Mostly to clearly differentiate from 'Repository.query()'.


            Fixes
            - Add detecting and fixing bad 'nameparser' results.

            - Fix broken '--dump-config'.

            - Fix 'remove_blacklisted_lines()' removed separators.
              Fixes mangled line separators in 'remove_blacklisted_lines()'.

              Now any line separators should be left intact. Adds unit tests.

            - Handle malformed ISBN metadata authors.
              Adds handling *some* malformed ISBN metadata author entries.

              Fixes some case where multiple authors should be separate list
              elements but are instead all in a single list element, separated
              by various separators.

              Completes TODO-list item [TD0179].

            - Minor fixes and tweaks to the 'EbookAnalyzer'.

            - Calculate 'get_field_class()' results dynamically.
              Fixes hardcoded mapping of generic field leaves to classes.

              Adds collecting the leaves dynamically from each available generic
              field class 'uri()' method.
              This is done once at first access, following calls use the cached
              data in module attribute '_URI_LEAF_TO_KLASS_MAPPING'.

            - Improve displaying "custom" filename replacements.
              Swaps out functionality for displaying replacement messages.

              Fixes edge-cases not covered by the previous functions.
              Completes TODO-list item [TD0096] on some replacements causing
              incorrect color highlighting.

            - Fix field 'XMP:Subject' is standardized as list.

            - Various fixes and cleanups in 'resolver.py'.

            - Fix incorrect variable name in 'mimemagic.py'.

            - Fix bad 'setup.py'.
              Remove copyright sign from 'version.py'.

              The copyright sign raises a KeyError when 'setup.py' evaluates
              the file in order to fetch attributes without importing ..

            - Clean up old unit tests. Use sane test values.

            - Fix direct access of 'FIELD_LOOKUP'.
              Modifies inconsistent access of 'FIELD_LOOKUP'.

              Prefer calling the class method 'metainfo()' over accessing the
              'FIELD_LOOKUP' class attribute directly. Fixes unit tests.

            - Do not keep a static instance of 'MeowURIParser'.
              Modifies 'MeowURI' to call static method 'MeowURIParser.parse()'.

            - Rework 'NameTemplateField' classes.
              Uses singleton instances of 'NameTemplateField' subclasses.

              Instead of always using subclasses of 'NameTemplateField' as
              uninstantiated classes, they are now used like the coercer classes
              in 'types.py', I.E. shared singletons available as module attributes
              in 'fields.py'.

              External use is unchanged. Actual classes are renamed with a leading
              '_' and the singletons now have the old class names.

              This solves some issues related to '__repr__()' and '__str__()'.
              Completes TODO-list item [TD0140] on template field classes 'str()'
              method not working as intended.

            - Fix invalid stand-alone extraction statistics.
              Removes unnecessary nesting lists of lists.

              This fixes a bug in listing files not contained in the metadata
              extraction provide results.

            - Clean up 'indent()' and related unit tests.

            - Remove warnings on repeated delegations.
              This is now properly handled by the 'ProviderRunner' class.


2018-02-20  [autonameow v0.5.5]
            Adds new metadata extractor 'PandocMetadataExtractor'
            that extracts titles, heading, table of contents, authors, etc.
            from various document file types.
            Also adds two new text extractors: 'MarkdownTextExtractor' and
            'RichTextFormatTextExtractor'.

            Adds ability to pass in arbitrary "views" instead of directly
            accessing the 'ui' module functionality, which is utilized
            in the regression tests to do pattern matching assertions on
            stdout and stderr.

            Various refactorings and bug fixes. Removes some stale or
            unimplemented functionality. Adds missing tests.

            Additions
            - Add new extractor 'PandocMetadataExtractor'.
              Adds a new document metadata extractor using 'pandoc'.

              This currently uses 'pandoc' to convert documents using a custom
              template that effectively translates generic document elements
              into YAML-formatted data, that is loaded into a plain dict.

              One possible alternative method is to use JSON as the output format
              and parse that, but this is a lot messier and involves parsing
              abstract syntax tree nodes used by 'pandoc'.
              I am sure there are better ways to do this, but the custom template
              strategy was the first that came to mind.

              This functionality could alternatively have been added to the text
              extractors as per TODO-list item [TD0172] on extending text extractors
              with additional fields. Currently they only provide leaf 'full'.

              Might still go that route, but it would involve rethinking how text
              extractors operate in order to reduce multiple calls to do the
              extraction, etc.

              References TODO-list item [TD0173].

            - Add new markdown text extractor.
              Adds new text extractor class 'MarkdownTextExtractor'.
              Uses 'pandoc' to convert markdown files to plain text.

            - Add new RTF text extractor.
              Adds a new RTF text extractor, 'RichTextFormatTextExtractor'.

            - Add parsing date/time strings with timezone and uS.
              Adds handling of date/time-strings with microseconds and timezone.

            - Pass in a user interface to the 'Autonameow' class.
              Adds passing the 'view' to the main 'Autonameow' class.
              Part of changes to separate the view from the core logic.

              Adds new TODO [TD0170] on using a mock UI in the 'AutonameowWrapper'
              class, used by the regression test runner.

              References [TD0111].

            - Add 'MockUI.msg()' calls to captured stdout.
              Adds captured 'MockUI.msg()' calls to captured stdout.

              Re-enables stdout matching assertions in regression test suite
              '0010_dump_meowuris_a'.

              Completes TODO-list item [TD0170].

            - Add filesystem wrapper functions.
              Handles encoding and avoids repeatedly calling 'enc.syspath()'
              everywhere.
              Re-raises various exceptions to a single exception type.

            - Add persistence back-end specific exception class.
              Adds exception class 'PersistenceImplementationBackendError'.

              Should be used by implementing persistence classes to re-raise
              any exceptions raised in the '_load()' and '_dump()' methods.

            - Extend the 'MockUI' class. Add unit tests.

            - Do not warn if no text is present. Add asserts.

            - Add big fixes/changes to data formats.
              Adds fixes related to TODOs [TD0102][TD0157][TD0115][TD0112] ..

              Analyzers previously constructed "meta" dicts inline by various ad-hoc
              means, often in "_wrap_*" methods.
              This commit makes analyzers and extractors use the same function
              'wrap_provider_results()' that reads the meta info from class attribute
              'FIELD_LOOKUP'.
              This also reduces flexibility in analyzers.
              But it becoming all the more obvious that analyzers need to be reworked
              to be a useful concept and provide more flexibility.

              This also effectively integrates the concept of a 'DataBundle',
              which is a simple wrapper class for storing data produced by providers.

              Adds TODOs:

              [TD0167] MeowURIs in databundles is only needed by the resolver.
              [TD0166] No longer possible to set probabilities dynamically due to
                 analyzers using the shared "wrapping" that reads probabilities
                       from the 'FIELD_LOOKUP'.

              Completes TODO-list item [TD0165].

            - Add new regression tests.

            - Add function 'sort_by_mapped_weights()'.
              Adds function for sorting lists of 'DataBundle' to the resolver.

              Intended for ranking of bundles from generic MeowURIs.

              Refers to [TD0112] on handling "equivalent" data.

            - Add method 'DataBundle.field_mapping_probability()'
              Adds a accessor for the probability of a mapped field.

              If the bundle has the field in a weighted mapping,
              the probability (weight) for that field is returned.
              Otherwise a default value of 0.0 is returned.

            - Add 'DataBundle.maps_field()'.
              Adds method with same functionality as function with same name.

            - Add test utility function 'get_expected_text_for_testfile()'.

              Instead of storing expected text as strings in the unit tests
              themselves, the expected text should be stored in files in the
              'test_files' directory. These files must have the same basename
              as their corresponding source file with '_expected.txt' appended.

              This function returns expected text for a given test file basename.

            - Add unit tests for 'RichTextFormatTextExtractor'.

            - Add integration tests for 'pdftotext' and 'unrtf'.

            - Add integration tests for 'test_files'.
              Adds tests that verify sample test files used by other tests.

              Intended to prevent confusion following unintended renaming of
              test files that break following tests that use them.

            - Add 'test_files/ObjectCalisthenics.rtf'.

            - Add 'RTF:*' to exiftool extractor 'FIELD_LOOKUP'.
              Adds 'RTF:*' fields to 'ExiftoolMetadataExtractor.FIELD_LOOKUP'.

            - Add basic integration testing of the test runners.

            - Add passing multiple '-f' to regression runner.
              Adds passing multiple '-f'/'--filter' to the regression runner.

              Results of multiple filter are ORed together, which provides
              pretty good flexibility in combination with the ability to negate
              matches by prefixing a '!' to the filter expression.

            - Implement 'MultipleTypes.__contains__()'.
              Adds checking if a specific coercer is used in a 'MultipleTypes'.

              Example usage:

                  list_of_strings_coercer = types.listof(types.AW_STRING)
                  assert types.AW_STRING in list_of_string_coercer

            - Add function 'force_meowuri()'.
              Adds convenience function similar to 'force_string()'.

              Returns a valid MeowURI or None, ignores any and all exceptions.

            - Add unit tests using dumped MeowURIs.

            - Add utility function 'flatten_sequence_type()'.
              Flattens arbitrarily nested lists or tuples of tuples and/or lists.

            - Add unit tests for 'filter_able_to_handle()'.

            - Add assertion and change log level in 'extract.py'.

            - Add "string to MeowURI boundary" for analyzers.
              Adds "boundary" for converting strings to MeowURIs.

              This really should not be required by the individual analyzers.
              Probably better to handle this in one spot as part of the interfacing
              layer that separates analyzers from the rest of the program.

            - Handle parsing instances of 'MeowURI'. Add tests.
              Adds ability to pass instances of 'MeowURI' to a new 'MeowURI'.

              This means that a new MeowURI can be created from either
              strings, MeowURIs or combinations of strings and MeowURIs.

              Adds new and reworks old unit tests and adds property-based tests.

            - Rename 'validate_path_argument()'. Add tests.

            - Add integration tests for stand-alone extractor.
              Adds integration tests that verify results of stand-alone extraction.

              Intended to verify correctness of the interface used by the stand-alone
              extractor.

            - Add module attribute dict 'MetadataProviderClasses'.
              Adds a "public" interface to all available text extractors.

              Similar to 'ProviderClasses' that includes all types of extractors.

            - Add and clean up unit tests in 'test_extractors.py'.

            - Add module attribute dict 'TextProviderClasses'.
              Adds a "public" interface to all available text extractors.

              Similar to 'ProviderClasses' that includes all types of extractors.

            Changes
            - Remove the unimplemented 'ImageAnalyzer'.
              Completes TODO-list item [TD0169].

            - Remove the 'TextAnalyzer'.
              Removes the unimplemented 'TextAnalyzer'. Completes TODO [TD0168].
              The 'ImageAnalyzer' and 'TextAnalyzer' was disabled because they do not
              actually do and return results in a format that deviates from the other
              providers.
              And the 'FiletagsAnalyzer' was rework to a extractor.

            - Remove 'epubzilla'.
              Removes the bundled third-party 'epubzilla' library.

            - Use 'ebooklib' in the 'EpubTextExtractor'.

            - Remove 'cPickle' imports, not needed in Python 3.

            - Improve last-attempt parsing in 'try_parse_date()'.
              Improves parsing of dates used in 'AW_DATE'.
              Now effectively truncates values until a match is found.
              Previously dates that did not contain year, month and day was not
              handled.  Now only a year is required in to return a valid datetime.

            - Do not request already available data.
              Use 'FileObject' data instead of requesting in the 'FilenameAnalyzer'.
              Use 'FileObject' data directly in plugins.
              Completes [TD0136].
              Removes querying for data already available from the 'FileObject'.

            - Remove 'NameTemplateField.normalize()' methods.
              Removes mostly unused methods in 'NameTemplateField' subclasses.

              This should be user-configurable and the same functionality is
              still provided through the "post-processing" replacements, however
              not field-specific.

            - Simplify stand-alone metadata extraction.
              Simplifies stand-alone extraction runner 'extract.py'.

              Uses newly improved interface provided by the extractor runner
              to run only metadata extractors.

            - Simplify stand-alone extraction.
              Simplifies stand-alone extraction runner 'extract.py'.

              Uses newly improved interface provided by the extractor runner
              to run only text extractors.

            - Simplify collecting extractor classes.
              Removes leftover collecting of extractor class from modules.

              All extractor classes are now divided into packages.
              Previously, some extractor was stored outside of these packages
              in a separate file. Functions for retrieving these was left behind
              after the last of these extractors were changed/removed.

              This commit removes these unnecessary functions and simplifies
              collection of extractor classes a great deal.

              Completes TODO-list item [TD0127].

            - Do not pass available extractors to runner.
              Removes argument 'available_extractors' from 'ExtractorRunner' init.

              This class currently only gets accessed through the module-level
              'run_extraction()' function, which populated this argument.  But this
              is pretty much equivalent to having the class grab this data itself at
              instantiation.

              The old method might provide a means of controlling which extractors
              should be made available to the runner, but for now this probably only
              adds unnecessary complexity.

            - Use 'msg()' instead of logging replacements.
              Logging messes with the alignment of the replacement message strings.

            - Print stacktraces when assertions fail.
              Adds printing stacktraces when regression runner assertions fail.

            - Add filesystem wrapper function 'rmdir()'.
              Removes unimplemented directory deletion from 'delete()'.

            - Do not emit error messages from 'PathCollector'.

            - Exclude local regression tests in 'run_all_tests.sh'.

            - Use utility filesystem functions in 'BasePersistence'.

            - Remove bytestring checks in 'has_permissions()'.
              Workaround used by 'argparse' to validate Unicode str arguments.

            - Clean up the 'PathCollector' class.
              Moves matching paths to globs to separate function.

              Adds additional tests. Reworks exception handling slightly.

            - Use keyword arguments for clarity.

            - Clean up 'argparse' argument validation functions.

            - Use common filesystem functions in 'fileobject.py'.
              Modifies path validation to not accept Unicode paths.

              Also adds using the utility file system wrappers instead
              of inline handling of path encoding. This means repeated
              calls to 'syspath()', but should not be a huge problem.

            - Extract function '_key_as_file_path()'.
              Extracts part of '_persistence_file_abspath()' into separate function.

            - Use functions in 'io.py' for checking files.
              Adds using 'io.py' functions to avoid inline handling of path encoding.

            - Simplify storage in the 'Repository'.
              Removes using 'nested_dict_*' functions to store 'Repository' data.

              References [TD0167].

            - Handle 'AttributeError' in 'BasePersistence'.
              Logs 'AttributeError' and raises log level of top-level exceptions.

            - Fix duplicate 'EbookAnalyzer' MIME-type evaluation.
              Removes code duplication by using parent class method.

            - Use consistent handling of MIME-glob eval error.
              Modifies error handling in 'EbookAnalyzer.can_handle()'.

              Prevent using a possibly undefined log and handle failed
              MIME-glob evaluation errors like the other extractor classes
              that do not override 'can_handle()'.

            - Raise 'TypeError' for bad ordering of 'MeowURI'.
              Raises 'TypeError' when attempting to order MeowURIs and other types.

            - Replace 'IndexError, KeyError' with 'LookupError'.

            - Rework extractor unit test inheritance.
              Improves use base classes in extractor unit tests.

              Previously a lot of tests were skipped, printing warnings and
              polluting the results. This was caused by having the base classes
              with shared functionality inherit from 'unittest.TestCase'.
              This commit fixes this by only inheriting from 'unittest.TestCase'
              in the test classes that use the shared functionality.

              The same change is also made to the property-based tests of the
              config field parsers.

            - Work around circular import problems in 'provider.py'.
              Adds inline imports to work around import problems.

              Only seems to happen when running the alternative unit test runner.

                  $ PYTHONPATH=autonameow:tests python3 -m unit --skip-slow

            - Rework the 'FileRenamer' class.
              Separates 'FileRenamer' class from all user interface interaction.

              Example usage with a "timid" renamer:

                  renamer = FileRenamer(dry_run=True, timid=True)
                  renamer.add_pending(b'/foo/bar', 'baz')
                  if renamer.needs_confirmation:
                      for filename_delta in renamer.needs_confirmation:
                          renamer.confirm(filename_delta)
                  renamer.do_renames()

              Example usage with a renamer that does not require confirmation:

                  renamer = FileRenamer(dry_run=True, timid=False)
                  renamer.add_pending(b'/foo/bar', 'baz')
                  renamer.do_renames()

              Fixes issues related to [TD0171] on separating logic from the UI.

            - Make 'check_option_combinations()' a function.
              Moves static method 'Autonameow.check_option_combinations()'.

            - Pass back actual 'ColumnFormatter' from 'MockUI'.
              Temporarily use 'ColumnFormatter' in regression tests.

              References TODO-list item [TD0171].

            - Simplify the 'MockUI' class.
              Replaces actual methods and with using '__getattr__'.

              Adds additional unit tests.

            - Use mock UI in regression tests.
              Adds passing in a mock UI to the main 'Autonameow' class in tests.

              Uses a 'MockUI' class that defines methods that mirrors functions
              exposed in the 'core.ui' package.

              References TODO-list item [TD0170].

            - Explicitly use 'view.cli' in the regression runner.
              Adds explicitly specifying 'view.cli' functionality when required.

            - Explicitly use 'view.cli' in 'logs.py'.
              Adds explicitly specifying 'view.cli' functionality when required.

            - Rename 'ui' to 'view'.
              Renames the 'ui' package to 'view'.

              The plan is to use 'ui' to refer to the currently active view
              and so the package name is renamed to prevent name conflicts.

            - Use 'cli.msg()' instead of print in 'cli_main()'.

            - Do not buffer when printing errors in 'main.py'.

            - Improve regression test stdout assertions.
              Adds printing failed and passed stdout match assertions.

              This is currently buggy, the captured stdout is inconsistent
              depending on which regression tests that are included.

            - Print exception errors with the 'TerminalReporter'.
              Cleans up displaying error messages in the regression runner.

              Moves displaying messages on "top-level exceptions" and the
              captured exception traceback to the 'TerminalReporter' class.

            - Catch 'ValueError' raised by 'pyexiftool'.
              Adds catching 'pyexiftool' exception in the 'ExiftoolMetadataExtractor'.

              ValueError can be raised by 'pyexiftool' when aborting with CTRL-C.

                  self._process.stdin.write(b"-stay_open\nFalse\n")
                  ValueError: write to closed file

              Should probably clean up the messy nested try-catch clauses.

            - Use non-buffered printing in regression runner.
              Adds printing regression runner output at once.

              This makes sure that the name of a slow regression test suite
              is displayed before that test in started.

            - Modify regression runner filtering from OR to AND.
              Modifies how multiple filter options works in the regression runner.

              This also fixes a bug where filtering resulted in duplicate tests.

            - Rename 'PdftotextTextExtractor' to 'PdfTextExtractor'.
              Renames the pdf text extractor class and related source files.

              Makes a lot more sense to not bother with leaving room for many
              different extractors for the same file type. Users probably
              will not be interested in specifying exactly which back-end program
              is used to get the text.

              Users should not even have to specify which extractor class to use,
              something like 'extractor.text.full' should be enough.

            - Remove redundant else-clauses.

            - Remove duplicate key in 'EbookAnalyzer.FIELD_LOOKUP'.

            - Do not pass None arguments to '__import__()'.

            - Return 'QueryResponseFailure' if missing MeowURI.
              Adds returning 'QueryResponseFailure' instead of raising exception.

              Do not raise a 'InvalidMeowURIError' that is almost guaranteed to
              not be uncaught by the caller and propagate too far.
              Instead return an instance of 'QueryResponseFailure' that simply
              evaluates to false.

            - Remove string decoding and test for empty text.

            - Improve finding date/time in the 'FilenameAnalyzer'.
              Cleans up collecting date/time-information from file names.

              Completes TODO-list item [TD0019].

            - Factor out duplicate code in 'dateandtime.py'.

            - Clean up 'match_special_case()'.

            - Make method '_get_title_from_text()' a function.
              Changes '_get_title_from_text()' into 'find_titles_in_text()'.

            - Remove completed TODO-list item [TD0142].

            - Remove unimplemented 'VideoAnalyzer'.
              Removes the non-functional 'VideoAnalyzer' class.

              Also removes TODO-list item [TD0055]'.

            - Remove searching for datetime in 'DocumentAnalyzer'.
              Removes passing back date/time-information using older method.

              This inline wrapping of results dicts in a list does not work with
              the other systems that use 'FIELD_LOOKUP' to wrap values into the
              dicts.  The returned 'value' would be a list of additional dicts,
              which would break systems that receive this data.

            - Remove caching in 'MasterDataProvider'.
              Removes unnecessary caching of repository data.

            - Do not assume at least one analyzer applies.
              This no longer holds after disabling and reworking analyzers.
              It could now very well be that no analyzers applies to a given file.

            - Improve handling of failed imports in epub text extractor.

            - Display failed regression test stdout assertions.

            - Do not return non-zero if name template is unknown.

            - Remove 'FiletagsAnalyzer'. Add 'FiletagsExtractor'.
              Reworks the filetags analyzer into a extractor.

              Functionality should be basically unchanged.
              Because the 'FiletagsAnalyzer' was very simple and did not require much
              of "contextual information" it is arguably better suited as a extractor.

              This was also in part an exercise in evaluating the overall architecture
              and how much friction is involved in creating new extractors.

              MeowURIs 'analyzer.filetags.*' are now 'extractor.filesystem.filetags.*'

            - Remove old-style 'super()' calls.

            - Fix regressions introduced in 353fcd74100d68b6523.
              Fixes regressions introduced when fixing skipping some metadata.

              Changes in commit 353fcd74100d68b6523f17ee7c276c7c8c221dc2 caused
              some of the regression tests that used generic data sources for
              name template fields.
              The changes caused additional valid metadata to be extracted,
              causing the resolver to fail because it could not pick out which
              of multiple possible candidates to use.

              This is now fixed by adding a simple means of picking out one piece
              of data from a list of candidates, based on the hardcoded
              'WeightedMapping' probabilities that is assigned by providers.

              So given a "generic" MeowURI such as 'generic.metadata.title',
              the candidate that has the highest WeightedMapping probability
              to the name template field 'Title' is used.
              The current solution will have to be reworked to work in a general
              case and be less confusing ..

            - Modify 'WeightedMapping' probabilities.
              Modifies the 'ExiftoolMetadataExtractor' field probabilities.

              Arbitrary and immaterial changes related to other unit tests.

            - Move expected text to files.
              Moves expected texts in unit tests to separate files.

            - Do not warn about failed 'FIELD_LOOKUP' assumptions.
              Instead of skipping and printing errors, simply coerce into list.

            - Update alternative unit test runner.
              Adds argument parsing, filtering and showing test run times.

            - Rename unit test path constants. Rework tests.

            - Rewrite integration test case description.

            - Extract whitespace integration tests to script.
              Adds a new script 'devscripts/check_whitespace.sh'.

              Moves some of the test cases in 'tests/integration/test_src.sh'
              to a separate script.
              Checks text file style violations, whitespace, line separators, etc.
              Returns 1 at first failing check. Returns 0 if all checks pass.

            - Have prompt fall back to in-memory history.
              Adds using previously unused 'InMemoryHistory' as fallback.

            - Set up Unicode string encoding boundary in 'ui'.
              Fix handling conversion to Unicode strings before passing to ui.

              Adds assertions and additional unit tests.
              Completes TODO-list item [TD0156].

            - Modify exception throw by 'Renamer.do_rename()'.
              Adds using 'FilesystemError' instead of 'AutonameowException'.

            - Remove unused unit test "mocking" functions.

            - Rename unit test class with duplicated name.

            - Modify string conversion in stand-alone extractor.
              Modifies conversion to Unicode strings in the stand-alone extractor.

              The previous version used the coercer classes format method,
              which returns the value in a form suitable for use in file names.
              However, the repository used another method for converting values to
              displayable (Unicode string) form, which resulted in different results
              printed by 'autonameow --list-all' and the stand-alone extractor.

              Stand-alone extractor:

                  extractor.metadata.exiftool.File:MIMEType    pdf

              autonameow --list-all:

                  extractor.metadata.exiftool.File:MIMEType    application/pdf

              This commit modifies the stand-alone extractor to use the string
              conversion method used in 'Repository.__str__()'.

            - Remove completed TODO-item [TD0150].

            - Update 'test_files/README.txt'.

            - Remove leftover pickled state experiment.

            - Move 'ProviderRegistry._get_generic_sources()'.
              Extracts method '_get_generic_sources()' into a function.

              Method '_get_generic_sources()' is now '_map_generic_sources()'.

            - Reimplement '--list-all'.
              Adds back lost '--list-all' functionality.

              Runs all providers through new functionality added to the
              'MasterDataProvider' and 'provider.py'.
              This might not be the best place to put this, but it was the
              simplest way of solving this without very invasive changes.

            - Disable unnecessary regression tests '--list-all'.

            - Non-functional changes to 'RuleConditionEvaluator'.

            - Refactor 'CrossPlatformFileSystemExtractor'.
              Factors out main extraction routines into separate methods.

            - Remove superfluous 'pass' statements.

            - Uppercase extractor class attribute 'is_slow'.

            - Add partial fixes referencing [TD0112][TD0115].
              Adds using 'listof' for authors. Reworks formatting author fields.

            - Partial fix of messy resolver value deduplication.

            - Rename builtin shadowing 'file' to 'fileobject'.

            - Replace '_meowuri' with 'uri' to not shadow module.

            - Use 'force_meowuri()' to convert str to MeowURI.
              Call 'force_meowuri()' if exceptions message is not interesting.

            - Rename function and update docstrings.

            - Improve robustness of 'MeowURIParser.parse()'.
              Adds fixes and improved robustness to 'MeowURIParser.parse()'.

              Structures of lists and/or tuples nested deeper than one level was
              not handled properly. It now should be able to accept just about
              any combination of arguments, like for instance;

                  mp.parse('a')
                  mp.parse('a', 'b')
                  mp.parse(['a', 'b'])
                  mp.parse(['a', 'b'], 'c')
                  mp.parse(['a', 'b'], 'c', ['d'])
                  mp.parse(['a', 'b'], 'c', (['d'], 'e', ['f', ['g', 'h']]))

              The alternate solution would be to restrict how this method is being
              called to some expected usage, which might actually make more sense,
              but since this is intended to be a user-facing "parser", this extra
              ruggedness is not _entirely_ misplaced.

            - Rework use of the 'ExtractorRunner' class.
              Removes function 'run_extraction()'. Modify data provider.

              Adds creating an instance of 'ExtractorRunner' when instantiating
              the 'MasterDataProvider'. This way the same runner is used during
              the program execution, as intended with the recent changes to the
              'ExtractorRunner'.

            - Remove unused function 'suitable_extractors_for()'.

            - Uppercase module attribute '_master_data_provider'.

            - Always warn if requesting unavailable extractors.

            - Use instance of MeowURI as 'meowuri_prefix'.
              Adds using instances of MeowURI as 'meowuri_prefix' in plugins.
              Refers to [TD0133] on inconsistent use of MeowURIs.

            - Use instance of MeowURI as 'meowuri_prefix'.
              Adds using instances of MeowURI as 'meowuri_prefix' in analyzers.
              Refers to [TD0133] on inconsistent use of MeowURIs.

            - Use instance of MeowURI as 'meowuri_prefix'.
              Adds using instances of MeowURI as 'meowuri_prefix' in extractors.
              Refers to [TD0133] on inconsistent use of MeowURIs.

            - Remove TODO-identifiers from log messages.
              Completes TODO-list item [TD0133].

            - Reimplement not filtering required slow extractors.
              Adds back lost functionality of filtering of "slow" extractors.

              If 'ExtractorRunner.exclude_slow' is true, "slow" extractors that
              are not explicitly requested are excluded.
              Slow extractors, like the 'TesseractOCRTextExtractor' will not be
              included unless explicitly required by including the class in the
              list passed to the 'ExtractorRunner.start()' method.

            - Remove unused function 'filter_meowuri_prefix()'.

            - Remove unused 'keep_slow_extractors_if_required()'.
              Removes leftover function 'keep_slow_extractors_if_required()'.

              This was forgotten and the functionality was left unimplemented
              after adding the 'ExtractorRunner' class in commit
              e28325341ddf892ab8a032e406d835331c93c154.

            - Extract 'MeowURI.matchglobs()' into function.
              Extracts the complex parts of 'matchglobs()' into separate function.

            - Import 'FileObject' from 'core'.

            - Rework the 'ExtractorRunner' class results storage.
              Implement calling a callback when storing results.

              This was partly implemented and probably forgotten.
              This change allows passing the data to something else than the
              "session repository", which will be useful for the stand-alone
              extraction runner.

            - Inline 'get_extractor_runner()'.

            - Use direct imports in unit tests.

            - Remove superfluous 'NameTemplateField.__init__()'.
              Removes unused init in the NameTemplateField class and subclasses.

            - Remove unused 'NameTemplateField.transform()'.

            - Remove unused methods 'evaluation_function()'.
              Removes unused method from 'GenericField' class and subclasses.

              This seems to never have been used in any way.  Original intent
              not clear; best remove and start over with something that actually
              solves actual current problems.

            - Remove unused exception 'ConfigReadError'.

            - Remove unused brute force search.
              Removes (skipped) old brute force search of date/time-information.

            - Add '__slots__' in the 'FileObject' class.
              Since it is used a lot of dict keys, this might be worthwhile.

            - Add 'BaseAnalyzer._evaluate_mime_type_glob()'.
              Moves MIME-type glob evaluation to new class method.

              For possible use by inheriting class.
            - Add class 'FilenameDelta'.
              Adds a new simple container class 'FilenameDelta' in 'renamer.py'.

            - Add new class 'ProviderRunner'.
              Extracts parts of 'MasterDataProvider' into new class 'ProviderRunner'.

            - Include text source in stand-alone extraction.

            - Rework YAML loading functions.
              Extracts function 'load_yaml()' from 'load_yaml_file()'.


            Fixes
            - Add handling 'EOFError' in 'BasePersistence'.
              Adds re-raising both 'ValueError' and 'EOFError' as 'KeyError'.

            - Fix warnings on missing 'multivalued' metainfo.
              Adds missing 'multivalued' entries in 'ExiftoolMetadataExtractor'.

            - Fix crash after 'request_any_textual_content()'.
              Fixes crashing after raising AttributeError when requesting text.

              Caused by assumption that the repository would not return lists of
              'DataBundle' instances. This should be fixed properly in [TD0175].

              Adds regression test '0016_list_all_c'.

            - Fix inconsistent behaviour of replacements.
              Fixes inconsistencies in "post-processing" replacements.

              Solved by doing the replacements in order, starting with the
              longest replacement string. Given replacements:

                  'The'    -> 'the'
                  'To The' -> 'to the'
                  'To'     -> 'to'

              The replacements are done in this order;  'to the', 'the', 'to'

              This same solution could also be used to solve [TD0152].

            - Fix incorrect defaults in integration runner help.

            - Clean up 'cli/common.py'. Add unit tests.

            - Clean up exception handling in 'has_permissions()'.

            - Clean up 'TesseractOCRTextExtractor' unit tests.

            - Use consistent Unicode notation. Cleanup tests.

            - Clean up 'rename_file()'. Add unit tests.

            - Clean up joining paths in 'unit/constants.py'.

            - Minor changes to human-readable repository contents.
              Fixes shadowing variable names and adds numbering generic MeowURIs.

            - Fix path passed through 'syspath()' twice in 'io.delete()'.

            - Fixes bug in mapping persistence keys to files.
              Fixes bugs where some files were not included in 'keys()'.

              Adds using separate function '_basename_as_key()' that does
              proper removal of the "prefix" and "separator", along with testing
              that the basename does in fact start with the "prefix".

            - Fix cache and persistence errors.
              Handles uncaught exceptions related to cache and persistence.

              When changing the format of the pickled data, all sorts of things
              fail.  Some exceptions were not handle properly and others did not
              provide useful information about the exception.

            - Fix crash when running '--dump-meowuris --debug'.
              Fixes crash running '--dump-meowuris --debug'.

              caused by assumption that multiple providers may be mapped
              to a single MeowURI, which is no longer true.

              Also adds sorting the listing within the provider sections,
              separated by newlines.

              Adds integration "smoke tests" to detect this bug.

            - Do not use magic number in regression runner.
              Fixes using a magic number to indicate a captured exception.

              Replaces returning -10 failed tests with setting a boolean attribute
              in the 'TestResults' class. This also includes other changes required
              to facilitate this.

            - Fix bad matching of 'image/vnd.djvu'.
              Fixes 'image/*' matching too many MIME-types in OCR text extractor.

              The 'TesseractOCRTextExtractor' was used for 'djvu' ebooks because
              of the MIME-type glob matching too much. This is fixed by explicitly
              listing different image types.

            - Fix 'BrokenPipeError' when piping to pager.
              Fixes exceptions raised by 'colorama' when piping out to a pager.

            - Fix checking tty before running 'prompt_toolkit'.
              Adds checking that stdin is a tty. Previously checked stdout.

              Even though previous check probably worked most of the time it
              is better to reflect the assertions in 'prompt_toolkit/input.py';

                  class StdinInput(Input):
                      """
                      Simple wrapper around stdin.
                      """
                      def __init__(self, stdin=None):
                          self.stdin = stdin or sys.stdin

                          # The input object should be a TTY.
                          assert self.stdin.isatty()

              One check is also moved so they are all contained in 'prompt.py'
              which works as a wrapper around 'prompt_toolkit'.

            - Fix all analyzers were included in delegation.
              Fixes bug where all analyzers were always included in delegation.

              After noticing a strange slowdown in the regression tests, I ran
              a shell script that produced output like the following;

                  cb9470398cd337a6cee3354d6c0e  0.740039s seconds
                  294250f22443788a31e4df1ab5b2  0.965011s seconds
                  2b254be907ff346fbb94c051769d  0.809683s seconds
                  b6684b494913ddb5cb2cd58f504d  0.726045s seconds
                  8cb8f2309767f924f0349f57d358  0.721611s seconds
                  da980cdcb900ec12751450c4a13f  3.895599s seconds
                  b1c1ceebf786a46c64e4c8c99c1d  4.303069s seconds
                  674b29c702150c28ed16776bb939  3.914098s seconds
                  5e49d04ea4b1d9cf79e48626ec46  4.197412s seconds
                  ba2440aa393034b05988a573f798  4.165075s seconds
                  3faec2cdf2f7cdfe8195c30371b1  4.180260s seconds

              The slowness was introduced after fixing the filtering of "slow"
              extractors, revealing another bug.
              The 'MasterDataProvider' did not pass the list of specific analyzers
              to run which caused the analysis to include all analyzers every time.
              This resulted in running potentially really slow analyzers like the
              'ImageAnalyzer' (that in turn requests data provided by the
              'TesseractOCRTextExtractor') EVERY time that ANY analyzer data was
              requested.

              This is now fixed by simply adding back a commented out line ..

            - Fix exception handling in stand-alone extractor.

            - Remove no-op super-calls in extractor classes.


2018-02-01  [autonameow v0.5.4]
            Start of major overhaul (yes, again..) of overall architecture.
            This version adds some new features and fixes a lot of bugs, does
            cleanups, etc.  Still very much a work in progress. A lot of major
            changes is coming up next.

            Additions
            - Add (WIP) rework of overall architecture.
              Adds initial rework of "data pipeline" as per [TD0142].

              A new subsystem is added to handle top-most level data requests.
              The 'MasterDataProvider' class is not completed. It is intended
              to take data requests passed as a FileObject instance and a
              MeowURI.  (I.E. data for a certain file, matching a certain
              identifier)

              If the data is not stored in the repository, the appropriate
              provider (extractor/analyzer/plugin) should be tasked with
              gathering the data.  If successful, the requested data is stored
              in the repository.  Store any other data, gathered as a corollary
              as well.  E.G. if running 'exiftool' to get a specific field, DO
              NOT discard other fields, keep them to save on calls..

              If the data IS stored in the repository, return it directly.

            - Add option '-l' to the unit runner.
              Adds option for running the tests that failed during the last
              run.  Requires 'pytest'; the runner exits if 'pytest' is not
              available.

            - Add option '--force' to 'delete-python-caches.sh'.
              Adds option to skip the warning prompt when deleting cache files.

            - Add new option '--list-in-sources' to 'todo_id.py'.
              Adds a new flag for listing information on TODOs in the sources.
              Prints id, shortened file path and todo text for any found TODOs,
              sorted by ids.

            - Add 'devscripts/lint_python.sh'.
              Adds 'pylint' wrapper script, configuration file and tests.
              Updates 'devscripts/README.md'. Note that the configuration file
              'pylintrc' still needs some work to be useful.  Currently, the
              amount of messages is just too much to handle.

            - Add new option '--timid' to manually confirm each rename.

            - Implement coercing and formatting multiple values.
              Adds calling coercers format through 'listof()'.
              Example usage:

                formatted_list = types.listof(types.AW_STRING).format(raw_list)

            - Implement 'FileObject' class ordering operators.
              Implements 'FileObject.__lt__()' and 'FileObject.__gt__()'.

              Uses string comparison of the full absolute paths.
              Objects of other types are always "less" than a 'FileObject'.

            - Add "smoke tests" for stand-alone extractor.

            - Add message style "section".
              Adds a new formatting style "section" to the 'msg()' function.
              Also adds missing unit test for the "heading" style.

            - Add various extension/MIME-mappings.
            - Add partial implementation of "timid mode".

            - Add integration tests for text file consistency
              Checks style violations, whitespace, line separators, etc.

            - Add decorator 'log_func_runtime()'.
              Adds decorator function for logging runtime of methods/functions.

            Changes
            - Rename test runner scripts;

                'common_runner.sh'      -> 'run_all_tests.sh'.
                'integration_runner.sh' -> 'run_integration_tests.sh'.
                'unit_runner.sh'        -> 'run_unit_tests.sh'.
                'regression_runner.sh'  -> 'run_regression_tests.sh'.

            - Remove functionality for Linnaeus University course 1DV430;

                - Remove 'run-tests-and-update-wiki.sh'.
                - Remove 'check-wiki-report.sh'.

                - Remove function 'get_timestamp_from_basename()'.
                  Integration test function 'get_timestamp_from_basename()' was
                  used for extracting and reformatting date/time-information
                  from filenames for use as markdown headers in the wiki test
                  reports.

                - Remove exporting 'AUTONAMEOW_WIKI_ROOT_DIR'.
                  Environment variable 'AUTONAMEOW_WIKI_ROOT_DIR', exported
                  from 'setup_environment.sh' is used by various scripts that
                  automated generation of documentation required by the
                  Linnaeus University 1DV430 course.

                - Remove option flag '-u' from 'run_all_tests.sh'.
                  Removes option for adding test reports to the project wiki.
                  If this kind of functionality would ever be needed again, it
                  will be under different circumstances and best be
                  reimplemented from scratch.

            - Add explicit return values from test runners.
              Adds returning exit codes that correspond to tests failing.

            - Add filtering commits in 'update_changelog.py'.
              Adds filtering function 'is_blacklisted()' along with unit tests.

            - Remove version from regression test configs.
              Removes the 'COMPATIBILITY' section and version from config
              files.  Only three regression test cases (probably) need this
              section.  This commit deletes the rest to avoid having to
              continuously update them with every new program version.

            - Use 'file-magic' instead of 'python-magic'.
              Updates the documentation and notes on which "magic" module to
              use.

            - Create 'AUTONAMEOW_TESTFILES_DIR' if missing.
              Adds creating directory for test logs if missing in
              'setup_environment.sh'.

            - Remove 'MultipleTypes.__call__()' default value.
              Makes little sense to forego the tiny bit of provided type
              safety there is..

            - Modify regression runner verbose output.
              Print "PASS" and "FAIL" instead of "P" and "F".

            - Add logging "post-processing" options.
              Adds early return and additional logging of "post-processing"
              options.
              Return early to reduce indentation. Add more logging of loading
              of "post-processing" options from configuration file so that a
              badly named section does not lead to confusion, like what just
              happened to me ..

            - Cleanup 'ProviderRegistry.__init__()'.
              Moves debug logging to separate method. Copy incoming dict.

            - Only run specific analyzer in 'MasterDataProvider'.
              Modifies "delegation" to only run specific analyzers.
              Previously all available analyzers was always executed.
              Now only the loop iteration "provider" should run.

            - Display current file name with interactive prompts.
              Adds current file name to interactive prompts. Various cleanup.

            - Remove unimplemented condition in configurations.
              Removes constantly failing unimplemented conditions with
              "expression", like:

                  'extractor.metadata.exiftool.EXIF:DateTimeOriginal': 'Defined'

              References [TD0015].

            - Factor out 'try_load_option()' to new class.
              Adds a new class 'ConfigurationOptionsParser'.
              Factors out method 'ConfigurationParser._try_load_option()' into
              separate class.
              This seems to break the "0003_filetags*" regression tests but
              ONLY when run all regression tests with the regression test
              runner and not when running the respective command-lines
              manually.  Might be cause to inadvertently sharing state across
              test cases through the regression test runner.

            - Move method '_try_load_persistence_option()'.
              Moves method '_try_load_persistence_option()' to separate class.
              Method is moved to the new 'ConfigurationOptionsParser' class.
              Also adds unit tests and new TODO [TD0160] on improving
              validation and setup of various working directories.

            - Modify output format of stand-alone extractor.
              Modifies formatting to use headings for files, results in
              sections.  Also removes unused option dictionary entry
              'show_version'.

            - Fix MIME-type to extension mapping for 'html.gz'.
              Modifies MIME/extension-map to strip 'gz' from uncompressed HTML.

              Seems like files downloaded (by browsers? wget?) from the web
              uses some part (which?) of the HTTP headers to figure out a file
              extension for the destination filename.

              Seems like files tend to be saved with a 'html.gz' or 'htm.gz'
              extension even though the files are not compressed, which _might_
              have to do with the above mentioned HTTP header information;
              content-type? content-disposition?

            - Refactor 'todo_id.py' and gather more information.
            - Remove unused function 'suitable_plugins_for()'.
            - Show file name with field candidate selection.

            - Modify operating mode conflict resolution.
              Adds reverting to "less safe" defaults in case of conflicts.

              Instead of disabling "batch" if either "interactive" or "timid"
              is enabled, the "batch" mode now overrides any interactive mode.

              I.E. if starting with '--timid --batch', the '--timid' option
              will be dropped. Likewise, starting with '--interactive --batch'
              will ignore the '--interactive' option.

            - Remove broken unit test.
              The 'Autonameow' class should only be used as a context manager.

            - Rework regression test rename assertions.
              Fixes regression tests broken after changed implementation.

              Refer to commit 7680873bb6be9658dc5462a7461018f4c05ccf0a

              Adds TODO [TD0158] on testing the "skipped rename" assertions.

            - Rework regression test monkey-patching.
              Fixes regression test monkey-patching of the rename method.

              Previously, even files that were skipped because the new name was
              equal to the old name was counted as renamed files.  These are
              listed in the regression tests 'asserts.yaml'.

              This commit reworks this to at least solve some of the issues,
              but also causes breakage of existing regression tests that now
              produce false negatives.
              Changing the regression tests to not count a skipped file as a
              rename makes much more sense anyway, so it is a change in the
              right direction.

            - Pass option to 'FileRenamer.__init__()'.
              Moves passing options 'dry_run' and 'mode_timid' to class init.

              Since a single instance of the 'FileRenamer' class is to be used
              during program execution, it might make sense to set it up once.

            - Factor out renaming files to new class.
              Extracts method 'Autonameow.do_rename()' to new class.

              This seemed like a good move while starting to implement "timid
              mode".  Will also probably be useful when implementing "history"
              ability to better track renames and persist changes.

            - Refactor the 'ProviderRegistry' class.
              Removes duplicate methods, completes TODO-list item [TD0147].

            - Refactor finding providers from MeowURIs.
              Completes TODO-list item [TD0147].

            - Query repository from the 'TemplateFieldDataResolver'.
              Adds querying the repository instead of the dynamic data
              provider.

            - Show more regression test information with '-v'.
              Adds showing test descriptions along with names in verbose mode.

            - Remove redundant exception handling.
              Removes redundant exception handling in 'AbstractTextExtractor'.
              These exceptions are either caught by the 'ExtractorRunner'
              caller or only serves to log a warning and re-raise the
              exception, which results in duplicated errors at different log
              levels.

            - Remove catching 'NotImplementedError'.
              Removes except 'NotImplementedError' in
              'ExiftoolMetadataExtractor'.
              This seems to be a leftover from very old code, nothing should be
              able to raise this exception from here. And if this were the
              case, an enclosing try/catch-block in the 'ExtractorRunner'
              catches it.

            - Fix continuous prompts if resolver fails.
              Reworks the brittle interactive section to not loop infinitely.

            - Disable incomplete interactive MeowURI prompt.
              Disables broken MeowURI prompt.
              The preceding 'interactive.select_field()' call returns instances
              of 'FieldDataCandidate' while 'interactive.meowuri_prompt()'
              returns instances of the 'MeowURI' class. Both functions also
              return a singleton 'Choice.ABORT' if the user aborts.

            - Cleanup output of stand-alone extraction.

            - Cleanup 'ISBNMetadata.authors' property setter.
              Inverts conditional. Adds reference to TODO-list item [TD0112].

            - Handle case of malformed authors in ISBN metadata.
              Adds handling a special case of malformed authors in ISBN metadata.

            - Move integration tests between suites.
            - Remove unused 'metainfo()' method parameters.

            - Remove superfluous extractor imports.
              Removes importing 'metadata' and 'text' in 'extractors/__init__.py'.
              This import seemingly does not have any effect and seems to be a
              leftover from experimental changes introduced when restructuring
              the module hierarchy in commit
              0df0ef91f45f6e39aeec15a6a58b09e93281c695.

            - Factor out '_handle_file()' into new class.
              Moves contents of 'Autonameow._handle_file()' to a new class.
              Adds a new class 'FilesContext' in 'core/context.py'.
              The contents of 'Autonameow._handle_file()' is moved to
              'FilesContext.handle_file()' without substantial functional
              modifications.
              This is motivated by future changes, where files within the same
              "context" are handled together in a batch. It also mitigates the
              growing complexity and length of code in the 'Autonameow' class.

            - Rework strings in 'constants.py'.
              Fixes inconsistent use of string constants. Adds tests.

            - Use 'isinstance()' instead of comparing 'type()'.
            - Remove class method 'BaseAnalyzer.__str__()'.
            - Modify 'BaseField.__bool__()'.

            - Have coercion classes to return None by method.
              Modifies implicit None returned by failed type coercions.

              Type coercion classes use common methods to raise exceptions
              in cases of failed coercion and/or normalization;
              '_fail_coercion()' and '_fail_normalization()'.

              This commit adds returning the return value from these method
              (None) instead of the previous implicit returning of None by
              reaching the end of the scope from which the exception raising
              method was called.

            - Simplify return in 'request_any_textual_content()'.
              Simplifies testing if return value is None.

            - Rework mapping provider classes to MeowURIs.
              Consolidates mapping MeowURIs to provider classes.

              Removes functions 'map_meowuri_to_$PROVIDER()' that duplicated
              functionality, now handled by '_get_meowuri_source_map()'.
              The module attribute dicts storing classes under their respective
              MeowURIs are all renamed to 'ProviderClasses' for easier access
              by this new function.
              Also fixes some confusion concerning number of classes mapped to
              a single MeowURI. Two provider classes returning the same
              identifier string from class method 'meowuri_prefix()' is now
              treated as an invalid state, enforced by an assertion.  Adds
              various other fixes and modifications related to these changes.

            - Disable returning datetime from 'DocumentAnalyzer'.
              Disables returning data from '_get_datetime_from_text()'.

              This and possible other other analyzers return results as both
              dicts and lists of dicts all mixed up.
              This should be straightened out and made more consistent.
              The data collection is disabled for now and should be reworked.

              References TODO-list item [TD0102].

            - Disable returning datetime data from 'TextAnalyzer'.
              Disables returning data from 'get_datetime()'.

              This and possible other other analyzers return results as both
              dicts and lists of dicts all mixed up.
              This should be straightened out and made more consistent.
              The data collection is disabled for now and should be reworked.

            - Remove testing as to not clobber mapped classes.
              Removes cautious checks intended to prevent clobbering mapped
              classes.
              The identifier strings returned by the classes are intended to be
              unique so a collision should be treated as a invalid state.

              Adds assertions in place of the removed tests.

            - Cleanup method 'provider_for_meowuri()'.
              Simplifies method 'ProviderRegistry.provider_for_meowuri()'.

              Removes lenient argument handling with assertions and various
              other readability improvements.

            - Remove checking for empty candidates in resolver.
              Replaces test for empty candidates dict with type assertion.

            - Use consistent return values from test runners.
              Adds returning consistent exit codes from test runners.

                EXIT CODES:   0         All tests/assertions passed.
                              1         Any tests/assertions FAILED.
                              2         Runner itself failed or aborted.

              This fixes previous commit that risked overflow and returning
              success (0) if 256 tests/tasks/whatever failed.

            - Modify handling of "generic fields" in analyzers.
              Adds fixes to handling of "generic fields" in analyzers.

              The generic fields were accessed in a try/catch 'AttributeError'
              clause in the repository as to not crash completely when random,
              inconsistent data was passed in.

              Hack fixes in '_add_results()', used by analyzer classes to store
              data in the repository allowed removing the try/catch in the
              repository.  However, this is still in great need of improvements
              and possibly a complete rewrite.

              Adds TODO [TD0146] on reworking "generic fields" and possibly
              bundling multiple fields in some type of "records".

            - Define '__all__' in 'util/misc.py'.
              Should have been added earlier as 'util/__init__.py' imports '*'.

            - Rework imports in 'disk/__init__.py'.
              Replaces specific imports with importing '*' and defining
              '__all__' to control what will be included.

            - Remove unused methods from (WIP) subclasses of 'BaseField'.

            - Rename variable in '__main__.py'.
              Renames ambiguous variable 'path' to 'SELF_ABSPATH'.

            - Add translating strings to generic field classes.
              Modifies specifying generic fields in provider 'FIELD_LOOKUP'.
              Instead of listing the generic field subclasses directly, which
              requires importing the module; specify the generic field classes
              as simple strings and "translate" these to classes in the
              respective provider "runner".
              This might be more robust to future changes and also allows
              further experimentation with reworking generic fields and
              integrating the concept of records.

            - Prefer 'dict()' over '{}' for empty dictionaries.
              Replaces instances of ' = {}' with ' = dict()'.  Motivated by
              easier grepping by differentiating format strings containing '{}'
              from empty dictionary literals.

            - Cleanup 'ProviderRegistry.provider_for_meowuri()'.
            - Cleanup stand-alone extractor.
            - Use '_' for unused variables when unpacking.
            - Remove unused attribute 'Record._weight'.
            - Rename 'lint-bash-scripts.sh' to 'lint_bash.sh'.
            - Rename all 'collect_results()' to 'store_results()'.
            - Move debug logging to 'if __debug__' branches.

            Fixes
            - Assert that third-party functionality is available before use.

            - Add '-t' flag to 'mktemp' calls.
              Adds arbitrary prefixes with the '-t' flag to all calls to 'mktemp'.

              These were not required on my primary MacBook Pro that is running
              macOS High Sierra version 10.13.2 and BSD 'mktemp' dated
              "December 30, 2005".  However, my secondary MacBook Pro runs OSX
              10.9.5 and even though the 'mktemp' man page specifies the same
              date and has the same contents, this version of 'mktemp' errors
              out if not given the '-t' flag and a prefix.

            - Add 'XXX' to 'mktemp -t' template.
              Adds a number of 'X' to the 'mktemp' template.
              This is apparently required by the GNU coreutils v8.25 version.
              From the manpage:

                TEMPLATE must contain at least 3 consecutive 'X's in last
                component.  If TEMPLATE is not specified, use tmp.XXXXXXXXXX,
                and --tmpdir is implied.

            - Unit tests
                - Fix broken unit tests.

                - Fix 'PdftotextTextExtractor' cache test setup.
                  Moves setup of caching speeds out of module scope.

                - Add 'MultipleTypes' type assertion and unit tests.

                - Add unit tests for field parser class attribute.
                - Skip unit tests if 'guessit' is missing. Add assertion.
                - Skip unit tests if 'PIL' is unavailable.
                - Skip unit test if 'unidecode' is unavailable.
                - Skip unit tests if 'isbnlib' is unavailable.
                - Skip unit tests if 'colorama' is not available.
                - Refactor and add missing field parser unit tests.

            - Fix formatting lists of candidate values.

            - Fix bug in configuration parser.
              Fixes default options dict being modified across regression
              tests.  Seems to solve problem of state not fully reset between
              regression test cases caused by various design flaws..

            - Fix inconsistent use of MeowURIs.
              Partial fix. Adds references to [TD0133].

            - Fix invalid generic field class in lookup dict.

            - Fix bug introduced in commit 62690425fc720276314af
              Fix invalid handling of None results in 'FilenameAnalyzer'.

            - Various fixes to (WIP) "streaming" data extraction.
              Have the 'ExtractorRunner' class run only "requested" extractors.

              Previously, it would run all extractors and use any extractor
              classes passed in as the "requested" argument only to override
              any extractors excluded due to being marked as "slow".

              This caused duplicate results to be stored in the repository.
              When the 'MasterDataProvider' was queried for data not in the
              repository, unrelated extractors was executed, resulting in
              unexpectedly duplicated data which messed up following requests.
              It is assumed that the "CrossPlatForm" file system extractor only
              saves one instance of "mime_type", for instance.

              Now the 'ExtractorRunner' runs only explicitly requested
              extractors, also tweaking data structures passed back to
              analyzers after requesting "global" repository data.

            - Fix handling None results in 'FilenameAnalyzer'.
              Fixes data requests returning None being coerced to empty
              strings.

            - Fix regression runner filtering with '--get-cmd'.
              Fixes bug where '--get-cmd' ignored filtering option '-f'.

            - Fix bad method call in stand-alone extractor.
              Providers 'metainfo()' method no longer accepts '*args'.

            - Fix inconsistent format of error log messages.
              Fixes inconsistent inclusion of exception message in log messages.

            - Fix repeated calls to 'displayable_path()'.
              Stores and re-uses result of first call to 'displayable_path()'.

            - Fix not returning correct choice from interactive.
              Fixes not returning expected value when user aborts with ctrl-c.

            - Fix using 'len()' to test if sequence is empty.
              Replaces several instances of 'if len(x) > 0' with 'if x'.

            - Fix mixed types of return values.
              Adds returning consistent types in various functions/methods.

            - Mass removal of unnecessary 'else' after 'return'.
              Fixes a lot of unnecessary 'else'-clauses after 'return'.

            - Fix major bug in 'ExtractedData'.
              Fixes serious bug in 'ExtractedData'. Fix namespace.

              The 'ExtractedData' instances would be shared when called
              multiple times from the same "wrapper_tag_lookup" dictionary.
              This commit adds a hack fix class method that uses 'deepcopy' to
              make a copy of the instance before calling and returning it.

              The type "wrappers" are renamed to "coercers" to avoid namespace
              issues with instances of 'ExtractedData', that also are referred
              to as "wrappers".


2017-12-31  [autonameow v0.5.3]
            Bug fixes, refactoring, some new features.
            A lot of improvements to utility scripts used during development
            as well as various testing tools, runners and actual tests.

            NOTE: This version changes the configuration syntax ---
                  config files written by previous version will *NOT* work!

            See the git log for all changes and detailed descriptions.

            Additions:
            - Add new option '--list-rulematch'.
              Adds a new option to display additional information on rule
              matching.  References TODO-list item [TD0135].

            - Add new post-processing option 'simplify_unicode'.
              Adds a new configuration option to strip Unicode
              accents/diacritics.  This adds a new entry to the
              'CUSTOM_POST_PROCESSING' section;

                  CUSTOM_POST_PROCESSING:
                      simplify_unicode: True

              Current default is True if left unspecified, This option enables
              converting Unicode symbols with accents/diacritics to plain ASCII
              or other equivalents, if possible.

            - Add 'devscripts/vulture.sh'.
              Adds wrapper script for running 'vulture'.

            - Add 'devscripts/todo_grep.sh'.
              Adds a simple grep wrapper for searching the sources for TODOs.

            - Add partial (WIP) still mostly broken interactive field select.

            - Add tests to the "Source Code" test suite.
              Adds testing that certain files are not added to the git repo.

            - Add various new integration tests.
            - Add 'devscripts/lint-bash-scripts.sh'.
              Wrapper for 'shellcheck' for ding static analysis on all bash
              scripts. Uses different settings for certain kinds of scripts.

            - Add human-readable total integration test execution time.
              Display time in hours, minutes and seconds in addition to
              just milliseconds,

            - Add global statistics to the integration runner.
              Adds showing final combined statistics for all test suites.
              Writes intermediate test results to a temporary file in order to
              solve the mess of sharing variables between sourcing/calling
              scripts in various subshells, etc.
              This also disables converting the test results to HTML by calling
              'run_task()' that was removed in a previous commit, leaving this
              use behind.

            - Include release date in output of '-v --version'.
              Also adds TODO-item [TD0145] on automating tasks related to
              releasing new versions, like updating the newly added
              'version.RELEASE_DATE'.

            - Add logging warning of bad 'NAME_TEMPLATES' type.
              Previously, if the config parser got non-dict 'NAME_TEMPLATES',
              they would be silently skipped without notifying the user.
              The user should be notified of bad syntax in their configuration.
              Actually, it would probably be better to fail even more
              explicitly for cases like these.

            - Add (iffy)(WIP) alternative unit test runner.
              Adds a somewhat incomplete alternative unit test runner.
              The new 'unit/__main__.py' allows running the unit tests as:

                  PYTHONPATH=autonameow:tests python3 -m unit

              Compared to the current runner script 'unit_runner.sh', this
              method could include filtering out specific test suites.
              Note that this is still somewhat incomplete, some tests fail
              in mysterious ways, possibly related to paths and mocking.

            - Add option '-f' to integration test runner script.

              Adds a new option '-f' to 'integration_runner.sh'.

                -f [EXP]   Execute scripts by filtering basenames.
                           Argument [EXP] is passed to grep as-is.
                           Scripts whose basename does not match the
                           expression are skipped.

            - Add limiting size of cache files.
              Implements ability to limit the size of cached files.
              Limits are checked every time data is written to the cache,
              which probably should be reworked at some future point.
              When the cache file size exceeds the limit, the n oldest items
              are removed from both RAM and disk. The number n is currently
              half the number of items, so if the cache contains 100 items, the
              50 oldest are removed when the cache file size exceeds the limit.
              It would probably make more sense to check the cache size at
              instantiation or possibly when the cache leaves the scope, using
              the context-manager protocol.
              This completes TODO-list item [TD0101].

            - Add basic statistics on renamed/skipped/failed.
            - And a lot more --- refer to the git log for additional details.

            Changes:
            - Improve and fix the regression runner.
              Adds various improvements and fixes to the regression test runner.
              Modifies existing options and adds additional selection options.
              Command-line use should be simpler and more consistent.

              1. Tests are selected by criteria defined with the "Test Selection"
                 options. If none are given, all loaded tests are selected.

              2. Actions selected with the "Actions to Perform" options are
                 performed on the selected tests.

              Adds option '-f'/'--filter' for selecting tests by matching the
              test name (dirname) with globs, I.E. asterisks matches everything.
              Adds option '--run' that is enabled by default but only executed
              if no other actions are enabled.
              Modifies option '--get-cmd' to no longer accept positional
              arguments, this is now done with the "Test Selection" options.

            - Add caching path computation in 'BasePersistence'.
              Adds storing results of '_persistence_dir_abspath()'.
              Actual speed increase seems to be pretty substantial for repeated
              lookups. Run-time of tests in 'test_persistence_cache.py' halved.

            - Simplify validating config 'NAME_TEMPLATES'.
              Joins checking if defined/empty with the type-check and collapses
              duplicated check for empty strings that raise the same exception.

            - Allow configuration without any rules.
              Removes failing configuration validation if rules are missing.
              Also adds additional regression tests for trivial smoke testing
              configurations containing only the 'COMPATIBILITY' section.

            - 'CUSTOM_POST_PROCESSING' --> 'POST_PROCESSING'
              Replaces configuration section for "post-processing" options.
              Renames section 'CUSTOM_POST_PROCESSING' to 'POST_PROCESSING'.

            - Rename key 'FILESYSTEM_OPTIONS' to 'FILESYSTEM'.
              Renames configuration dict key 'FILESYSTEM_OPTIONS' to
              'FILESYSTEM'.

            - Replace 'NAME_FORMAT' with 'NAME_TEMPLATE'.
              Replaces all instance of "name format" with "name template".
              The configuration name templates was referred to as both
              "name template" and "name format" in the sources, configuration,
              documentation, notes, etc.
              These inconsistencies are now fixed.
              The name template is used to_format_the file name.  And the
              format_of the file name is determined by the name_template.

            - Strip whitespace in config 'NAME_TEMPLATES' keys.
              Fail if the name template key is only whitespace.

            - Print top-level exception tracebacks in the regression runner.
            - Add ability to negate regression runner glob matching filter.
              Modifies the regression runner '-f' option.
              If the glob pattern starts with '!' the matching is negated.

                E.G.  'f*'  matches 'foo' but not 'bar'
                while '!f*' matches 'bar' but not 'foo'

            - Pass '-OO' to interpreter in runner script.
              Adds using Python interpreter option '-OO' in 'bin/autonameow.sh'.
              From 'man python3':

                  -O    Turn on basic optimizations.
                        Given twice, causes docstrings to be discarded.
                  -OO   Discard docstrings in addition to the -O optimizations.

              This change is mostly experimental. Basic measurements show that actual
              performance improvements are marginal at best. While some use-cases run
              10-20% faster with the optimizations enabled, it is still not clear if
              this is worth sacrificing assertions and debugging facilities.
              If one actually was to try to improve the performance, this is not the
              way to go about it.
              The main motivation is rather experimenting with conditional execution of
              (known from profiling) expensive operations in "if __debug__:" conditions.

            - Refactor getting candidates from the resolver.
              Refactors queries to the resolver for field candidates.
              Moves converting the candidates (data dicts) to string representations
              to the resolver class. This also adds returning the values wrapped in a
              'FieldDataCandidate' class. This is currently only used by functions in
              the interactive module.
              This and many related things are **VERY HACKY** and should be reworked.
              At least for now, this prevents crashing.

            - Add/modify MIME-type to extension mappings.
            - Remove use of and sourcing 'common_utils.sh' from the
              integration runner.
              Inlines a modified 'run_task()' that does not attempt to handle
              aborting the running task, because it did not work.
              This also sources the test suite scripts instead of evaluating
              ('eval x') them. This change is part of adding a global counter
              and attempting to solve shared state between all integration test
              scripts in the mess of sourcing/"evaling".

            - Move the 'disk' module to 'util'.
              Moves 'autonameow/core/disk' to 'autonameow/util/disk'.
              Might make more sense to keep functionality related to I/O
              out of the 'core' module.

            - Rename unit test files to reflect package/module hierarchy.

            - Add shared integration test utility function.
              Adds function 'bulk_assert_test()' for less duplicated code.
              One line using this function would replace several multi-line
              statements.
              For example;

                      'bulk_assert_test "/foo/bar" e f r'

              Is equivalent to three separate assertions with messages, etc.
              This should help to clean up a lot of duplicate code in the
              integration tests.

            - Simplify tests by using 'bulk_assert_test()'.
              Replaces multiple assertions with calls to 'bulk_assert_test()'.

            - Add returning from 'sanity'-functions if optimized.
              Adds returning early from 'sanity' functions if not '__debug__'.
              Intended to possibly mitigate the fact that assert statements are
              skipped in optimized mode, but calls to these home rolled
              functions that wrap assertions might not be detected and removed
              properly when running in "optimized" mode.

            - Move test config files to 'test_files/configs'.
            - Show custom replacements only in verbose mode.

            - Complete rework of the 'Configuration' class.
              Moves "parsing"/validation to a new 'ConfigurationParser' class.
              Finishes TODO-list item [TD0014].

            - Refactor field parsers. Add additional unit tests.
              Modifies how field parsers handle validation/evaluation of lists.
              Adds class attribute 'ALLOW_MULTIVALUED_EXPRESSION' that controls
              how validation ('validate()') and evaluation ('evaluate()')
              handles single or lists of expressions.
              A field parser class that has 'ALLOW_MULTIVALUED_EXPRESSION' set
              to False not validate any expression given as lists.
              If 'ALLOW_MULTIVALUED_EXPRESSION' is True, the field parser will
              convert any non-list expression to a list before validation.
              This moves any list checking from the class specific methods
              returned by 'get_validation_function()' and
              'get_evaluation_function()' to the base class 'validate()' and
              'evaluate()' functions, respectively.

            - Rework the 'Rule' class and rule conditions.
              Adds various Changes to rules, rule parsing and rule conditions.
              Allow rules with no conditions. These will always "evaluate true"
              but with zero score (and weight), effectively making them go
              unused.
              This is motivated by simpler testing and moving towards hopefully
              less convoluted code related to parsing and instantiating the
              configuration, rules, rule conditions, etc.
              Less assertions randomly strewn about also makes unit testing a
              bit easier; assuming that a single entity handles validation and
              parsing, a lot of assertions and '__init__()' type-checking can
              be removed.

            - And a lot more --- refer to the git log for additional details.

            Fixes:
            - Add skipping ISBN metadata missing some fields.
              Adds skipping ISBN metadata missing both authors and publisher.
              Also fixes bug where empty authors were not detected properly.
            - Adds various cleanup and fixes to global logging state.
              Shared logging state is still not handled properly. Mocking some
              critical tests works but is a workaround rather than a solution.
            - Add validating boolean configuration fields.
            - Rework exception handling in 'rules.py'.
              Fixes inconsistencies and cleans up rule exception handling.

            - Fix wrong key used in 'maps_field()'.
              Fixes bug in 'maps_field()' due to using the wrong key in dict lookup.
              This is a leftover from when removing the 'ExtractedData' class that
              had a property (or function (?)) named 'field_map'.
              This was simply translated to a dict lookup using a key with the same
              name, but the key actually used by providers was 'mapped_fields', so
              accesses would always fail.
              The function 'maps_field()' would always return False due to this bug.

            - Fix git error messages shown in version info.
              Fixes bug causing git error messages to be included in output
              when running with '-v --version'.

            - Various cleanups and fixes to all bash scripts.
            - Fix 'partition_basename()' returned empty tags.
              Used by the 'FiletagsAnalyzer' to extract tags from filenames.
              Whitespace between tags and the end of the string was not
              stripped correctly which resulted in empty tags being returned.
              This is fixed by stripping whitespace from extracted tags and
              filtering out any None or empty tags.

            - Use direct and/or local imports in unit tests.
            - Remove execute permission from 'autonameow.py'.
              Changes permissions of 'autonameow.py' from 755 to 644.
              Fixes likely leftover from way back when this file contained the
              main entry point to the program.  This file can not be executed
              stand-alone and should not be marked as executable.
            - Fix matching bug in 'devscripts/todo_id.py'.
              Fixes bug where multiple TODO IDs on one line was not found.
              Only the last ID was returned for lines like;

                  given='# TODO: [TD1337][TD1338] Implement baz.',

              This is fixed and new unit tests that verifies the matching.

            - Fix None publishers added by 'DocumentAnalyzer'.
            - Fix whitespace in 'msg()' heading width.
            - And a lot more --- refer to the git log for additional details.


2017-12-04  [autonameow v0.5.2]
            Bug fixes, various refactoring and reworked test code.

            See the git log for all changes and detailed descriptions.

            Additions:
            - Add a lot of missing unit tests.
            - Add additional data validation in types 'format()' methods.
            - Add 'hypothesis'-based tests 'unit/test_property_encoding.py'.
            - Add 'hypothesis'-based tests 'unit/test_property_fieldparsers.py'.
            - Add 'hypothesis'-based tests 'unit/test_property_types.py'.
            - Add option '-c' to 'unit_runner.sh'.
              Adds optional coverage reporting with 'unit_runner.sh -c'.

            - Add function 'get_persistence()'.
              Adds "public" interface for getting a persistence mechanism.

            - Add option '--last-failed' to the regression test runner.
              Adds option for only running tests that failed during the last run.
              Completes TODO-list item [TD0123].

            - Add (WIP) string distance functions.
            - Add improved "fuzzy" ISBN metadata de-duplication.
            - Add blacklisting ISBN numbers that failed metadata queries.

            - And a lot more --- refer to the git log for additional details.

            Changes:
            - Various improvements to the regression test runner.
            - Refactor a lot of the unit tests.
            - Rework structure of the test code.
            - Add 'FilenamePostprocessor' class to 'builder.py'.
              Moves inline procedure post-processing the filename to new class.
            - Removes unused function 'get_abstract_extractor_classes()'.
              Added directories 'tests/unit'. 'tests/integration' to go along
              with 'tests/regression'.

              - Removed common 'unit_test_' prefix from unit test code.
              - Removed 'integration_test_' prefix from integration test code.

              Also modified the integration test "suites" which no longer can
              be executed as stand-alone scripts.

              A lot of scripts are changed due to complications when handling
              sourcing and paths of bash scripts. It is not really possible to
              get the absolute path of the current script that works in all
              cases; running the script from the same directory, using a
              relative path, absolute path, through a symlink, etc..

              This commit adds a simpler solution where one script exports
              global environment variables that are used by the other scripts.
              This is handled by the new 'setup_environment.sh'.

              This new arrangement means that integration test suites no longer
              can be executed as stand-alone scripts.
              The complexity and workarounds just isn't worth the hassle.

              Integration tests should be executed with 'integration_runner.sh'.

            - Remove the 'AnalysisRunQueue' class.
            - Remove the 'GenericQueue' class.
            - Rework running extractors in 'extraction.py'.

              Adds new class 'ExtractorRunner' to 'extraction.py'.

              Reworks filtering extractors, but is essentially the same as the
              now deleted 'start()' function with some filtering functions
              factored out and mostly using sets instead of lists for storing
              the extractor classes.

            - Have 'unit_runner.sh' use 'pytest' if available.

              Modifies 'unit_runner.sh' to use the available test runner.
              Prefer 'pytest' but use 'unittest' if 'pytest' is not installed.

              If running with the '-w' option, 'pytest' as well as 'pytest.html'
              must be installed, otherwise the program exists with status 1 and
              an error message.

            - Add optional path argument to 'get_persistence()'.

              Works around confusion around which persistence path is used.
              Currently inconsistent depending on the use-case..

              If the main 'Autonameow' class sets the active configuration with
              'config.set_active()', any valid persistence path in the user
              configuration file is used.  Otherwise, the default path defined
              in 'constants.py' is used.

              This problem tells of broader architectural issues..
              When calling 'get_persistence()' from 'regression_runner.py',
              before 'config.set_active()' has been called, results in one
              persistence path being used at the start of
              'regression_runner.py' execution and another at the end,
              after having called 'Autonameow' main the first time..

            - Refactor coloring replacements in 'builder.py'.
              Adds refactoring of utility functions and unit tests.

            - Remove the unimplemented 'FilesystemAnalyzer'.

            - Call middle parts of MeowURI "children".
              Renames the 'MeowURINode' class to 'MeowURIChild'
              Changes other usage of a "node" to "child",
              "nodes" to "children".

              The reason is that a "node" probably is a better describes for
              all parts of a MeowURI, which might be joined in an abstract base
              class with this name.
              This is also more similar to basic computer science terminology.

            - Move MeowURI parsing to separate class.
              Extracts parts of the 'MeowURI' class into new 'MeowURIParser'.

            - Add searching full text in chunks in the analyzers.
            - Improve searching for ISBN-numbers in the 'EbookAnalyzer'.

            - And a lot more --- refer to the git log for additional details.

            Fixes:
            - Fix broken import in 'epubzilla.py'.

            - Add type assertion in 'extraction.collect_results()'.
              Asserts that extractors return data of type dict.

              This is pretty much guaranteed by the extensive new unit testing
              of extractors using shared test case base classes.

              Completes TODO-list entry [TD0106].

            - Fix resolver not stopping after finding match.

              Fixes bug caused by a missing 'break' in the resolver.

              This caused the loop that fetches and verifies data for specific
              name template field to go on, overwriting perfectly good data,
              causing the resolver to fail even when the requested data is
              valid and available.

            - Fix bug in name template field 'Tags.format()'.

              Fixes bug in the format method of the 'Tags' template field.

              The format-method worked fine when passed a list of strings, but
              when passed a single string, the string was split up and joined
              with the "between-tag-separator", causing "tag" to become
              "t a g", assuming a single space as "between-tag-separator".

              This commit fixes this by coercing the data to a list of strings.

              Added regression tests '0003_filetags_b' and '0003_filetags_c'
              that demonstrates this failure case.

            - Fix various bugs in field parsers found by 'hypothesis'-tests.

            - Fix bug in 'PdftotextTextExtractor'.
              Crash caused by calling 'strip()' when extracted text is None.

            - Fix bug in 'BaseAnalyzer._add_results()'.
              Fixes bug where lists was nested instead of simply added.

            - And a lot more --- refer to the git log for additional details.


2017-11-18  [autonameow v0.5.1]
            Major refactoring and extensive rework of internals and tests.
            Added new regression test "framework" that will replace most of
            the tests in 'integration_test_rename.sh'.

            See the git log for all changes and detailed descriptions.

            Additions:
            - Add initial deduplication of values in the resolver.
            - Add (WIP) stand-alone content extraction 'bin/extract.sh'.
            - Add regression tests and runner 'tests/regression_runner.sh'.
            - Add 'BaseNullValue' and 'NullMIMEType' classes in 'types.py'.
            - Add verification to 'todo_id.py'.

              Adds additional features to 'todo_id.py'.

              * Adds option flag '-n'/'--next':

                  Print the next free (unused) TODO-list entry identifier.
                  I.E. the previous functionality. This is enabled by default,
                  and so the script can still be used in exactly the same way.

              * Adds option flag '-c'/'--check':

                  Checks that the sources does not contain completed TODO-list
                  entries or entries that are not in the TODO-list. And also
                  that entry IDs in the TODO- and DONE-list are mutually
                  exclusive.
                  Exits silently with status code 0 if all checks pass.

              * Adds option flag '--oprhaned':

                  Print entries that are in the TODO-list but not the sources.

            - And a lot more --- refer to the git log for additional details.

            Changes:
            - Rename 'bin/run.sh' to 'bin/autonameow.sh'.
            - Refactor most extractor unit tests to use shared base classes.
            - Remove the 'ExtractedData' class.
            - Improved readability of log messages.
            - Remove text extractor 'PyPDFTextExtractor'.
              This extractor has been disabled for some time due to poor
              results.  It is now removed. Should probably be replaced with
              some other PDF text extraction method to provide an alternative
              to 'pdftotext' for cases where it is not available.
              But 'pdftotext' will have to do for now.
            - Remove everything related to 'PyPDF2'.
              Removes the 'PyPDFMetadataExtractor' and related.

              Removes the coercion type class 'PyPDFTimeDate' along with other
              code related to 'PyPDF', 'PyPDFMetadataExtractor' and leftovers
              from the previously removed class 'PyPDFTextExtractor'

              This removes the 'PyPDF' dependency entirely, which is reflected
              in 'install.md'.

            - Move package 'util/disk' to 'core'.
            - Move package 'autonameow/core/util' to 'autonameow/util'.
            - Factor out parts of 'Repository' into new 'ProviderRegistry'.
              Adds a new class 'ProviderRegistry' to handle keeping track of
              sources (extractors, analyzers, plugins) and registering partial
              MeowURIs.
              This was all previously handled in the 'Repository' class, which
              should only deal with storing data from now on.
            - Rework mapping MIME-types to extensions with new 'mimemagic.py'.
              Adds a 'MimeExtensionMapper' class in place of directory lookup.
              The new class is meant to provide a better interface to the
              'mimetypes' library as well as functionality for adding preferred
              extensions for specific MIME-types.

            - Remove caching in all text extractors except OCR.
            - Add partial separation of CLI-specifics from UI.
              Adds rework of module/package structure and imports.

              * Replaces calls to 'cli.msg()' with 'ui.msg()'.
              * Moves 'core/options.py' to 'core/ui/cli/options.py'.

              The 'ui' package is intended to provide an interface to any UI.
              Even if this is currently not relevant and future addition of an
              alternative to the only current command-line interface UI, would
              require reworking a lot of stuff due to incorrect assumptions;
              enforcing this separation at this stage improves readability.

              Note that code inside 'ui/cli' that needs to call 'msg()' does
              not call through the interface with 'ui.msg()', but instead uses
              the CLI-specific function 'cli.msg()' directly.

              Code that is outside of 'ui/cli' should call 'ui.msg()'.

            - Refactor constructing 'RuleCondition' instances.
              Moves constructing 'RuleCondition' instances outside of 'Rule'.
            - Remove 'BaseExtractor.__call__()'.
              Calling extractors like this no longer makes much sense when
              moving to separate methods of accessing the extracted data
              through 'extract()' and the additional information through
              'metainfo()'.

            - Remove 'sanity.check()'.
              Replaces uses of 'sanity.check()' with 'assert'.

              While cute, this function does not add any additional value and
              serves only to add unwarranted indirection and complexity.

            - Remove 'sanity.check_isinstance()'.
              Replaces uses of 'sanity.check_isinstance()' with assertions.

              Adds catching 'AssertionError' in the top-most exception handler.
              The 'AWAssertionError' class should probably be removed as it is
              now only used when inherited from by 'EncodingBoundaryViolation'.

            - Add 'cli/argparser.py'.
              Moves modifying the 'argparse.ArgumentParser' to a new file.

              Adds a shared public interface for getting the modified argument
              parser.  Avoids duplicating code in the autonameow 'options.py'
              and future changes to the regression test runner main.

            - Move 'BaseAnalyzer' and 'AnalyzerError' to new file.
              Adds a new file 'analyzers/common.py' to mirror the extractors.

              Moves classes out of '__init__.py' to a separate for consistency
              with the structure used by the extractors.

            - Modify analyzer run queue priorities.
              Prioritizes analyzers to run that providers of often used data
              first.
              This ranking is probably not even necessary and should be
              removed, but seeing as it is still here it might as well be a
              bit more sensible.

            - Remove passing analyzer results through callbacks.
              Completes TODO-list item [TD0122].

              Replaces the callback-method with returning results stored in an
              instance attribute dict 'results'.

              The 'run()' method is reworked to call a new method 'analyze()'
              that does what 'run()' did previously, and then return the
              results.

              This changes is motivated by making it easier to follow what is
              going on and simplify the overall workings of the results
              collection, that is currently undergoing various refactorings.

            - And a lot more --- refer to the git log for additional details.

            Fixes:
            - Various bugs in the resolver causing crashes.
            - A lot of miscellaneous cleanup, removal of dead code, etc.
            - Modify returned value for empty 'FileObject' parts.
              Returns empty bytestrings for missing 'FileObject' parts.

              File name parts 'basename_prefix' and 'basename_suffix' now
              return empty byte strings instead of None for files that do not
              have the relevant part(s). That is, for instance; 'empty' has no
              extension.

            - Fix multiple sources was overwritten.
              Adds temporary fix to bug where multiple MeowURIs was clobbered.

              Multiple sources for a name template field in the configuration
              file would not be properly parsed in 'config/rules.py'.
              Only the last source would be used, clobbering the previous.

              This commit fixes this by storing the MeowURI sources in a list,
              which also required changes in the "resolver". These changes is
              temporary in that the resolver is a terrible mess, and must be
              cleaned up and/or rewritten in conjunction with reworking usage
              of the 'ExtractedData' class.
            - Catch exceptions thrown by failed imports.
            - And a lot more --- refer to the git log for additional details.


2017-10-23  [autonameow v0.5.0]
            Various bug fixes and refactoring.

            NOTE: This version changes the configuration syntax ---
                  config files written by previous version will *NOT* work!

            Additions:
            - Add datetime field '{year}'.
              Completes TODO-list item [TD0038].
            - Extend and improve the 'MeowURI' class.
            - Add skipping invlaid exiftool metadata entries.
            - Add arbitrary max limits to bruteforce searches.
              Limit set by 'MAX_NUMBER_OF_RESULTS' in 'dateandtime.py'.
            - Add new extractor 'EpubMetadataExtractor'.

            Changes:
            - Add sorting authors when formatting the template field.
            - Use 'MeowURI' class functionality as per [TD0105].
            - Add caching '__str__' in the 'MeowURI' class.
            - Refactor unit tests.
            - Restructure source files, module/package hierarcy.
            - Improve parsing robustness in the 'MeowURI' class.
              Add a lot of improvements and fixes to the 'MeowURI' class.
              Add new stand-alone verification functions and a lot of unit
              tests.

            - Refactor main program entry point.
              Separates the CLI-specific main entry from the "real" main entry.

              Adds a new function 'real_main' that will be the _actual_ program
              entry point.

              This function is intended to be platform/interface-agnostic, in
              that it should be called by an outer interface-specific layer;
              like the CLI entry function 'cli_main'.
              The passed in options are also in an internal format (dict) as to
              not depend on any means of providing program options; argument
              parsers, etc.
              Default options are now defined in 'real_main' and checking
              option combinations is also handled here.

              This change also separates the 'argparse' CLI argument parsing
              from initializing the logging system.

            - Disable the 'PyPDFMetadataExtractor'.
              PyPDF somehow overrides default warning systems. Disable for now.

              It seems very difficult to disable warning messages emitted by
              PyPDF2 due to the way the library is designed. This, combined
              with the overall poor performance and the fact that the project
              is currently "unmaintained in the short term", this extractor is
              now disabled.

            - Add running all plugins if using '--list-all'.
              This works like the inclusion of "slow" extractors.
              Plugins that are referenced in the configuration are included.
              If any results should be displayed, as when running with the
              '--list-all' option, all available plugins are included.

            - Modify conventions for importing utility modules.
                - Use 'import genericfields as gf'.

            - Add new package 'cli'
              Move contents out of 'core/ui/cli/__init__.py'.
              Adds new file 'core/ui/cli/common.py'.

              Moves contents of 'core/ui/cli/__init__.py' to
              'core/ui/cli/common.py'.

              This package is intended to be the interface to multiple
              containing sub-packages that each implement different UIs.

              There is currently only a command-line interface, so this
              interface does not exist. BUT it might be good to implement the
              interface only once another UI is added and the real use and
              requirements are better known anyway.

            - Add new package 'disk' and split up utility functions.
            - Add sorting by MeowURIs when listing repository contents.
            - Add partial implementation of handling coercing lists.
            - Rework persistence and caching system.
            - Modify rule prioritization algorithm.
            - Wrap URIs from non-core with the 'MeowURI' class.
              Completes [TD0105] on integrating the MeowURI class.

            Fixes:
            - Fix 'git_commit_hash()' returning errors when PWD not in source
              root.  Adds temporarily changing the current working directory
              before running the Git subprocess that fetches the currently
              checked out commit.
            - Abort when stdin/stdout is not a TTY. Fix broken tests.
            - Fix crash due to uncaught 'PermissionError' in 'get_files_gen()'.
            - Handle crash in 'format_name_lastname_initials()'.
              Handles crashing because of unhandled 'IndexError'.
              This was caused by the author name "Steve Anson ... [et al.]".
              The periods would be stripped, leaving the empty string that
              would cause the 'IndexError' when accessing to get the first
              character.
            - Fix detecting compound last names in target format.

            - Fix crash. Add 'multivalued' to 'ExtractedData'.
              Fixes crashing (sanity check failure) when formatting tags.

              The name template field 'tags' is assumed to be a list, enforced
              by a sanity check assertion. This failed when the filename
              analyzer passed a single tag to the results.

              This is fixed by modifying the 'ExtractedData' class to allow
              coercing "multivalued" data. The relevant methods in the name
              builder and template field classes are also modified to handle
              multiple values differently; instead of passing a list of
              'ExtractedData' instances, a single instance of 'ExtractedData'
              now can contain a list of data.

            - Fix expression validation bug.
              Fixes bug where a valid boolean False would fail validation.

            - Fix uncaught exception when reading bad epub zip-files.
            - Fix auto-detecting coercer-class from a list of data.
              Assumes that all list entries are of the same type, which is very
              obviously incorrect a lot of times, but works good enough in
              practice.


2017-10-10  [autonameow v0.4.9]
            Includes changes to the configuration file syntax as well
            as refactoring and various fixes of existing functionality.

            Additions:
            - Add additional MIME-type to extension mappings.
            - Add 'util/checksum.py' with hashing functions.
            - Add attribute 'bytesize' to the 'FileObject' class.
              The attribute is evaluated only at first access, storing the
              result for future access.
              Uses 'UNKNOWN_BYTESIZE' if the stat-call fails, which might not
              be such a good idea ..
            - Modify hashing 'FileObject' instances.

              Adds using the "partial" cryptographic hash when hashing
              instances of 'FileObject'.

              When combined with the other attributes used in computing the
              hash, this addition greatly reduces the risk for unwanted hash
              collisions in practical usage.

              Although, this should probably still be extended with the WAY
              WAAY SLOWER method of hashing the entire file for critical
              applications.

            - Add 'makedirs()' to 'diskutils.py'.
            - [TD0103] Add class 'ISBNMetadata' to do ISBN "de-duplication".
            - Add 'remove_ignored_textlines()' to 'analyze_ebook.py'.
            - Implement 'get_edition()' in the 'FilenameAnalyzer'.
              Returns any found editions as integers wrapped in 'ExtractedData'
              instances.  This should be consolidated with similar pattern
              matching of probable editions in plain text done in the
              'EbookAnalyzer'.
            - Add attribute 'hash_partial' to 'FileObject'.
              This could be used for non-critical comparisons and generating
              practically unique identifiers. The only reason for hashing only
              parts of the files is performance.
            - Implement 'delete()' in the 'BaseCache' class. Adds tests.
            - Bind configuration field parsers to "generic" fields.
            - [TD0097] Add changing persistence options in the config.
              Adds a new section to the configuration file.

              This new section allow specifying paths for the caching system as
              well as the interactive prompt history.

                  PERSISTENCE:
                      cache_directory: null
                      history_directory: null

              If omitted or left empty, default values will be substituted.

              NOTE: Default values are always '/tmp/autonameow_cache' and
                    should be made platform-independent at some point.

            Changes:
            - Modify format of '--dump-meowuris' output.
            - Factor out getting MeowURI parts from modules.
              Moves getting MeowURI parts to functions with added
              error-checking.
            - Pass extractors 'FileObject', not bytestrings.

              Replaces bytestring extractor sources with instances of
              'FileObject'.
              Extractors have been passed sources as absolute bytestring paths.
              The 'FileObject' instance has the equivalent absolute path stored
              as an attribute, and hopefully provides additional advantages.

              This is motivated by replacing identifiers used by the caching
              system as keys into the cached data. When the extractors were
              passed only an absolute path to the source, they would have to
              make an extra call to get some kind of checksum from the path, to
              use as the cache key.

              By passing instances of 'FileObject', a reused method for getting
              a file hash can be utilized. This is probably the '__hash__'
              method or a separate hashing method in the 'FileObject' class.
            - Refactor unit tests.
            - [TD0098] Use 'FileObject' hash as cache keys.

              Fixes cache using absolute paths as keys when storing data.

              Adds using hashes provided by 'FileObject' as keys when caching
              data.  Replaces bytestring extractor sources with instances of
              'FileObject'.

              Extractors have been passed sources as absolute bytestring paths.
              By passing instances of 'FileObject', their hashing methods are
              implicitly utilized.

              This reduces the risk of retrieving wrong data from the cache,
              which could happen quite frequently with the old method,
              considering how for instance downloaded files often end up in the
              same directory, using some default basename.

            - Simplify output of '--version'.
              Now prints the bare version if not running with '--verbose'.

            - Add new section 'NAME_TEMPLATE_FIELDS' to config.

              Adds a new section 'Name Template Fields' where the user can list
              known good candidates for fields along with search patterns.

              For instance, the publisher field lists user-defined book
              publisher names along with a list of patterns that if matched,
              would be replaced with the publisher name.

              The default configuration contains the new section:

                  NAME_TEMPLATE_FIELDS:
                      publisher:
                          patterns:
                              FeedBooks:
                              - This book is brought to you by Feedbooks
                              - http://www.feedbooks.com
                              ProjectGutenberg:
                              - Project Gutenberg
                              - www.gutenberg.net

            - Add searching text for publisher in 'DocumentAnalyzer'.
              Adds searching with 'NAME_TEMPLATE_FIELDS' patterns.
              Uses the user-defined patterns in the configuration file.
              Example;

                  NAME_TEMPLATE_FIELDS:
                      publisher:
                          candidates:
                              ProjectGutenberg:
                              - Project Gutenberg
                              - www.gutenberg.net

              The publisher 'ProjectGutenberg' would be used if the document
              text matches any of specified patterns when used as
              case-insensitive regular expressions.

            - Add passing the 'Configuration' instance to all analyzers.
            - Modify configuration syntax and default config.
              Replaces name template field section 'patterns' with
              'candidates'.
            - Add skipping exiftool tags in 'IGNORED_EXIFTOOL_TAGNAMES'.
            - Replace paths with 'FileObject.hash_partial' in log messages.
            - Start integrating the 'MeowURI' class.
              Modifies configuration parsing to use 'MeowURI' instances.

              Adds (WIP) integration of the 'MeowURI' class.
              This should provide a couple of benefits:

              1. All MeowURI validation is handled by the class.
                 It is currently spread out everywhere, a lot of type-checking
                 and tests can probably be removed if the concept of a MeowURI
                 is well encapsulated by the class.
              2. Remove hardcoded strings.
                 Makes for hopefully easier future syntax changes.
              3. Better introspection, the MeowURIs themselves provide
                 information on what kind they are, what kind of resources they
                 refer to, etc. Should mean less redundancy.

              This commit also includes a bunch of other changes due to the fact
              that a lot of the unit tests had to be modified after these changes.
            - Move ordinal regular expressions to 'textutils.py'.
              Adds utility function 'compiled_ordinal_regexes()'.

              Adds utility function for getting compiled regexes for matching
              ordinals to 'textutils.py' and removes similar patterns from
              'analyze_filename.py'.

            Fixes:
            - Add various fixes and cleanup 'analyze_document.py'.
            - Add sanity checking types in 'Resolver'.
            - Fix crashing due to missing None-checks in 'FilenameAnalyzer'.
            - Improve robustness of 'unit_utils.py' functions.
            - Improve the caching system init and error handling.
              Adds creating the cache directory if it does not exist.
              Fixes uncaught 'CacheError' and  modifies the using extractors to
              not abort the extraction if the cache is unavailable.
            - Remove 'deepcopy' of rules in 'RuleMatcher'.
              This was necessary when the 'Rule' class kept scores and other
              state that would be modified between 'RuleMatcher' evaluations of
              different files. This is no longer the case, so this should not
              be needed and does in fact not seem to be needed after a cursory
              glance.
            - Fix 'ColumnFormatter' max column width.
            - Cleanup name formatting functions in 'textutils.py'.
            - Fix bug in calculating probability in 'DocumentAnalyzer'.
            - Add workaround for [TD0084] in 'exiftool.py'.
            - Disable adding redundant results in 'DocumentAnalyzer'.
              References TODO-list item [TD0102].
            - Add reworked (still somewhat WIP) 'pre-assemble-format'.
            - Fix bugs in searching filenames for probable editions.


2017-10-05  [autonameow v0.4.8]
            Adds first implementation of an "interactive" mode with a
            MeowURI-prompt. Contains major rework of the 'Resolver' and
            high-level program flow, which is still a work in progress.

            NOTE: This version changes the configuration syntax ---
                  config files written by previous version will *NOT* work!

            Additions:
            - Initial implementation of an interactive mode based on the
              'python-prompt-toolkit'.
            - Add custom assertion "sanity checks" that raises a special kind
              of exception intended for bug reports.
            - Initial abstraction of "MeowURIs" in the 'MeowURI' class.
            - Add Git submodule 'python-nameparser' to 'thirdparty/nameparser'.
            - Add functions to format full names to "LAST_NAME, initials".

              Example:  "Gibson Cat Sjöberg" is returned as "Sjöberg G.C."

              The 'format_name_lastname_initials' Function formats single names
              and 'format_names_lastname_initials' formats and sorts lists of
              names lexicographically.

            - Add color highlighting "post-processing replacements".

              Refactors 'colorize_quoted' into a more general function
              'colorize_re_match' that adds colors to parts of text that
              matches a given compiled regular expression.

              Modifies 'colorize_quoted' to simply pass 'colorize_re_match' a
              regular expression that matches anything within quotes.

            - Add utility 'ColumnFormatter' class to 'cli.py'.
              Utility formatter for printing columns of string.
              All column widths are set to the widest entry in any column.

            - Adds a new command-line option '--dump-meowuris'.

              Dump all MeowURIs registered to the "Repository" at startup.
              Some sources require explicit inclusion and might therefore not
              be included. Combine with  "--debug" for more information.

            - Add caching system with pickle-backend.
            - Add caching ISBN metadata requests.
            - Add caching text extracted by the 'PdftotextTextExtractor'.
            - Add caching text extracted by the 'PyPDFTextExtractor'.
            - Add caching text extracted by the 'TesseractOCRTextExtractor'.
            - Add new generic fields.
              'GenericAuthor',  'GenericPublisher' and 'GenericHealth'

            - Add a new extractor class 'JpeginfoMetadataExtractor'.

              Returns a new type of generic field; 'health', that represents
              the integrity or 1/corruption of a file as a float in range 0-1.

              It also returns a related boolean result 'is_jpeg' that could be
              used to verify file types, ensure quality and detect corrupt
              files.  Which is very useful when dealing with jpegs ..

            - [TD0042] Implement the '--quiet' option.
            - Add 'devscripts/write-default-config.sh'.
              Script for writing the default configuration to YAML-file.
              Writes the config in 'core/config/default_config.py' to
              'test_files/default_config.yaml'.

            Changes:
            - Modify the configuration file format in a non-trivial way.

              Adds storing the 'Rules' in a dictionary instead of list.
              The new dictionary is keyed by the old 'description'-field.

              Example of the OLD format:

                  RULES:
                  -   CONDITIONS:
                          extractor.fs.xplat.basename.full: foo_pdf.md.pdf
                      DATA_SOURCES:
                          extension: extractor.fs.xplat.basename.extension
                      NAME_FORMAT: foo_pdf.md.{extension}
                      description: test_files foo_pdf.md.pdf
                      exact_match: true
                      ranking_bias: 1

              Example of the NEW format:

                  RULES:
                      test_files foo_pdf.md.pdf:
                          CONDITIONS:
                              extractor.fs.xplat.basename.full: foo_pdf.md.pdf
                          DATA_SOURCES:
                              extension: extractor.fs.xplat.basename.extension
                          NAME_FORMAT: foo_pdf.md.{extension}
                          description: test_files foo_pdf.md.pdf
                          exact_match: true
                          ranking_bias: 1

              This should make the configuration file easier to read for humans.

            - Moves 'autonameow_version' to a new section in the config.
            - Modify contents and formatting of '--version' output.
            - [TD0081] Add 'pyexiftool' as a Git submodule.
              Replaces 'wrap_exiftool.py' with a 'pyexiftool' submodule.
            - Add convention of importing 'constants.py' as 'C'.
            - Rename constant variables in 'constants.py'.
            - Remove the 'AbstractMetadataExtractor' class.
              Modify 'ExiftoolMetadataExtractor' and 'PyPDFMetadataExtractor'
              to inherit directly from 'BaseExtractor' class.
            - Move 'ExtractedData' to new file 'extracteddata.py'.
            - Various changes to how "sources" register "MeowURIs".
            - Prepend 'extractor' to the 'ExiftoolMetadataExtractor' MeowURI.

                  Previous MEOWURI_ROOT = 'metadata.exiftool'
                   Current MEOWURI_ROOT = 'extractor.metadata.exiftool'

            - Modify overall handling of "MeowURIs".

              Instead of hard-coding a "MEOWURI_ROOT" in the source classes,
              this new method uses the Python module hierarchy to construct
              default MeowURIs.

              It is still possible for source classes to override either parts
              or the entire MeowURI.

              The new convention is to always include the type of sources in
              "source-specific" MeowURIs.

              The first part is either 'extractor', 'plugin' or 'analyzer'.

              Example:  'extractor.metadata.exiftool.EXIF:DateTimeOriginal'

              This makes a clear distinction between the specific MeowURIs and
              the "generic" URIs, which will be simpler; 'metadata.DateCreated'

            - Refactor retrieving paths in 'diskutils.py'.

              Substitutes 'get_files' with the similar generator version
              'get_files_gen'.

              Adds a new class 'PathCollector' to store the "globs" that are
              to be converted to bytestrings". The class was intended to act
              as a container or encapsulated namespace.

            - Refactor configuration parsing and validation.
            - Add new 'namebuilder' package.
              Move 'namebuilder.py' to 'namebuilder/builder.py'.

            - Separate name template fields from "generic" fields.

              Moves the content from 'core/fields.py' and moves it to the two
              new files 'namebuilder/fields.py' and 'model/genericfields.py'.

              The original 'core/fields.py' is deleted.

            - Add initial implementation of verifying name template data.

              Adds checking if subclasses of 'NameTemplateField' is
              "compatible" with data collected by the resolver.
              This is part of moving towards providing the name builder with
              validated data.
              The name template field classes attribute 'COMPATIBLE_TYPES' list
              the "coercion"/type-wrapper types whose data format can be used
              to populate the relevant field.

            - Modify default configuration.
              Moves options from section 'FILESYSTEM_OPTIONS' to "post-processing".

              Moves the following options from the 'FILESYSTEM_OPTIONS' section:

                  'lowercase_filename': False,
                  'uppercase_filename': False,
                  'sanitize_filename': True,
                  'sanitize_strict': False

              .. to the 'CUSTOM_POST_PROCESSING' section.

            - Modify "generic" MeowURIs.

              Renames constants for MeowURI roots. Adds 'MEOWURI_ROOT_GENERIC'.

              Modifies the format of "generic" MeowURIs from the previous
              'metadata.generic.author' to 'generic.metadata.author'.

            - Split PDF text extractors into separate files.

              Separates 'pdf.py' into 'pypdf.py' and 'pdftotext.py'.

              In order to fit with the current scheme of devising MeowURIs from
              the module/package names in the hierarchy, these two extractors
              should be separated into different files.

              This makes source-specific queries possible, I.E.
              'extractor.text.pypdf' or 'extractor.text.pdftotext'; which was
              previously impossible because the query 'extractor.text.pdf'
              would return text produced by either of these two extractors.

            - Refactor unit tests add shared utility functions.
            - Rename 'PyPdfTextExtractor' to 'PyPDFTextExtractor'.
            - Rework how data is passed from/to analyzer classes.
            - Rename 'ImageOCRTextExtractor' to 'TesseractOCRTextExtractor'.

              Renames the source file from 'ocr.py' to 'tesseractocr.py'.

              Part of moving towards the new scheme of devising MeowURIs from
              the module/package names in the hierarchy.

              The new names distinguish this exact extractor, as opposed to the
              old names that was intended to work with any OCR backend.

            - Disable 'PyPDF2' text extraction because of poor results.
            - Modify colors, content and formatting of many messages.
            - Add method 'as_string' to 'ExtractedData'.

              This works around having to "round-trip" like so:

                  assert isinstance(ed, ExtractedData)
                  s = ed.coercer.format(ed.value)

              Now this does the same thing:

                  assert isinstance(ed, ExtractedData)
                  s = ed.as_string()

            - Add new package 'ui'. Move 'cli.py'.
            - Add returning probable extensions from 'FilenameAnalyzer'.

            Fixes:
            - Return None from 'Configuration.get()'.

              Replaces raising 'KeyError' with returning None for bad accesses.

              Fixes bug causing program crashing when the name builder calls
              'config.get(['CUSTOM_POST_PROCESSING', 'replacements'])' and the
              configuration file does not contain these sections.

              The configuration usually substitutes default values to prevent
              this, but in this case it really should be up to the user to
              decide if any substitutions should be made.

            - Fix serious bug in 'ExtractedData'. Fix namespace.

              The 'ExtractedData' instances would be shared when called
              multiple times from the same "wrapper_tag_lookup" dictionary.

              This commit adds a hack fix class method that uses 'deepcopy'
              to make a copy of the instance before calling and returning it.

              The type "wrappers" are renamed to "coercers" to avoid namespace
              issues with instances of 'ExtractedData', that also are referred
              to as "wrappers".

            - Add various fixes to the 'GuessitPlugin'.
            - Add various fixes to the 'MicrosoftVisionPlugin'.
            - Add handling more date/time-information returned by 'exiftool'-
            - Fix crashing when some dependencies are unavailable.
            - Fix bugs in the type coercion classes.
            - Fix bugs and improve performance of the 'filter_paths' function.
            - [TD0086] Use one "SessionRepository" per autonameow instance.

              Adds a 'RepositoryPool' class to handle repositories.

              The active repository is registered to the start time and process
              ID registered by the 'Autonameow' class.
              This solution is pretty overkill but does solve the problem.
            - Fix various bugs and improve robustness of configuration parsing.
            - Prevent 'Resolver' adding sources for unused template fields.
            - [TD0004] Clean up text decoding.

            - Fix unhandled exceptions in 'populate_name_template'.
              Adds catching 'TypeError' at the call-site.
              The try/catch-block around 'name_template.format(**kwargs)' does
              not seem to catch any 'TypeError' exceptions caused by the
              keywords in kwargs not being Unicode strings.

            - Fix invalid data requests to generic text.
              Changes generic text content requests to 'contents.generic.text'.
            - Fix analyzers not expecting instances of 'ExtractedData'.
            - Fix crash due to missing None-check in 'pdftotext.py'.
            - Fix missing 'MEOWURI_LEAF' attribute in plugins.
            - Fix incorrect validation in the MIME-type field parser.


2017-09-20  [autonameow v0.4.7]
            Added custom "post-processing" replacements and case-changes.
            Bugfixes and refactorings.

            Additions:
            - Implement type wrapper classes 'format' methods and remove the
              'formatter' keyword argument.
            - Add generic fields.
            - Add improved date/time-parsing with utility functions.
            - Improve argument validation robustness for user-facing functions.
            - Add a new option for transforming filenames to all lower-case.

              Adds new configuration field under 'FILESYSTEM_OPTIONS'.

                  FILESYSTEM_OPTIONS:
                      lowercase_filename: false

              Default value is false.
            - Add option for transforming filenames to all upper-case.

              Adds new configuration field under 'FILESYSTEM_OPTIONS'.

                  FILESYSTEM_OPTIONS:
                      uppercase_filename: false

              Default value is false.

              If both 'uppercase_filename' and 'lowercase_filename' is enabled,
              then 'uppercase_filename' is (not really) arbitrarily ignored.
            - Add user-specified "post-processing" replacements.

              Uses pairs of regular expressions patterns and replacement string
              to perform last-minute replacements on the new file name.
              Example:

                  CUSTOM_POST_PROCESSING:
                      replacements:
                          \-\{2,\}+: '-'
                          \.{2,}: .
                          o[tk]: MEOW
                          gmail: mjaomjao

              1-2) Collapses repeating dashes and periods, respectively.
                3) Replaces either 'ot' or 'ok' with 'MEOW'.
                4) Replaces 'gmail' with 'mjaomjao'.

            Changes:
            - Add a new "to-string" method in the 'Repository' class.
              Means that the '--list-all' formatting has changed.
            - Modify text extractors 'meowuri_root' and common return method.

              The repository 'store' method (and '_store' method) handles too
              many specific cases, this is part of an effort to have non-core
              components use a more consistent format for the data to be
              stored.

              Instead of having the 'meowuri_root' be
              'contents.textual.raw_text' and returning the data "as-is" from
              the 'AbstractTextExtractor.excute()' method, this commit modifies
              the 'meowuri_root' of all text extractors to 'contents.textual'
              ('contents.visual' for the OCR-extractor..) and adds returning a
              dict from the 'AbstractTextExtractor.excute()', with 'raw_text'
              as the only key.
            - Modify the "MeowURIs" used by text extractors.

                  Previously:  'contents.textual.raw_text'
                  Changed to:  'contents.textual.text.full'

            - Modify terminal color scheme.
            - Rename 'PdfAnalyzer' to 'DocumentAnalyzer'.

              Having filetype-specific analyzers no longer makes any sense.
              The analyzer classes have been left behind while the overall
              overarching goals and surrounding architecture has changed.
            - Move getting a Unicode str representation of fields.

              Instead of having the 'Resolver' class gather data and then do
              formatting by calling the bundled wrapper and other contextual
              information, it should be more appropriate to let the "name
              builder" perform all formatting-related operations, as the name
              builder has access to user-defined formatting options.  Also, the
              name builder already performs very similar actions --- they
              should be consolidated and kept in one place.
            - Modify public 'Configuration' interface.

            Fixes:
            - Do not "rebuild magic" at every MIME-type test.
            - Improve reading version number from config.
            - Fix bugs in the utility function 'eval_meowuri_glob'.
            - Various fixes to 'Repository' methods.
            - Fix logic error in 'decode_raw' that effectively disabled it.
            - Fix crash when missing datetime-formatting options.

              Adds falling back to default 'DATETIME_FORMAT' options.
              If the configuration file did not specify the following options;

                  DATETIME_FORMAT:
                      date: '%Y-%m-%d'
                      datetime: '%Y-%m-%dT%H%M%S'
                      time: '%H-%M-%S'

              .. the program would crash because no default values were used.
              If any of the 'DATETIME_FORMAT' options are missing, the
              following defaults, defined in 'constants.py', will be substituted:

                  DEFAULT_DATETIME_FORMAT_DATETIME = '%Y-%m-%dT%H%M%S'
                  DEFAULT_DATETIME_FORMAT_DATE = '%Y-%m-%d'
                  DEFAULT_DATETIME_FORMAT_TIME = '%H-%M-%S'
            - Add 'PIL' to 'ImageOCRTextExtractor' dependency checks.
            - Fix intermittent bug in getting extension from MIME-type.


2017-09-11  [autonameow v0.4.6]
            A lot of refactoring for improved robustness and stability.
            Removes the 'pytesseract' dependency. Adds dynamic handling of
            missing dependencies.  Major rework of extractors and plugins.
            Refer to the git log for additional details.

            Additions:
            - Add new analyzer class 'EbookAnalyzer'.
            - Add git submodule 'epubzilla' for handling epub-files.
              This is still WIP, and will reqire a lof of fixing before use..
            - Add checking extractor class dependencies.
            - Add extracting timestamps in 'CommonFileSystemExtractor'.
            - Add improved logging system.
            - Add new analyer class 'FiletagsAnalyzer'.
            - Add mapping "sources" (plugins/extractors/analyzers) to
              "meowURIs" for looking up candidate sources classes from
              query strings.
            - Add requiring extractors based on "meowURIs" referenced by rules
              in the active configuration.
            - Add ignoring files listed in the configuration.

              Uses "globbing" similar to that of 'fslint', acting on full
              paths.  So that glob '.DS_Store' would not match any files,
              instead use '*/.DS_Store' to match all files called '.DS_Store'
              in any path.

              The ignored files are listed under the 'FILESYSTEM_OPTIONS' in
              the configuration.

              The user-specific ignore-patterns is added to a set of defaults
              that are listed in 'constants.py'.
            - Add a new file 'name_template.py' for placeholder fields.
              Still somewhat of a work in progress.
            - Add A new class 'Resolver' for handling data collection
              previously done in 'namebuilder.py'.
            - Add meowURI: 'filesystem.abspath.full'
            - Rework 'plugin_handler.py'. Run only referenced plugins.
            - And a lot more --- refer to the git log for additional details.

            Changes:
            - Remove state and modify calling extractor classes.
              Modifies extractors to not keep any state and simplifies use.
              Previously, the extractor classes was handed a data source at
              instantiation through the '__init__' method.  This meant that the
              classes first had to be "loaded" with a source before they were
              executed in a later step, when running the "queue".
              Extractor classes no longer require any arguments to the
              '__init__' method.  Instead, the data source is passed to the
              class 'execute'-method, through the '__call__' method.

                  Old way of extracting data:

                      extractor = DataExtractor(source)
                      result = extractor.execute()

                  New way of extracting data:

                      extractor = DataExtractor()
                      result = extractor(source)

              This also removes the "extractor run queue" as it no longer
              required with this new way of executing extractors.

              Extractors also stored data in instance variables such as
              'self._data'.  This is also removed -- extractors should be
              called as functions.
              Extractors should no longer keep any state between calls.

            - Consolidate methods for returning extractor results.
            - Remove unused base class 'Rule'.
            - Refactor evaluating 'FileRule' conditions.
              Separates modifying the object state from returning results.
            - Refactoring by renaming variables and methods.
            - Improve prioritization of rules in the name builder.
            - Renmae file rule 'weight' to 'ranking_bias'.
            - Move 'namebuilder.py' to the 'core' module'.
            - Move 'filter.py' to the 'core' module'.
            - Restructure extractor module nesting.
              Modifies extractor namespacing to use submodules instead of '_'.
            - Remove "Py3k compatibility" in 'wrap_exiftool.py'.
            - Refactor and restructure unit tests.
            - Add 'unit_utils_constants.py'.
            - Rename the concept of "File Rules" to "Rules".
            - Move validation of rules to 'rules.py'.
            - Move validation of rule conditions to 'rules.py'.
            - Separate commad-line options setup from logging setup.
            - Clean up file object internals. Modify public interface.
            - Move "filetags"-specific code from 'FileObject' to the new
              'FiletagsAnalyzer' class.
            - Move "sanitation" to the name builder.
            - Replace the 'Extraction' class with module-level functions.
            - Replace the 'Analysis' class with module-level functions.
            - Remove unused function 'get_analyzer_classes_basename'.
            - The concept of a "query string" is now called a "meowURI".
            - Rename extractor query methods 'query' to 'execute'.
            - Adds method of auto-detecting encoding for difficult text.
            - Modify default colors in rename message.
            - Refactor the "name builder". Remove the 'NameBuilder' class.
            - Modify the 'Rule' class to not keep any state.
            - Remove 'pytesseract' depdendency, add inline modified version.
            - Rename 'autonameow.py' to 'main.py'.
            - Add wrapping data with 'ExtractedData' classes, for keeping
              contextual information and refernces to type wrapper classes,
              for use when converting the "raw" data to a form suitable for
              populating placeholder fields in the name template.
            - And a lot more --- refer to the git log for additional details.

            Fixes:
            - Fix getting file extensions from MIME-types.
            - Fix logging loosing track of the root logger.
            - Add skipping unit tests if dependencies aren't met.
            - Fix logic bugs in getting extension from MIME.
            - Fix bugs in 'eval_query_string_glob'.
            - Fix bug in repository where multiple results would not be
              collected properly in a list.
            - Fix non-breaking spaces messing up reading the configuration.
            - Fix cases of missing modules, 'PyPDF2'.
            - Fix inconsistent use of "MeowURIs" in analyzers.
            - Fix crashing when repeating the same input path multiple times.
            - Fix 'run.sh' wrapper script not resolving symlinks on MacOS.
            - Fix various bugs in the 'PlainTextExtractor', related to encoding.
            - And a lot more --- refer to the git log for additional details.


2017-08-18  [autonameow v0.4.5]
            Mostly non-functional improvements and refactoring.
            Rework of the internals for improved robustness and new features.
            Refer to the git log for additional details.

            Additions:
            - Add new type wrapper class 'PathComponent'.
              Passing parts of file names that could be empty, like a file
              extension that might be missing without considering the file name
              to be invalid, would trigger exceptions in the 'Path' type class
              that expected full absolute paths.
              This commit adds a new type class 'PathComponent' that accepts
              parts of paths and even empty paths, like that of a missing file
              extension.
            - Add requiring all extractors to be run if displaying any results.
              This should be reworked to handle cases where the configuration
              requires information from "slow" and normally excluded
              extractors.
              Normally excluded extractors should be included when they are
              required, not only when any results are to be shown.
            - Add optional list of required extractors.
              Adds optional argument 'require_extractors' to the 'start'
              method.
              The 'Extraction' class 'start' method can take an optional list
              of required extractor classes. If a extractor is "slow", it is
              not used if not explicitly required by inclusion in the
              'require_extractors' list.

            Changes:
            - Remove "get_*" methods from 'BaseAnalyzer'.
            - Add new extractor 'PlainTextExtractor'.
            - Move 'Rule' and 'FileRule' classes to 'rules.py'.
            - Modify field assignments to field parser classes.
              Uses the globs to catch some metadata fields. Especially
              'exiftool' fields such as 'PDF:Title' and 'XMP:Title' are matched
              by '*.:Title'.
            - Substitute a bad recursive function with a new common utility.
              Both the 'AnalysisResults' and 'ExtractedData' classes used a
              recursive function to count the number of contained items.
              One of these implementations was bad and returned bad counts.
              Add a single shared utility function used by both classes.
            - Rename 'AnalysisResults' method 'query' to 'get'.
            - Modify overall storage architecture.
            - Add a new 'Repository' class for storing all data.
            - Modify querying results in the 'RuleMatcher'.
            - Modify wrapping possibly empty path components.
              Use the new 'PathComponent' class for data that might be empty.
              The file extension might be missing and still be valid.
            - And a lot more --- refer to the git log for additional details.

            Fixes:
            - A lot of unused code removed.
            - Fix 'PlainTextExtractor' returns text as list.
            - Fix "null" return form the 'Path' types. Raise exception instead.
            - Do not represent "null" for 'datetime' types.

              <BANE> Find a suitable "null" representation of a 'datetime'
                     object, by not representing it.  </BANE>

            - Add fixes to the 'PathType' class and its related tests.
            - Fix various extractor bugs.
            - Fix incorrect exception handling in extractors.
            - And a lot more --- refer to the git log for additional details.


2017-07-25  [autonameow v0.4.4]
            Mostly non-functional improvements and refactoring.
            Rework of the internals for improved robustness and new features.

            Additions:
            - Adds a new script 'devscripts/next_todo_id.py'.
              Returns the next free TODO-list identifier that hasn't been used
              in either the TODO-list ('TODO.md') or "done" list ('done.md').
            - Add missing unit tests.
            - First implementation of internal custom type system.
              Custom type "wrapper" classes are used to coerce data into
              certain types. Classes are instantiated and re-used as "filters",
              the data is simply passed through and not contained within the
              custom type classes.
            - Add a method '_normalize' to the 'RegexConfigFieldParser' class.
              To be used for normalizing "unwieldy" text which might hopefully
              make matching more intuitive when dealing with text that "should"
              match but doesn't due to Unicode symbols looking very similar..
              NOTE: Currently completely unused.
            - Add passing extractor results data through the 'Path' type.
              Also adds modifications to the 'FileObject' class to match these
              changes. The 'FileObject' fields that are used in the changed
              lines should already be in the "internal bytestring" format, and
              so passing the data through the 'Path' type class returns them
              as-is.
              However, the idea is that this is part of a overarching change in
              how types are handled throughout the program and this specific
              case might be revisited and simplified at some later stage.
            - Add a partial implementation of handling "raw" data safer.
              Data extracted by 'MetadataExtractor' classes is wrapped in type
              classes that provide validation and type coercion.
              This *might* be a viable way to convert unknown "raw" data to a
              internal representation with greater certainties regarding the
              data types and contents.
              This might also solve formatting and other related issues.
            - Add mapping type wrappers to "raw" data with
              'tagname_type_lookup' in Extractor classes.
            - Add function 'try_wrap' that attempts to wrap values.
              Uses a lookup table dict 'PRIMITIVE_AW_TYPE_MAP' to map the type
              of the given value to internal type wrapper classes.

            Changes:
            - Refactor and cleanup the 'Configuration' class.
            - Rework how parsers are mapped to "query strings".
            - Various refactoring of unit tests.
            - Modify fields for 'DateTimeConfigFieldParser'.
            - Add returning dummy, false-positive "True" incomplete parsers.
              Results in unimplemented field parser evaluation functions will
              always evaluate a condition to True. Uses lambda-functions.
            - Various changes to the 'FieldParser' classes and their mapping.
            - Removs the 'MetadataSourceConfigFieldParser' class.
              This field parser class does not follow the intended abstraction
              model where the parser classes are mapped to expected data types
              based on the "query string". The "metadata fields" could contain
              any type of data, and so this class does not work well with the
              rest of the current implementation.
            - Move functions related to extractors.
              Moves functions and module attributes to 'extractors/__init__.py'
            - Move functions related to analyzers.
              Moves functions and module attributes to 'analyzers/__init__.py'
            - Rename extractor classes to indicate use and type.
              Prepend 'Abstract' to abstract classes, 'Base' to base classes.
            - Adds getting valid query strings at run-time instead of constant.
              Part of moving towards collecting information about valid query
              strings at run-time instead of using predetermined constants.
            - Remove redundant methods in "results" container classes.

            Fixes:
            - Add handling unimplemented evaluation.
            - Improvements to condition validation and configuration parsing.
            - Fixed comparing 'datetime' object with/without timezones.
            - Fix hack import and instantiation of extractors.
              New functions for finding and importing extractor classes from
              suitable python source files helped eliminate ad-hoc imports.


2017-07-10  [autonameow v0.4.3]
            Mostly refactoring and improvements of the internals; parts that
            handle evaluation of rules and validating the configuration are
            rewritten and greatly improved.
            Includes changes to the configuration file syntax, as well as
            compatability tests that alerts that user of this and upcoming
            changes.

            Additions:
            - Add compatability checking the configuration file.
              The program version used to write the file is stored in the
              configuration, this is compared against the version of the
              running program.
            - Add testing 'FieldParser' class suitability with wildcards or
              "globs", similar to the "MIME type globs" used in the 'Extractor'
              classes and for evaluating MIME type conditions in the
              configuration file rules.
            - Add a new "--recursive" option for recursively collecting files
              from all subdirectories of a given path.
            - Add additional integration and unit tests.
            - Add new "Compatibility" integration test suite.
              Some of the tests from the "Command-Line Interface" test suite
              were moved to this new file. New tests were added as well.
            - Add a new 'RuleCondition' class.
              Represents a single condition contained in a configuration file
              rule.  Performs validation of incoming arguments and packages a
              condition to facilitate evaluation.
            - Add unique identifiers to TODOs in the code and the TODO-list.

            Changes:
            - Modify the configuration file syntax.
              The configuration now uses a "flatter" structure as follows;

              Previous, old syntax:
                  -   CONDITIONS:
                      contents:
                          mime_type: image/jpeg
                      filesystem:
                          basename: DCIM.*
                          extension: jpg

              New, "flattened" syntax:
                  -   CONDITIONS:
                      contents.mime_type: image/jpeg
                      filesystem.basename: DCIM.*
                      filesystem.extension: jpg

            - Refactor and cleanup the 'Configuration' class.
            - Rework rule evaluation, now uses the 'FieldParser' classes to
              evaluate conditions. Still a work in progress.
              The "rule matcher" uses the 'RuleCondition' class method
              'evaluate' to evaluating conditions.  The method delegates the
              evaluation to a referenced 'FieldParser' class, that is chosen
              based on the "query string".
            - Various bugfixes and refactoring.
            - Move towards the "new" high-level architecture, separating the
              "core" from "analyzers" and "extractors".

            Fixes:
            - Fix 'FileRule' scores was not reset properly after each file.
            - Fix inconsistencies in the configuration file syntax.
            - Various improvements to handling encoding.
            - Fix broken integration and unit tests.


2017-06-24  [autonameow v0.4.2]
            Includes first attempt at properly fixing encoding issues.  Also a
            lot of cleanup and refactoring.  Refer to the Git log for details.

            Additions:
            - Add unit tests for old code.
            - Add and rework existing unit test mocking functions.
            - Add 'tests/README.md'.
            - Add constant 'MAGIC_TYPE_UNKNOWN' to be used if detection fails.

            Changes:
            - Modify how extractor and analyzer classes are deemed suitable for
              a given file.
              Old method evaluated the given file MIME type against the MIME
              type blobs in each of the classes attribute 'handles_mime_types'.
              Suitability is now tested by a new class method 'can_handle' in
              the 'Extractor' and 'Analyzer' base classes.  The internal
              implementation is the same, but this change opens up for future
              overriding of the 'can_handle' method in each of the inheriting
              classes if they require additional testing.
            - Various code/filename fefactoring and cleanup.
            - Add initial attempt at fixing encoding issues properly.
                - Based on the solution used in the "beets" project, described
                  here:  http://beets.io/blog/paths.html
                - Add reusable functions for encoding/decoding at boundaries.
                - Start reworking code to adhere to the boundaries and keep
                  data encoding/decoding to a minimum within the program.
            - Fall back to a default file rule description if not provided.
            - Rework terminal coloring and modify logging colors.
            - Add initial refactoring of 'namebuilder.py'.
              Move rule matching functions from 'namebuilder.py' to a new file
              'rulematcher.py'.

            Fixes:
            - Improve the 'colorize' function and verify with unit tests.
            - Fix the 'colorize_quoted' function and verify with unit tests.
            - Handle case where results is a dict of dicts.
              Results are flattened and the label is prepended to the results.
            - Add proper handling of MIME type globs in the configuration.
            - Trivial improvements to some of the unit tests execution speed.


2017-06-17  [autonameow v0.4.1]
            This version marks the start of definitiely moving towards
            a redesigned and pretty much frozen high-level architecture.
            Includes major changes. Refer to the Git log for in depth coverage.

            Additions:
            - Improved error handling in the 'NameBuilder' class.
            - Add support for simple globbing in MIME comparisons.
              This is used internally and in the configuration file.

                  MIME to evaluate      Glob          Evaluates
                  ---------------------------------------------
                  'image/jpg'           'image/jpg'        True
                  'image/png'           'image/*'          True
                  'application/pdf'     '*/*'              True
                  'application/pdf'     'image/*'         False

            - Add program version in the configuration file for future
              compatability testing.
            - Add 'TODO.md', which will be the primary list of stuff to do.
              Also added 'done.md' for the completed TODO-list items.

            Changes:
            - Modified the configuration file syntax.
              NOTE: Incompatible with older versions.
            - Major restructuring of overall architecture.
              Move towards separating data extracting from data analysis.
                - Add data extraction handler class 'Extraction' that functions
                  similar to the 'Analysis' class. Builds a queue of
                  "extractors" suited for the given file, executes enqueued
                  extractors and collects the results.
                - Add "extractors" as classes inherting from 'Extractor';

                    - Extractor
                        - MetadataExtractor
                            - ExiftoolMetadataExtractor
                            - PyPDFMetadataExtractor
                        - TextExtractor
                            - PdfTextExtractor
            - Various changes in part of moving towards new architecture.
                - In progress moving of data extraction from "analyzers" to
                  "extractors".
                - Extracted data is passed to the 'Analysis' class and
                  subsequently the "analyzers".

            Fixes:
            - Numerous fixes and corrections.
            - Documentation, bug fixes, refactoring and cleanup.
            - Removed a lot of hacks added in order to deliver v0.4.0 on time.


2017-06-06  [autonameow v0.4.0]
            Final version used in the demonstration videos recorded 2017-06-06.
            Includes major changes. Refer to the Git log for in depth coverage.

              This is the first actually usable version! Still very much alpha.

            Additions:
            - Improved out printing with presets and coloring.
            - Added actual renaming of files. '--automagic' mode now
              renames files matched in the configuration file.
            - Add 'santizize_filename' from the "youtube-dl" project.
            - Various utility functions and related unit tests.
            - Add customizable date/time formats in configuration file.
            - Add parsing configuration file rules, conditions and sources.
              Parts of this still needs quite a bit of work.
            - Add 'extractor' package for content extractors that can be used
              by analyzers. Should reduce code duplication.
            - Documentation, bug fixes, refactoring and cleanup.

            Changes:
            - Major restructuring of module hierarchy.
              All analyzers are moved to a new module 'analyzers' located at
              the same "depth" as the main 'core' module.  This is motivated
              by striving strict separation between the main program core and
              auxiliary modules that perform various tasks like data extraction
              and interaction with other systems.
            - Restructued internal data format. All crucial internal data
              structures are dervied from a reference 'RESULTS_DATA_STRUCTURE'.
            - Start move towards using callbacks to collect analyzer results.
            - Redesigned exiftool wrapper.
            - Abandon 'PyPDF' text extraction. Use 'pdftotext' exclusively.
            - Documentation, bug fixes, refactoring and cleanup.

            Fixes:
            - Numerous fixes and corrections.
            - Documentation, bug fixes, refactoring and cleanup.


2017-05-29  [autonameow v0.3.2]
            Includes major changes to both functionality and implementation.

            Marks the end of development as part of the course work of
            "1DV430 -- Individual Software Development Project", part of
            "Software Development and Operations" at Linnaeus University.

            Additions:
            - Custom "integration" testing framework.
                - Bash shell scripts allows testing anything on the system.
                - Generates test result reports as html and pdf documents.
                - Scripts for running all unit tests, integration tests,
                  producing reports and updating the project wiki.
            - Add a lot of missing unit tests.
            - Add shared utility functions for unit tests along with
              corresponding unit tests.
            - Add functions for reading and writing YAML files.
            - Add configuration handling.
                - Configuration data is handled by a 'Configuration' class.
                - Parsing and validation of configuration settings is done
                  by the following subclasses of the 'RuleParser' class;
                    - 'RegexRuleParser'      (Regular expression fields)
                    - 'MimeTypeRuleParser'   (MIME type fields)
                    - 'DateTimeRuleParser'   (Date/time-information fields)
                    - 'NameFormatRuleParser' (File name format string fields)
            - Add custom exceptions using the following inheritance hierarchy;
                - 'AutonameowException' (top-level base class)
                    - 'InvalidFileArgumentError' (invalid arguments)
                    - 'ConfigError' (top-level configuration exception class)
                        - 'NameTemplateSyntaxError' (invalid formatting string)
                        - 'ConfigurationSyntaxError' (bad configuration syntax)
                        - 'ConfigReadError' (configuration file read error)
                        - 'ConfigWriteError' (configuration file write error)

            Changes:
            - A lot of miscellaneous fixes, cleanup and refactoring.
                - Add 'constants.py' for all fixed global constants.
            - Add/update documentation strings.
            - Modify content and formatting of printed messages.
            - Move argument validation to 'FileObject' class.
            - Rewrite default configuration file.
            - Rewrite configuration structure and configuration file syntax.

            Fixes:
            - Fix failing unit tests.
            - Fix a lot of miscellaneous bugs.
            - Improve handling of calling unimplemented code.


2017-05-10  [autonameow v0.3.1]
            Insignificant changes of the core functionality. But major rework
            and improvements of the testing code, documentation and structure.

            Additions:
            - Include additional information on the environment in debug mode.
            - Add new option '--config-path' to allow specifying an alternative
              configuration file to use instead of the default configuration
              file at predetermined platform-specific locations.
            - Add shared library for the integration test scripts;
              'tests/integration_utils.sh', contains common utility functions
              used by bash test-scripts, like assertions, execution time
              measurement, logging, etc.
            - Add integration tests and integration test runner;
                - Add main integration runner 'integration_runner.sh'.
                - Add "Test Suite" test suite 'integration_test_tests.sh'.
                - Add "Command-Line Interface" test suite
                  'integration_test_cli.sh'.
                - Add "Documentation" test suite 'integration_test_docs.sh'.
            - Add directory 'devscripts' for developer tools and scripts.
                - Add experimental script 'list-imported-modules.sh'.
            - Add shared library for ALL tests; 'tests/common_utils.sh'.
              Handles setting up paths and global variables that are exported
              to the environment.
            - Add unit test runner; 'unit_runner.py'.
              Wraps 'pytest' which is used to run all unit tests and export the
              test results report to a HTML file.
            - Add (work in progress) runner for ALL tests; 'common_runner.sh'.
              This script will run both integration tests and unit tests and
              produce a summary report which will be included in the project
              wiki page, alternatively uploaded to GitHub pages.

            Changes:
            - Remove matching of rule field 'filename_in_filetags_format'
              in 'RuleMatcher'. Motivation is limiting project scope.
            - Remove prototype integration test; 'tests/run_integration_1.sh'.

            Fixes:
            - Various fixes and corrections to the main source and unit tests.
            - Various fixes and corrections to the utility scripts.


2017-04-24  [autonameow v0.3.0]
            Start developing the project during the course "1DV430 --
            Individual Software Development Project", part of the "Software
            Development and Operations" programme at Linnaeus University.

            Bump version to version v0.3.0, which will be the first version to
            contain changes made during the duration of the course.

            Additions:
            - Add Github-hosted project Wiki:
              https://github.com/1dv430/js224eh-project/wiki
            - Added prototype integration test; 'tests/run_integration_1.sh'.
            - Add new option '--version' that displays the program version
              and exits. This is now the only use of the ASCII-art banner.

            Changes:
            - Make 'guessit' integration optional, silently ignore errors and
              skip code that depend on the module if it is unavailable.
            - Add explicit licensing with GNU General Public License (v2).
              https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt

            Fixes:
            - Various cleanups of non-source files like documentation and notes.
            - Overall restructuring of the project directory hierarchy.
            - Improve wrapper launcher script 'run.sh'
                - Better error-handling and overall robustness.
                - Add OS-specific fixes for MacOS Sierra version '10.12.3' and
                  Linux version '4.4.0-71-generic'.
            - Add simple handling of NotImplementedError exceptions thrown in
              the abstract analyzer base class when an unimplemented field
              attribute getter is called.
            - Fixed various failing unit tests.


2016-12-19  [autonameow v0.2.2]

            Additions:
            - Include exiftool wrapper 'pyexiftool'.
                  http://smarnach.github.com/pyexiftool
                  https://github.com/smarnach/pyexiftool
              Simply copied in place for now. Dependecies should be handled
              properly, as git submodules, via pip or similar mechanism.
            - Add wrapper script 'run.sh' to act as a main entry point.
            - Start using exiftool in the pdf analyser.
            - Add 'get_publisher' to all analyzers.
            - Implement first version of 'get_publisher' in the PdfAnalyzer.
            - Add comments to indicate overridden methods and attributes.
            - Implement 'get_title' in the PdfAnalyzer.
            - Add ebook name template and matching rules to config defaults.

            Changes:
            - Separate operating mode from actions to perform.
                - Operating mode is either "automagic" or "interactive".
                  Default mode is the (safer (?)) "interactive mode".
                - Options for which actions to perform, for example:
                  "prepend datetime" or "rename" (unimplemented) are separate.
            - Add simpler method for getting fields from analyzers.
            - Change main color in the ASCII art header from yellow to blue.
            - Various changes to the 'namebuilder' class. Still far from done.
            - Various improvements and refactorings in the 'NameBuilder' class.

            Fixes:
            - Fix bug where the message to use '--help' to display help was
              displayed even when '--help' was used.
            - Display  message if the yet unimplemented feature "prepend
              datetime" is enabled.
            - Fix bug in 'prettyprint_options' by explicitly wrapping
              everything in 'str()' calls.


2016-11-14  [autonameow v0.2.1]

            Additions:
            - Improved inline documentation/docstrings.
            - Add priority to the analysis run queue execution.
                - Analyzers are assigned a priority number 0-1, stored in the
                  class variable 'run_queue_priority'.
                - Analysis with a higher number are executed before those
                  with a lower number.
            - Add rule field 'prefer_title'.
              Specifies which title to use, similar to 'prefer_datetime'.
            - Add detecting filename in "filetags" format.
                - Add method 'filetags_format_filename()' to 'FileObject' that
                  returns boolean True if the filename is in "filetags" format.
                - Add unit tests for 'filetags_format_filename()'.
            - Add rules to 'config_defaults.py' for testing.
            - Add matching of rule field 'filename_in_filetags_format' in
              'RuleMatcher'.

            Changes:
            - Start using "Google-style" documentation string formatting.
            - Modified rules in 'config_defaults.py'.

            Fixes:
            - Fix error caused by missing 'string.letters' attribute with
              Python 3. Use 'ascii_letters' for now. Should be fixed.
            - Fix broken unit tests.
            - PIL exception logging debug message caused crash.
            - Fix guessit import statement.
            - Fix logging message was shown regardless of match.


2016-08-28  [autonameow v0.2.0]

            Additions:
            - N/A

            Changes:
            - Migrate project to Python 3.5.
              Drop Python 2 support entirely for simplicity.
              Backwards compatibility fixes might be added at some future time.
            - All source files processed with the '2to3' conversion tool,
              version "2to3-2.7 2.7 January 2012". Some passed unchanged.

            Fixes:
            - N/A


2016-08-19  [autonameow v0.1.8]

            Additions:
            - Add unit tests for 'options.py'.
            - Add a 'NameBuilder' class for assembling new names.
              Fills out the empty template specified by a matching rule with
              data from analysis results.
            - Extend and improve the 'RuleMatcher'.
            - Add dynamic listing of Analyzer classes.
                - Store all analyzer classes in '_ALL_ANALYZER_CLASSES'.
                  The classes are added if their name ends with "Analyzer".
                - Adds function 'get_analyzer_classes' to access the above list.
                - Adds function 'get_instantiated_analyzers' to get a list of
                  analyzer objects.
                  Note that these are instantiated with a None 'FileObject'.
            - Store relevant file mime types in the analyzers themselves.  Add
              a new field 'applies_to_mime' that can be a string, a list of
              strings or None, which means the analyzer should be used
              regardless of file mimetype.

            Changes:
            - Rename the command-line option '--ignore-before-year' to
              '--ignore-to-year'.
            - Rename the command-line option '--ignore-after-year' to
              '--ignore-from-year'.
            - Change how the command-line options are passed in to argparse.
            - Improve function 'arg_is_year'.
            - Remove stub "action" classes 'AbstractAction' and 'RenameAction'.
            - Do not pass filter instances to the analyzers.  Filters were not
              used anyway, instead do the filtering as a separate step after
              the analysis.
            - Analyzers do not execute their analysis at instantiation.
                - Use new method 'run()' to start the analysis.

            Fixes:
            - Fix incorrect number of arguments expected for options
              '--ignore-from-year', '--ignore-years' and '--ignore-to-year'.
            - Rule matcher name regex tests file basename.
            - Fix no matching rule caused crash.


2016-08-09  [autonameow v0.1.7]

            Additions:
            - Extends title extraction in 'FilenameAnalyzer' by weighting
              results by how many "filetags" filename parts are present.

                  Filename:                                   Weight:
                  20160620 Descriptive title -- tags.ext      1
                  20160620 Descriptive title.ext              0.75
                  Descriptive title.ext                       0.25

              Add tests for the above additions and changes.

            - Add unit tests for main program class 'Autonameow'.
            - Extend test cases for the "filename partitioning".
            - Add new option '--automagic' to be used during development.
            - Add a new class 'ResultFilter' for filtering analysis results.

            Changes:
            - Restructure project directory hierarchy.
              Nest most of the main program code in a new package 'core'.
            - Modify logging message levels.  Substitute "warning" for "debug"
              in non-critical blocks for less overall logging output.
            - Move argparse command-line handling to a new file 'options.py'.
            - Removes the short form '-z' of command-line option "debug mode".
            - Improve implementation of command-line option '--dump-options'.

            Fixes:
            - Spelling, formatting and similar minor changes.


2016-08-07  [autonameow v0.1.6]

            Additions:
            - Implement all target features in 'FilesystemAnalyzer' and add the
              relevant tests, making it the first completed analyzer.
            - Extend the "filename partitioning" to include a date-/timestamp.
              Add and/or modify unit tests for extracting 'filenamepart_ts'.

            Changes:
            - Remove the 'Results' class in 'analysis.py' and substitute a
              plain dictionary instead.
            - Rename the actual value key in the results dictionary returned by
              analyzers to "value", instead of the previous "datetime" and
              "title" for datetime and title respectively.
            - Rename 'file_object.py' to 'fileobject.py'.
            - Extract file checks in '_handle_files' to method '_check_file'.
            - Set the "quiet mode" ('-q', '--quiet') default to False.
            - Set the "verbose mode" ('-v', '--verbose') default to False.

            Fixes:
            - Minor logging debug message grammar/spelling fixes.
            - Fix bug where execution with no commad-line arguments causes
              failed read of 'args.verbose'.


2016-07-31  [autonameow v0.1.5]

            Additions:
            - Add new option '--list-title' which dumps all "title" information
              from the analysis results. Similar to '--list-datetime'.
            - Extend tests of "filename partitioning" in the 'FileObject' class.
            - Add more unit tests;
                - Start adding tests for the 'FilenameAnalyzer' class.
                - Start adding tests for the 'FilesystemAnalyzer' class.
            - Add new option '--list-all' which dumps all information

            Changes:
            - Replaced logging errors with assertions.
            - Modify logging message levels to prefer lower level messages such
              as "debug" and "info" before higher levels like "warning" and
              "error".
            - Extend matching "special case" pattern in 'dateandtime.py'.

            Fixes:
            - Remove commented/dead code, listed by class:
                - FileObject: get_oldest_datetime, add_datetime.
                - Analysis: filter_datetime, print_oldest_datetime.
            - Optimize import statements.


2016-07-23  [autonameow v0.1.4]

            Additions:
            - Extend tests for utility file system functions in 'diskutils.py'.
            - Add test cases to tests of filename partitioning in 'FileObject'.
            - Add assertions and remove unhelpful warning messages.

            Changes:
            - Various cleanup and formatting fixes.
            - Remove debug print statement.
            - Temporarily disable unicode encoding in 'sanitize_text'.

            Fixes:
            - Remove unused and unfinished code.
                - Method 'prefix_date_to_filename'.
                - Method 'print_oldest_datetime'.
            - Fix incorrect usage of 'FileObject', modify to match new
              attribute names and structure.
            - Update how the 'FilenameAnalyzer' gets tags from filenames.
              Now uses the "partitioned filename" methods in 'FileObject'.


2016-07-22  [autonameow v0.1.3]

            Additions:
            - Add a very fancy ASCII art logo, created with "figlet".
              Displayed only when using the '--verbose' option.
            - Add tests for functions in 'dateandtime.py'.
            - Move function 'filetype_magic' to the utility file system
              functions in 'diskutils.py'.
                - Add tests for 'filetype_magic' in 'diskutils.py'.
            - Move responsability for basic file name operations to the utility
              file system functions in 'diskutils.py'.
                - Tests for getting file name extensions, file basename, etc.
            - Tests for extracting "filetags" tags.

            Changes:
            - Modify startup "banner" text contents and overall appearance.
            - Improve 'match_special_case' in 'dateandtime.py'.
            - Rename 'match_unix_timestamp' to 'match_any_unix_timestamp'.
            - Modify program exit message text.
            - Class 'FileObject' now gets the file type magic from
              'filetype_magic' in 'diskutils.py'.
            - Remove unused variable 'originalfilename' in 'FileObject'.

            Fixes:
            - Change how "very special case" date format in filenames are
              detected. This prevents duplicate results and is performant.
            - Improve handling filenames, especially compound extensions
              such as "filename.tar.gz" which does have the extension
              ".gz" but when dealing with "filetags" it makes more sense to
              treat all of ".tar.gz" as the extension/suffix.
            - Spell my my last name properly in 'version.py'.
              The encoding definition would allow using "ö", instead of
              the cautious "o". ..right?


2016-07-21  [autonameow v0.1.2]

            Additions:
            - Add parsing filetags from file names, as per the "filetags"
              workflow. Adds 'get_tags' to the abstract analyzer class,
              even though not all analyzer are suited to implement it.
            - Add settings related to the "filetags" workflow to the
              configuration file and default settings.
            - Start adding unit tests for 'dateandtime.py'.
            - Add utility file system functions 'diskutils.py'.
                - Add tests for 'diskutils.py'.

            Changes:
            - Rename 'main.py' to 'autonameow.py'.
            - Cleanup 'autonameow.py';
                - Remove unused code.
                - Rename variables and methods.
                - Make functions out of non-class specific methods.
            - Rename 'doc' directory to 'docs'.
            - Redo the unit tests completely, use different structure.
            - Add program termination message when using '--verbose'.
            - Have 'file_object' instances use the functions in 'diskutils.py'
              for getting their own filenames, etc. This makes it easier to
              test "simple" disk I/O code -- no need to create
              'file_object' instances.

            Fixes:
            - Improve matching UNIX timestamps in 'dateandtime.py'.


2016-07-11  [autonameow v0.1.1]

            Additions:
            - Log the total execution time when using the '--verbose' option.
            - Various improvements and additions to the debugging information
              provided by "logging" when running with the '--debug' option.
            - Add extra date/time search pattern to handle erroneous OCR text
              results where "/" is returned as "7".
            - Add extra date/time search pattern for filenames created by the
              Chrome extension "Full Page Screen Capture".

            Changes:
            - Change logging level for no files specified.
            - Modify logging levels. A number of 'info'-level messages are now
              'debug'-level, motivated by reducing the overall output.
            - Keyboard interrupt handling (ctrl-c) is now handled at a higer
              level so that "most" interrupts are handled properly.
            - Modify extracting date/time-information from filenames.  Adds
              search-methods and modifies the order. Still not very good and
              needs work.
            - Modify the default configuration in 'default_config.py'.
            - Modify how text is "sanitized" after extraction from documents,
              currently only pdfs. Still very broken and needs to be fixed.

            Fixes:
            - Fix pdf page numbering in debug output.
            - Fixes bug in PdfAnalyzer date/time-extraction where results from
              'dt_regex' would end up in 'text_content_brute', leading to the
              bruteforce results never reaching the results.
            - Fix cases where pdf content  extraction with PyPdf2 would return
              a single byte that counted as a successful extraction, preventing
              any additional tries/extractors from being run.


2016-07-08  [autonameow v0.1.0]
            First actual version bump. Development up until now has been at
            version v0.0.1. The code has now (barely) entered a state that
            warrants versioning.

            Additions:
            - Project now has a change log.
            - Basic alpha version of the main program, still severily lacking
              in functionality, stability and consistency.

            Changes:
            - N/A

            Fixes:
            - N/A

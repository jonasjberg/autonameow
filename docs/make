#!/usr/bin/env bash
#set -e                      # exit immediately if a command returns non-zero
#set -x                      # debug mode

if ! command -v "pandoc" >/dev/null 2>&1
then
    echo "Required executable \"pandoc\" is not available." >&2
    exit 127
fi

# Get full path to this script for tricky conditions.
# Source: http://stackoverflow.com/a/246128
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Generated files go here
BUILD_DIR="${SCRIPT_DIR}/build"
SRC_DIR="${SCRIPT_DIR}"

# Source notify-script if it exists. Save to flag variable if successful.
unset HAS_NOTIFY
if [ -e "/home/spock/Bin/notify" ]
then
    source /home/spock/Bin/notify && HAS_NOTIFY="true"
fi

# Create build directory if it does not exist
[ ! -e "$BUILD_DIR" ] && mkdir -v "$BUILD_DIR"

# Run basic sanity checks
[ -d "$BUILD_DIR" ] || { echo "Missing required directory \"${BUILD_DIR}\" .. Exiting." 2>&1 ; exit 1 ; }
[ -w "$BUILD_DIR" ] || { echo "Need write permissions for \"${BUILD_DIR}\" .. Exiting." 2>&1 ; exit 1 ; }
[ -d "$SRC_DIR" ]   || { echo "Missing required directory \"${SRC_DIR}\" .. Exiting."   2>&1 ; exit 1 ; }
[ -r "$SRC_DIR" ]   || { echo "Need read permissions for \"${SRC_DIR}\" .. Exiting."    2>&1 ; exit 1 ; }

[ $HAS_NOTIFY ] && msg_notify -1 "Starting pandoc .." "\nsource path: \"${SRC_DIR}\"" "\nbuild path: \"${BUILD_DIR}\""


count_errors=0
count_documents=0
count_skipped=0
for mdfile in ${SRC_DIR}/*.md
do
    count_documents=$(( $count_documents + 1 ))

    if [ ! -f "$mdfile" ]
    then
        printf "Skipping \"${mdfile}\" ..\n" 2>&1
        count_skipped=$(( $count_skipped + 1))
        continue
    fi

    mdfile_base=$(basename -- "${mdfile%.*}")
    if [ -z "$mdfile_base" ]
    then
        printf "[ERROR] Failed to resolve basename for \"${mdfile}\" ..\n" 2>&1
        count_skipped=$(( $count_skipped + 1))
        continue
    fi

    printf "  processing \"${mdfile_base}\" .."
    pandoc --smart \
           --normalize \
           --standalone \
           --highlight-style=monochrome \
           --filter pandoc-eqnos \
           --variable mainfont="DejaVu Sans" \
           --variable monofont="DejaVu Sans Mono" \
           --variable fontsize=10pt \
           --variable geometry:"top=1.5cm, bottom=2.5cm, left=1cm, right=1cm" \
           --variable geometry:a4paper \
           --table-of-contents \
           --toc-depth=3 \
           --number-sections \
           --chapters \
           -f markdown "$mdfile" -o "${BUILD_DIR}/${mdfile_base}.pdf"
    exitcode=$?

    if [ $exitcode -eq 0 ]
    then
        printf " [OK]\n"
    else
        count_errors=$(( $count_errors + 1 ))
        printf " [ERROR] pandoc returned ${exitcode}\n"
    fi
done


return_code=6
if [ $count_errors -eq 0 ] && [ $count_skipped -eq 0 ]
then
    return_code=0

    if [ $HAS_NOTIFY ]
    then
        msg_notify 0 "Compilation SUCCESSFUL!" \
                     "\n# Documents processed: ${count_documents}"
    else
        printf "Compilation SUCCESSFUL!\n"
        printf "  # Documents processed: ${count_documents}\n"
    fi
else
    return_code=1

    if [ $HAS_NOTIFY ]
    then
        msg_notify 1 "Compilation FAILED!" \
                     "\n# Documents processed: ${count_documents}" \
                     "\n# Errors: ${count_errors}" \
                     "\n# Skipped: ${count_skipped}"
    else
        printf "Compilation FAILED!\n"                         2>&1
        printf "  # Documents processed: ${count_documents}\n" 2>&1
        printf "  # Errors: ${count_errors}\n"                 2>&1
        printf "  # Skipped: ${count_skipped}\n"               2>&1
    fi
fi


exit $return_code
